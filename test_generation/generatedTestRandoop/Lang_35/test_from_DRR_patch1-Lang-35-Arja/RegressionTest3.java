import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        char[] charArray0 = null;
        java.lang.Character[] charArray2 = new java.lang.Character[] { '4' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray2);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '4', 5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray3);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1), (double) 2);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray5);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray17, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[52.0, -1.0, -1.0, 1.0, 100.0]");
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray9, 6, 3);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) 100);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.clone(shortArray9);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[0, 100, 10, 1, 100]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[0, 100, 10, 1]");
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 10);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray32, (byte) 10, 0);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.add(byteArray32, (byte) 1);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.add(byteArray37, (int) (short) 0, (byte) 1);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray37);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray15);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray15, (byte) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray49, (byte) 0);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 100 };
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray54, (byte) 10, 0);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray49, byteArray54);
        byte[] byteArray59 = null;
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray58, byteArray59);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.remove(byteArray58, 2);
        java.lang.Byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray62);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray63);
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray15, byteArray64);
        byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray64, 100, (int) ' ');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100, 100, 1, 0, 0, -1, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) -1);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray12, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 0, 1, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 1, -1, 1]");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.lang.String[][][] strArray0 = null;
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[] strArray6 = new java.lang.String[] {};
        java.lang.String[][] strArray7 = new java.lang.String[][] { strArray1, strArray2, strArray3, strArray4, strArray5, strArray6 };
        java.lang.String[] strArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray8);
        java.lang.String[][] strArray10 = org.apache.commons.lang3.ArrayUtils.add(strArray7, strArray8);
        java.lang.String[][][] strArray11 = org.apache.commons.lang3.ArrayUtils.add(strArray0, strArray10);
        int[] intArray15 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray21 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray21);
        int[] intArray28 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray22, intArray28);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray15, intArray28);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.subarray(intArray15, (int) (short) -1, 1);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.subarray(intArray15, (-1), 0);
        int[] intArray38 = new int[] { (byte) 0 };
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray38, 0);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.add(intArray38, 0);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray38, (int) (byte) 1, (int) ' ');
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, 0);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0, 1);
        int[] intArray56 = org.apache.commons.lang3.ArrayUtils.addAll(intArray38, intArray47);
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, (int) (byte) 1);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray36, intArray47);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray36, (int) (short) -1);
        int int63 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray10, (java.lang.Object) (short) -1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 3, (int) '4');
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray25, (double) '#');
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray27, (int) (short) 1, (double) 1.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray35);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray34, (java.lang.Object) floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray35, (float) '#');
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, (float) 10L);
        float[] floatArray45 = new float[] { (byte) -1 };
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray43, floatArray45);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray46, (float) (-1L));
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray46, (float) 100L);
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.clone(floatArray46);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray40, floatArray46);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray40, (float) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, (-1), (float) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[10.0]");
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray1, (int) (byte) -1, (int) (byte) 1);
        double[] doubleArray16 = new double[] { (byte) 10 };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) ' ');
        double[] doubleArray22 = new double[] { (byte) 10 };
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray17);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray17, (double) '#');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 35.0]");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, (int) (byte) 0, (int) 'a');
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) ' ', (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) 5, (int) (byte) 1);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray19 = new float[] { (byte) -1 };
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray17, 0.0f, (int) ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray4, floatArray17);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = new double[] { (byte) 10 };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray14, (double) (byte) 0);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 0.0d, (int) ' ');
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray14);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 1, (double) (short) 1);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, (double) 10.0f, 10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 0, (int) (short) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray8);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray8);
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray3);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray17, (float) (-1L));
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, (float) 10L);
        float[] floatArray24 = new float[] { (byte) -1 };
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray22, floatArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray22, (float) 1);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray22);
        float[] floatArray29 = new float[] {};
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.add(floatArray29, (float) 10L);
        float[] floatArray33 = new float[] { (byte) -1 };
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray31, floatArray33);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray34, (float) (-1L));
        float[] floatArray37 = new float[] {};
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.add(floatArray37, (float) 10L);
        float[] floatArray41 = new float[] { (byte) -1 };
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray39, floatArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray34, floatArray39);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray39);
        java.lang.String str45 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray17);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray17);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{10.0,-1.0}" + "'", str45, "{10.0,-1.0}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        java.lang.Long[] longArray28 = new java.lang.Long[] {};
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 0);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 100 };
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray39, (byte) 10, 0);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray34, byteArray39);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray28, (java.lang.Object) byteArray43);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray49, (byte) 0);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray49, (byte) 1);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray43, byteArray49);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray43);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray43, (byte) 10);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray57);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray57);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, (int) (byte) 0, (int) 'a');
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray4);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) (-1L), (int) '#');
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray4, (-1.0f));
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, (int) (byte) 100, 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray4, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) ' ');
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) '#', (int) (byte) 0);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0]");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, (int) (byte) 10, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, (int) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray10);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.subarray(intArray10, 3, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.lang.Character[] charArray0 = new java.lang.Character[] {};
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, 'a');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray1);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, 11, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray22 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray28 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray28);
        int[] intArray35 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray35);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.addAll(intArray22, intArray35);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(intArray22, 100);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray18, intArray22);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, 6);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) (byte) -1, 2);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true]");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) -1);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 10);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        boolean[] booleanArray0 = new boolean[] {};
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte) 10);
        boolean[] booleanArray7 = new boolean[] {};
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray7);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 10);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray18, false, (int) (short) 10);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray7 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray11 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray19 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray23 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[][] shortArray24 = new java.lang.Short[][] { shortArray3, shortArray7, shortArray11, shortArray15, shortArray19, shortArray23 };
        java.lang.Short[] shortArray30 = new java.lang.Short[] { (short) 100, (short) 10, (short) -1, (short) 10, (short) 10 };
        java.lang.Short[] shortArray36 = new java.lang.Short[] { (short) 100, (short) 10, (short) -1, (short) 10, (short) 10 };
        java.lang.Short[] shortArray42 = new java.lang.Short[] { (short) 100, (short) 10, (short) -1, (short) 10, (short) 10 };
        java.lang.Short[] shortArray48 = new java.lang.Short[] { (short) 100, (short) 10, (short) -1, (short) 10, (short) 10 };
        java.lang.Short[][] shortArray49 = new java.lang.Short[][] { shortArray30, shortArray36, shortArray42, shortArray48 };
        java.lang.Short[][] shortArray50 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Short[][] shortArray52 = org.apache.commons.lang3.ArrayUtils.remove(shortArray50, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertNotNull(shortArray50);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray3 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, 11);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0]");
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 10, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int16 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray15);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, (double) (-1.0f));
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.add(doubleArray18, (double) 100.0f);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray18, (double) 11);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[52.0, -1.0, -1.0, 1.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[52.0, -1.0, -1.0, 1.0, 100.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[52.0, -1.0, -1.0, 1.0, 100.0, -1.0, 11.0]");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        char[] charArray9 = new char[] { '#' };
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        int[] intArray12 = new int[] { (byte) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray12, 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, (int) (short) 100);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray10, (java.lang.Object) intArray12);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray12);
        int[] intArray22 = new int[] { (byte) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray22, 0);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.add(intArray22, 0);
        java.lang.Integer[] intArray27 = org.apache.commons.lang3.ArrayUtils.toObject(intArray26);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray27, (int) (byte) 10);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray29);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray7, (java.lang.Object) intArray29, (int) (short) 10);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray29, (int) ' ');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 10, 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 100, (int) (short) 1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray16);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.remove(byteArray16, (int) (byte) 1);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.clone(byteArray16);
        java.lang.Byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray16);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray11 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) (short) -1);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (double) 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (-1), (double) 2);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) (-1));
        char[] charArray25 = new char[] { '#' };
        java.lang.Character[] charArray26 = org.apache.commons.lang3.ArrayUtils.toObject(charArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(charArray25, '#');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray25, '4');
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray30, '4', (int) (byte) -1);
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.remove(charArray30, 0);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) 0, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray15);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.add(doubleArray17, (double) (-1L));
        double[] doubleArray20 = null;
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray19, doubleArray20);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 1, 1, 10 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3, 100);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 1, 10]");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) '#');
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray54, (int) (short) 1, (double) 1.0f);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray57, (double) (short) -1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray57);
        java.lang.Double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray60);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int63 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray62);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray61, (java.lang.Object) floatArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray45, (java.lang.Object[]) doubleArray61);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61);
        char[] charArray68 = new char[] { '#' };
        java.lang.Character[] charArray69 = org.apache.commons.lang3.ArrayUtils.toObject(charArray68);
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.clone(charArray68);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.add(charArray70, 'a');
        char[] charArray79 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int82 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray79, '4', (int) (byte) 100);
        int int85 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray79, '#', 0);
        char[] charArray86 = org.apache.commons.lang3.ArrayUtils.addAll(charArray70, charArray79);
        char[] charArray88 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray79, 'a');
        int int90 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray61, (java.lang.Object) charArray88, (int) (byte) -1);
        double[] doubleArray92 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61, (double) (short) 100);
        double[] doubleArray94 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61, (-1.0d));
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[#]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#, a]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "#4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "#4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[#, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 1, 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray1);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, (int) (byte) -1);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray1, (int) (short) 0, 100);
        int[] intArray21 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray27 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray27);
        int[] intArray34 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray28, intArray34);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.addAll(intArray21, intArray34);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray21, 2);
        int[] intArray42 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray48 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray48);
        int[] intArray55 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray49, intArray55);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.addAll(intArray42, intArray55);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.remove(intArray42, (int) (short) 1);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray38, intArray59);
        int int63 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray59, (int) ' ', (-1));
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.contains(intArray59, (int) (byte) 1);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.add(intArray59, (int) (short) 100);
        int[] intArray69 = new int[] { (byte) 0 };
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray69, 0);
        int[] intArray73 = org.apache.commons.lang3.ArrayUtils.add(intArray69, 0);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray73, (int) '#');
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray73, (int) (short) 0);
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.addAll(intArray67, intArray77);
        int[] intArray79 = org.apache.commons.lang3.ArrayUtils.addAll(intArray17, intArray67);
        java.lang.Boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray82 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray80, false);
        java.util.Map<java.lang.Object, java.lang.Object> objMap83 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray80);
        boolean[] booleanArray85 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray80, true);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) intArray79, (java.lang.Object) true);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[100, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[100, 52, 100, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[100, 0, 100, 52, 100]");
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertNotNull(booleanArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray82), "[]");
        org.junit.Assert.assertNotNull(objMap83);
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray14, 1, (int) (short) 0);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 0);
        byte[] byteArray13 = new byte[] { (byte) 100, (byte) 100 };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 10, 0);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray13);
        byte[] byteArray18 = null;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray17, byteArray18);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.remove(byteArray17, 2);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.clone(byteArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray3, (java.lang.Object) byteArray22, (-1));
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3, ' ');
        java.lang.Character[] charArray27 = org.apache.commons.lang3.ArrayUtils.toObject(charArray26);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4]");
        org.junit.Assert.assertNotNull(charArray27);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray13);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray13, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1, 100, 100, 1]");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (int) (byte) 10, (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        float[] floatArray1 = new float[] { '#' };
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1));
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray1, 0.0f, (int) '#');
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 5);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray1, (float) 1);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[35.0, 5.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        float[] floatArray1 = new float[] { '#' };
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1));
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (int) (byte) 0, (float) (short) 0);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) ' ');
        float[] floatArray13 = new float[] { 10.0f, 2, 6 };
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, 0, (float) (byte) 1);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray13);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(floatArray17, (float) (byte) -1);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[0.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 35.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.subarray(intArray16, 1, (int) '4');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 100);
        int[] intArray25 = new int[] { (byte) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray25, 0);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.add(intArray25, 0);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray25, (int) (short) 100);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray25);
        int[] intArray36 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray42 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray42);
        int[] intArray49 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray43, intArray49);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.addAll(intArray36, intArray49);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray36, 2);
        int[] intArray57 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray63 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray63);
        int[] intArray70 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray64, intArray70);
        int[] intArray72 = org.apache.commons.lang3.ArrayUtils.addAll(intArray57, intArray70);
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.remove(intArray57, (int) (short) 1);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray53, intArray74);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray25, intArray74);
        int[] intArray79 = org.apache.commons.lang3.ArrayUtils.subarray(intArray25, (int) (short) 0, (int) (byte) 1);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray21, intArray79);
        java.lang.Integer[] intArray84 = new java.lang.Integer[] { 1, 1, 10 };
        int[] intArray86 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray84, 100);
        int int88 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray86, 5);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.contains(intArray86, (-1));
        int[] intArray91 = org.apache.commons.lang3.ArrayUtils.addAll(intArray79, intArray86);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 1, 1, 10]");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray8, (java.lang.Object) 100.0d);
        int[] intArray12 = new int[] { (byte) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray12, 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, (int) (byte) 1, (int) ' ');
        int[] intArray21 = new int[] { (byte) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 10, 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0, 1);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray21);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.clone(intArray21);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray31, 1, (int) (short) 0);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.addAll(intArray8, intArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray8, (int) (short) 1);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) '#');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        boolean[] booleanArray37 = new boolean[] { true, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray37, false);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray37, true, (int) (byte) 100);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray37);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, true);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.add(booleanArray43, true);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray47, true);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray47, false, (int) (short) 0);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.add(booleanArray47, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, true, true, true, false, false, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true, true, true, false, false, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[true, false, true, true, true, false, false, true, true, false, false, true]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[true, true, false, true, true, true, false, false, true, true, false, false, true, true]");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        float[] floatArray3 = new float[] { 10.0f, 2, 6 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 0, (float) (byte) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f, (int) (byte) -1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, (float) 100);
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray3);
        float[] floatArray13 = new float[] {};
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, (float) 10L);
        float[] floatArray17 = new float[] { (byte) -1 };
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray18, (float) (-1L));
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10L);
        float[] floatArray25 = new float[] { (byte) -1 };
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray18, floatArray23);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray23);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray23);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray29, (float) 100L);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, 2.0, 6.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.remove(charArray5, 2);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray9, (int) (byte) 0, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ , #, a]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  ]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#,  , #]");
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray21, 'a');
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray21, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##a4#   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##a4#   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, a, 4, #,  ,  ,  ]");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Character[] charArray5 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray10 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray15 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray20 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray25 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray30 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[][] charArray31 = new java.lang.Character[][] { charArray5, charArray10, charArray15, charArray20, charArray25, charArray30 };
        java.lang.Character[][] charArray32 = org.apache.commons.lang3.ArrayUtils.toArray(charArray31);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.reflect.GenericDeclaration[]) wildcardClassArray0, (java.lang.Object) charArray32);
        char[] charArray35 = new char[] { ' ' };
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.add(charArray35, '#');
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray35, '#', (int) (short) 10);
        char[] charArray42 = new char[] { '#' };
        java.lang.Character[] charArray43 = org.apache.commons.lang3.ArrayUtils.toObject(charArray42);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.clone(charArray42);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.add(charArray44, 'a');
        char[] charArray53 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray53, '4', (int) (byte) 100);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray53, '#', 0);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.addAll(charArray44, charArray53);
        char[] charArray62 = new char[] { '#' };
        java.lang.Character[] charArray63 = org.apache.commons.lang3.ArrayUtils.toObject(charArray62);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.clone(charArray62);
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.add(charArray64, 'a');
        char[] charArray68 = new char[] { '#' };
        java.lang.Character[] charArray69 = org.apache.commons.lang3.ArrayUtils.toObject(charArray68);
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.clone(charArray68);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.addAll(charArray64, charArray68);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.addAll(charArray60, charArray68);
        char[] charArray73 = org.apache.commons.lang3.ArrayUtils.addAll(charArray35, charArray68);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray32, (java.lang.Object) charArray68, 6);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray68);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ ]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , #]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, a]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[#]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[#, a]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[#]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[#, #]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , #]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        java.lang.Object[] objArray0 = null;
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) '#');
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, (int) (short) 1, (double) 1.0f);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) -1);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) doubleArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, 10.0d, (int) '4');
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray15);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, 2, (double) 'a');
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray15, (double) 10L);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray15, (double) 100L, (double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 97.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        int[] intArray0 = null;
        int[] intArray1 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray0, intArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray3, '4');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, (int) '4', (int) (short) 10);
        char[] charArray9 = null;
        char[] charArray11 = new char[] { '#' };
        java.lang.Character[] charArray12 = org.apache.commons.lang3.ArrayUtils.toObject(charArray11);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray11);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.add(charArray13, 'a');
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.toObject(charArray13);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, ' ');
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, ' ', 2);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, 'a', (int) (short) 10);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray13);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.add(charArray13, 'a');
        char[] charArray30 = new char[] { '#' };
        java.lang.Character[] charArray31 = org.apache.commons.lang3.ArrayUtils.toObject(charArray30);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray30);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.add(charArray32, 'a');
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray32);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray35);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray39 = new char[] { '#' };
        java.lang.Character[] charArray40 = org.apache.commons.lang3.ArrayUtils.toObject(charArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray39);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.addAll(charArray37, charArray39);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.clone(charArray39);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.subarray(charArray39, (int) (byte) 100, (int) ' ');
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray39, 'a');
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray13, charArray39);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray3, charArray13);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray53 = org.apache.commons.lang3.ArrayUtils.add(charArray3, (int) (byte) 100, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, a]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, a]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, a]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#, #]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '#');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray5);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ , #, a]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.lang.Boolean[] booleanArray0 = new java.lang.Boolean[] {};
        java.lang.Boolean[] booleanArray1 = new java.lang.Boolean[] {};
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] {};
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] {};
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] {};
        java.lang.Boolean[][] booleanArray5 = new java.lang.Boolean[][] { booleanArray0, booleanArray1, booleanArray2, booleanArray3, booleanArray4 };
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] {};
        java.lang.Boolean[][] booleanArray7 = new java.lang.Boolean[][] { booleanArray6 };
        java.lang.Boolean[][] booleanArray8 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray5, booleanArray7);
        boolean[] booleanArray14 = new boolean[] { true, true, false, false };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, true);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, true);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.add(booleanArray14, 0, true);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, true, 6);
        java.lang.Boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray23);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27, true);
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.add(booleanArray5, (int) (byte) 0, booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray30);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '#', (int) 'a');
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, '4');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray3);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '4', (int) (byte) 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray8, (java.lang.Object) 100.0d);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray0);
        java.lang.Class<?>[] wildcardClassArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray23 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray23, (long) (-1));
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.add(longArray25, 0, (long) 1);
        java.lang.Class<?> wildcardClass29 = longArray25.getClass();
        java.lang.Class<?>[] wildcardClassArray30 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray16, wildcardClass29);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray31 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.GenericDeclaration[]) wildcardClassArray0, (java.lang.reflect.GenericDeclaration[]) wildcardClassArray16);
        java.lang.String[] strArray32 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray32);
        java.util.Map<java.lang.Object, java.lang.Object> objMap34 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray32);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray39, (byte) 0);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 100 };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10, 0);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray39, byteArray44);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(byteArray39, (byte) 1);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray32, (java.lang.Object) byteArray39);
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray56, (byte) 0);
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray61, (byte) 10, 0);
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray56, byteArray61);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray39, byteArray61);
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) wildcardClassArray16, (java.lang.Object) byteArray61);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray16);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClassArray30);
        org.junit.Assert.assertNotNull(genericDeclarationArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(objMap34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, true);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray9, (int) (byte) -1, (int) (short) 100);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray12, 10, 11);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        float[] floatArray1 = new float[] { '#' };
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1));
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray1, 0.0f, (int) '#');
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 5);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray8);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[5.0, 35.0]");
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        double[] doubleArray18 = new double[] { (-1), (byte) 100, 10L };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) (-1.0f));
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray14, (java.lang.Object) doubleArray23);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) 0);
        java.lang.Class<?>[] wildcardClassArray29 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray33 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray33);
        short[] shortArray39 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray39, (short) (byte) 0, 2);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray33, shortArray39);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray33, (short) (byte) 0);
        short[] shortArray50 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray50, (short) (byte) 0, 2);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray50, (short) 100);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray33, shortArray55);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray29, (java.lang.Object) shortArray56);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray56, (short) (byte) 1);
        short[] shortArray63 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray63);
        short[] shortArray69 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray69, (short) (byte) 0, 2);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray63, shortArray69);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray63, (short) (byte) 0);
        short[] shortArray80 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray80, (short) (byte) 0, 2);
        short[] shortArray85 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray80, (short) 100);
        short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray63, shortArray85);
        short[] shortArray87 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray56, shortArray85);
        int int89 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray14, (java.lang.Object) shortArray87, 3);
        short[] shortArray91 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(wildcardClassArray29);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray80), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray85), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(shortArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray91), "[1, 10, 100, 0]");
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean[] booleanArray30 = new boolean[] { true, true, false, true };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray30, true, (int) '4');
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray30);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray30, false);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray18, booleanArray30);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray18, true);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.add(booleanArray18, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false]");
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) (byte) 100);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray40);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray1, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) 10L, (int) 'a');
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.remove(floatArray5, (int) (short) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, 2, (double) 1.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) '4');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, 10);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray20, 0, (int) (short) 1);
        java.lang.Integer[] intArray26 = org.apache.commons.lang3.ArrayUtils.toObject(intArray20);
        short[] shortArray31 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray31);
        short[] shortArray36 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray36);
        short[] shortArray42 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray42, (short) (byte) 0, 2);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray36, shortArray42);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray31, shortArray36);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray36, (short) (byte) 0, 5);
        java.lang.Short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray36);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray51, (short) (byte) 0);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray26, (java.lang.Object[]) shortArray51);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toObject(longArray9);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray9, (long) (byte) 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        java.lang.Integer[] intArray21 = org.apache.commons.lang3.ArrayUtils.toObject(intArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray21);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray21, 11);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0]");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, 10);
        short[] shortArray27 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray32 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray37 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray42 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray47 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray52 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray53 = new short[][] { shortArray27, shortArray32, shortArray37, shortArray42, shortArray47, shortArray52 };
        java.lang.Long[] longArray60 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray60, (long) (-1));
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray62, (long) '#');
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.subarray(longArray62, (int) '4', (int) (byte) 10);
        short[][] shortArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray53, (java.lang.Object) longArray67);
        int[] intArray70 = new int[] { (byte) 0 };
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray70, 0);
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.add(intArray70, 0);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray70, (int) (short) 100);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray70);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray53, (java.lang.Object) intArray70);
        int[] intArray80 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray70, (int) (byte) 100);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray80, (int) (short) 10, 0);
        int int86 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray80, 11, 0);
        int[] intArray87 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray80);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, -1, -1, 10, 100, 0]");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray18, (float) (byte) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, 0.0f, 2);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, 4, (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray11, 100L);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) (byte) 10);
        java.lang.Long[] longArray22 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray22, (long) (-1));
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.add(longArray24, 0, (long) 1);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray24, (long) (-1), (int) (byte) 1);
        long[] longArray31 = new long[] {};
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(longArray31, (long) (short) 1);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.addAll(longArray24, longArray31);
        java.lang.Long[] longArray41 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41, (long) (-1));
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray43, (long) '#');
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.subarray(longArray43, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray55 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray55, (long) (-1));
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray57, (long) '#');
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray48, longArray57);
        long[] longArray63 = new long[] { (byte) -1, 10 };
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.clone(longArray63);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray48, longArray63);
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.addAll(longArray34, longArray63);
        java.lang.Long[] longArray73 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray73, (long) (-1));
        long[] longArray76 = org.apache.commons.lang3.ArrayUtils.clone(longArray75);
        java.lang.Long[] longArray83 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray85 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray83, (long) (-1));
        int int88 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray85, (long) (short) -1, 10);
        int int90 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray85, (long) ' ');
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray75, longArray85);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray75);
        boolean boolean93 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray34, longArray75);
        boolean boolean94 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray11, longArray75);
        java.lang.Long[] longArray95 = org.apache.commons.lang3.ArrayUtils.toObject(longArray75);
        int int97 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray75, (long) (byte) 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[1, -1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(longArray95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 0, 0, 0, 10]");
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        java.lang.Boolean[] booleanArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray1, true);
        boolean[] booleanArray8 = new boolean[] { true, true, false, false };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, false);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, true);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray3, booleanArray8);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray3);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray10);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(shortArray9, (short) 1);
        short[] shortArray20 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray20);
        short[] shortArray26 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) (byte) 0, 2);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray20, shortArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) -1, (int) (byte) 1);
        short[] shortArray35 = null;
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray26);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.add(shortArray26, (short) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[0, 100, 10, 1, 0]");
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, (int) (byte) 0, (int) 'a');
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) ' ', (int) (short) 10);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) 5, (int) (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) 3);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        short[] shortArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(shortArray0, (short) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        double[] doubleArray5 = new double[] { 0, (byte) 10, 10.0d, (byte) 1, (-1.0d) };
        double[] doubleArray11 = new double[] { 0, (byte) 10, 10.0d, (byte) 1, (-1.0d) };
        double[] doubleArray17 = new double[] { 0, (byte) 10, 10.0d, (byte) 1, (-1.0d) };
        double[] doubleArray23 = new double[] { 0, (byte) 10, 10.0d, (byte) 1, (-1.0d) };
        double[][] doubleArray24 = new double[][] { doubleArray5, doubleArray11, doubleArray17, doubleArray23 };
        double[] doubleArray30 = new double[] { ' ', 4, 2, 1.0f, 10L };
        double[] doubleArray36 = new double[] { ' ', 4, 2, 1.0f, 10L };
        double[] doubleArray42 = new double[] { ' ', 4, 2, 1.0f, 10L };
        double[] doubleArray48 = new double[] { ' ', 4, 2, 1.0f, 10L };
        double[] doubleArray54 = new double[] { ' ', 4, 2, 1.0f, 10L };
        double[][] doubleArray55 = new double[][] { doubleArray30, doubleArray36, doubleArray42, doubleArray48, doubleArray54 };
        double[][] doubleArray56 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray24, doubleArray55);
        double[] doubleArray60 = new double[] { (-1), (byte) 100, 10L };
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray60, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray60);
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.add(doubleArray60, (double) (byte) 100);
        double[] doubleArray69 = new double[] { (byte) 10 };
        double[] doubleArray70 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray69);
        double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray70);
        java.lang.Double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray71);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray72);
        double[] doubleArray74 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray67, doubleArray73);
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.add(doubleArray67, (double) (byte) -1);
        java.lang.Double[] doubleArray83 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray85 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray83, (double) '#');
        double[] doubleArray88 = org.apache.commons.lang3.ArrayUtils.add(doubleArray85, (int) (short) 1, (double) 1.0f);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray88, (double) (short) -1);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray88, 0.0d);
        double[] doubleArray95 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray88, (int) (short) 10, 3);
        double[] doubleArray96 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray67, doubleArray95);
        double[][] doubleArray97 = org.apache.commons.lang3.ArrayUtils.add(doubleArray55, doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0, 10.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[32.0, 4.0, 2.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[32.0, 4.0, 2.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[32.0, 4.0, 2.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[32.0, 4.0, 2.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[32.0, 4.0, 2.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 100.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 100.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 10.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[-1.0, 100.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.clone(intArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, (int) (byte) 0, 100);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray21);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 5, 1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        float[] floatArray1 = new float[] { '#' };
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1));
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, 0, (int) (short) 100);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray8);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray8);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[35.0]");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, false);
        boolean[] booleanArray16 = new boolean[] { true, true, false, true };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, true, (int) '4');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray16);
        java.lang.Boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray16);
        java.lang.Boolean[] booleanArray27 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27);
        java.lang.Boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray16, booleanArray28);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray28, 2);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray28, false, (-1));
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray28);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.lang.String[] strArray1 = new java.lang.String[] { "{100,100,1,10}" };
        java.lang.String[] strArray3 = new java.lang.String[] { "{100,100,1,10}" };
        java.lang.String[] strArray5 = new java.lang.String[] { "{100,100,1,10}" };
        java.lang.String[] strArray7 = new java.lang.String[] { "{100,100,1,10}" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray1, strArray3, strArray5, strArray7 };
        java.lang.String[][][] strArray9 = new java.lang.String[][][] { strArray8 };
        java.lang.String[][][] strArray10 = org.apache.commons.lang3.ArrayUtils.toArray(strArray9);
        java.lang.String[] strArray11 = new java.lang.String[] {};
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.lang.String[] strArray13 = new java.lang.String[] {};
        java.lang.String[] strArray14 = new java.lang.String[] {};
        java.lang.String[] strArray15 = new java.lang.String[] {};
        java.lang.String[] strArray16 = new java.lang.String[] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] { strArray11, strArray12, strArray13, strArray14, strArray15, strArray16 };
        java.lang.String[] strArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray18);
        java.lang.String[][] strArray20 = org.apache.commons.lang3.ArrayUtils.add(strArray17, strArray18);
        java.lang.String[][][] strArray21 = null;
        java.lang.String[] strArray22 = new java.lang.String[] {};
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.lang.String[] strArray24 = new java.lang.String[] {};
        java.lang.String[] strArray25 = new java.lang.String[] {};
        java.lang.String[] strArray26 = new java.lang.String[] {};
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.lang.String[][] strArray28 = new java.lang.String[][] { strArray22, strArray23, strArray24, strArray25, strArray26, strArray27 };
        java.lang.String[] strArray29 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray29);
        java.lang.String[][] strArray31 = org.apache.commons.lang3.ArrayUtils.add(strArray28, strArray29);
        java.lang.String[][][] strArray32 = org.apache.commons.lang3.ArrayUtils.add(strArray21, strArray31);
        java.lang.String[][] strArray33 = org.apache.commons.lang3.ArrayUtils.addAll(strArray17, strArray31);
        java.lang.CharSequence[][][] charSequenceArray34 = org.apache.commons.lang3.ArrayUtils.add((java.lang.CharSequence[][][]) strArray9, (java.lang.CharSequence[][]) strArray31);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(charSequenceArray34);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) 1);
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray56);
        short[] shortArray62 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray62);
        short[] shortArray68 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray68, (short) (byte) 0, 2);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray62, shortArray68);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray68);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray68, (short) -1, (int) (byte) 1);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray68, 6, 3);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray27, shortArray79);
        java.lang.Short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray79);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray79);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) 1);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (byte) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 1.0f, 6);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap19 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '52.0', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        double[] doubleArray18 = new double[] { (-1), (byte) 100, 10L };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) (-1.0f));
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray14, (java.lang.Object) doubleArray23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 10.0]");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100, 3);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0, 6);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, (int) (short) -1, 1);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray15 = null;
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray15);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.lang.Byte[][] byteArray0 = new java.lang.Byte[][] {};
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray18 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray24 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray30 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray31 = new java.lang.Byte[][] { byteArray6, byteArray12, byteArray18, byteArray24, byteArray30 };
        java.lang.Byte[][] byteArray32 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray31);
        long[] longArray35 = new long[] { (byte) -1, 10 };
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.clone(longArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray0, (java.lang.Object) longArray35);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.clone(longArray35);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray41 = org.apache.commons.lang3.ArrayUtils.add(longArray38, (int) (short) -1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 10]");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray9, (long) 100);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.subarray(longArray9, 4, 4);
        java.lang.Long[] longArray15 = org.apache.commons.lang3.ArrayUtils.toObject(longArray9);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) '#');
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray54, (int) (short) 1, (double) 1.0f);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray57, (double) (short) -1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray57);
        java.lang.Double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray60);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int63 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray62);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray61, (java.lang.Object) floatArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray45, (java.lang.Object[]) doubleArray61);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray66);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray66, (double) 6);
        double[] doubleArray71 = new double[] { (byte) 10 };
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray71);
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray71, (double) 100.0f);
        java.lang.Double[] doubleArray75 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray71);
        int int78 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray71, (double) 100, (int) (short) 100);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray66, doubleArray71);
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray66, 100.0d);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray20, (int) (byte) 100, 0);
        short[] shortArray27 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray27);
        short[] shortArray33 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray33, (short) (byte) 0, 2);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray27, shortArray33);
        short[] shortArray41 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray41);
        short[] shortArray47 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray47, (short) (byte) 0, 2);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray41, shortArray47);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray47);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray27, (short) 100);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray27);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.clone(shortArray27);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[100, 10, 100, 1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 100]");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        java.lang.Long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toObject(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][] classArray13 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray14 = (java.lang.Class<?>[][]) classArray13;
        java.lang.Class[][] classArray16 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray17 = (java.lang.Class<?>[][]) classArray16;
        java.lang.Class[][][] classArray19 = new java.lang.Class[5][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray20 = (java.lang.Class<?>[][][]) classArray19;
        wildcardClassArray20[0] = wildcardClassArray5;
        wildcardClassArray20[1] = wildcardClassArray8;
        wildcardClassArray20[2] = wildcardClassArray11;
        wildcardClassArray20[3] = wildcardClassArray14;
        wildcardClassArray20[4] = wildcardClassArray17;
        java.lang.Class<?>[][][] wildcardClassArray31 = org.apache.commons.lang3.ArrayUtils.addAll(wildcardClassArray2, wildcardClassArray20);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.reflect.Type[][][]) wildcardClassArray2);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray2, (java.lang.Object) (short) 1);
        java.lang.reflect.Type[][][] typeArray35 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][] typeArray36 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray37 = org.apache.commons.lang3.ArrayUtils.clone(typeArray36);
        float[] floatArray38 = new float[] {};
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.add(floatArray38, (float) 10L);
        float[] floatArray42 = new float[] { (byte) -1 };
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray40, floatArray42);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray43, (float) (-1L));
        float[] floatArray46 = new float[] {};
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, (float) 10L);
        float[] floatArray50 = new float[] { (byte) -1 };
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray48, floatArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray43, floatArray48);
        java.lang.Float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray48);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray48, (float) 3, (int) '4');
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) typeArray36, (java.lang.Object) int56);
        java.lang.reflect.Type[][][] typeArray58 = org.apache.commons.lang3.ArrayUtils.add(typeArray35, typeArray36);
        java.util.Map<java.lang.Object, java.lang.Object> objMap59 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) typeArray35);
        char[] charArray61 = new char[] { '#' };
        java.lang.Character[] charArray62 = org.apache.commons.lang3.ArrayUtils.toObject(charArray61);
        int[] intArray64 = new int[] { (byte) 0 };
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray64, 0);
        int[] intArray68 = org.apache.commons.lang3.ArrayUtils.add(intArray64, 0);
        int int70 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray64, (int) (short) 100);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray62, (java.lang.Object) intArray64);
        int[] intArray73 = new int[] { (byte) 0 };
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray73, 0);
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.add(intArray73, 0);
        int int79 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray73, (int) (short) 100);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray62, (java.lang.Object) (short) 100);
        int int82 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) typeArray35, (java.lang.Object) int80, 6);
        java.lang.reflect.Type[][][] typeArray83 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.Type[][][]) wildcardClassArray2, typeArray35);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(wildcardClassArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(objMap59);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(typeArray83);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 10);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray32, (byte) 10, 0);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.add(byteArray32, (byte) 1);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.add(byteArray37, (int) (short) 0, (byte) 1);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray37);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray15);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray15, (byte) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray49, (byte) 0);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 100 };
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray54, (byte) 10, 0);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray49, byteArray54);
        byte[] byteArray59 = null;
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray58, byteArray59);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.remove(byteArray58, 2);
        java.lang.Byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray62);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray63);
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray15, byteArray64);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray15);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100, 100, 1, 0, 0, -1, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        short[] shortArray18 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray18);
        short[] shortArray24 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray24, (short) (byte) 0, 2);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray18, shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) -1, (int) (byte) 1);
        short[] shortArray33 = null;
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray24);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.remove(shortArray24, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray18 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray18);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray19, (int) (byte) 0, (int) 'a');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.clone(floatArray19);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) (-1L), (int) '#');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray19);
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray19);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray28);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray12 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray12);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray6);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, 0, (int) (byte) 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, 10, 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.lang.Boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        org.junit.Assert.assertNull(booleanArray2);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) -1);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray15, (byte) 0, 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.lang.Object[] objArray0 = null;
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) '#');
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, (int) (short) 1, (double) 1.0f);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) -1);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) doubleArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, 10.0d, (int) '4');
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray15);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, 2, (double) 'a');
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray15, (double) 10L);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray25, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 97.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        boolean[] booleanArray0 = new boolean[] {};
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte) 10);
        boolean[] booleanArray7 = new boolean[] {};
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray7);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 10);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray0, 4, (int) (short) 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', 0);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray18);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, 4, (int) (byte) 10);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        long[] longArray0 = new long[] {};
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) (short) 1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, 1L);
        long[] longArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray0, longArray5);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray18 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray18);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray19, (int) (byte) 0, (int) 'a');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.clone(floatArray19);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) (-1L), (int) '#');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray19);
        float[] floatArray28 = new float[] {};
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray28, (float) 10L);
        float[] floatArray32 = new float[] { (byte) -1 };
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray30, floatArray32);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray33, (float) (-1L));
        float[] floatArray36 = new float[] {};
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.add(floatArray36, (float) 10L);
        float[] floatArray40 = new float[] { (byte) -1 };
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray38, floatArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray38, (float) 1);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray33, floatArray38);
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray38, 10, 0);
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.add(floatArray47, (float) (-1));
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray49);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[10.0, -1.0]");
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray16, (float) '#');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray20, (int) (byte) -1, (int) (short) 1);
        float[] floatArray27 = new float[] { 10.0f, 2, 6 };
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray27, 0, (float) (byte) 1);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray27, 0.0f, (int) (byte) -1);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray27, (float) 100);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray27, 2, 2);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray27);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray23, (int) (short) 100, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray0);
        java.util.Map<java.lang.Object, java.lang.Object> objMap2 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray0);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray7, (byte) 0);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 100 };
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray12, (byte) 10, 0);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray12);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(byteArray7, (byte) 1);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) byteArray7);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) 0);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray29, (byte) 10, 0);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray24, byteArray29);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray7, byteArray29);
        java.lang.Byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(objMap2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.clone(shortArray19);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.add(shortArray21, (short) 0);
        java.lang.Short[] shortArray30 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30, (short) 1);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30, (short) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray21, shortArray36);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray20, shortArray37);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray38, (short) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[0]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[0, 100, 10, 1, 10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray3, '#');
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray10, ' ', (int) (short) 10);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 0);
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 0, (int) (short) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray8);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray8);
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray13 = new float[] { '#' };
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, (float) (-1));
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        java.lang.String str19 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray13, " ");
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray13, 6, (int) (short) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray23);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{35.0}" + "'", str19, "{35.0}");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray2, true, (int) (short) 100);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) booleanArray2, "{-1,10,-1,10,1,1,-1,10}");
        boolean[] booleanArray13 = new boolean[] { true, true, false, true };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, true, (int) '4');
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray13);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean[] booleanArray30 = new boolean[] { true, true, false, true };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray30, true, (int) '4');
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray30);
        boolean[] booleanArray39 = new boolean[] { true, true, false, false };
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray39, false);
        boolean[] booleanArray46 = new boolean[] { true, true, false, true };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray46, true, (int) '4');
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray39, booleanArray46);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray30, booleanArray39);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray30, true, (int) (byte) 10);
        boolean[] booleanArray59 = new boolean[] { true, true, false, true };
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray59, true, (int) '4');
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray59);
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray59, false);
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray59);
        boolean[] booleanArray67 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray30, booleanArray59);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray30);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray2, booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray12 = new long[] { (byte) -1, 10 };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray15);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, 10L);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray19, (long) (short) 1, (int) '4');
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray19);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.subarray(longArray19, 11, (int) (byte) 10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray8, (long) (-1));
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray17);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray20 = org.apache.commons.lang3.ArrayUtils.remove(longArray18, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray26 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray26);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray32);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) (byte) 0);
        short[] shortArray43 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray43, (short) (byte) 0, 2);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray43, (short) 100);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray48);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.clone(shortArray26);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray26, (short) (byte) -1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray52);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (int) (byte) 1, (short) 100);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray56);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray56, (short) (byte) 10);
        java.lang.Short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray59);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.clone(shortArray59);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[0, 100, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[0, 100, 100, 1]");
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray18, (byte) 0, 1);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray18, "hi!");
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray18, (byte) 100);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (int) (byte) 0, (byte) 100);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray28, (byte) 1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1,0,0,1,100,100}" + "'", str23, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray0);
        java.util.Map<java.lang.Object, java.lang.Object> objMap2 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray0);
        java.lang.String str3 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(objMap2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray3, '4');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, (int) '4', (int) (short) 10);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray8, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ ]");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) 1);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) 10L);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 1.0f);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0]");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean[] booleanArray30 = new boolean[] { true, true, false, true };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray30, true, (int) '4');
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray30);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray30, false);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray18, booleanArray30);
        boolean[] booleanArray42 = new boolean[] { true, true, false, false };
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray42, false);
        boolean[] booleanArray49 = new boolean[] { true, true, false, true };
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray49, true, (int) '4');
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray42, booleanArray49);
        boolean[] booleanArray58 = new boolean[] { true, true, false, false };
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray58, false);
        boolean[] booleanArray65 = new boolean[] { true, true, false, true };
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray65, true, (int) '4');
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray58, booleanArray65);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray49, booleanArray58);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray49, true, (int) (byte) 10);
        boolean[] booleanArray78 = new boolean[] { true, true, false, true };
        int int81 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray78, true, (int) '4');
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray78);
        boolean[] booleanArray84 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray78, false);
        boolean[] booleanArray85 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray78);
        boolean[] booleanArray86 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray49, booleanArray78);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray78);
        boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray78, (int) (short) 0);
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray89, false);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray37, booleanArray89);
        boolean[] booleanArray93 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray37);
        boolean boolean94 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray93);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray84), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray86), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray89), "[false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(booleanArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray93), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray1, (int) (byte) -1, (int) (byte) 1);
        double[] doubleArray16 = new double[] { (byte) 10 };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) ' ');
        double[] doubleArray22 = new double[] { (byte) 10 };
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) 0, 10, (double) (-1L));
        double[] doubleArray34 = new double[] { (-1), (byte) 100, 10L };
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray34, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray34);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.add(doubleArray34, (double) (byte) 100);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray41, (double) 0L, (double) 1.0f);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray41);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray41, (double) (-1), (double) (byte) 100);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 10.0, -1.0, 100.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray9);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, (double) 0.0f);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) 6);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        java.lang.String str21 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray10);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 100, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{0}" + "'", str21, "{0}");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(longArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray9, (long) 1);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (long) (byte) 10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray14, (long) (byte) 1, (int) (short) 10);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray14);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[100, 100, -1, -1, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[100, 100, -1, -1, 100, 0, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 0);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray17);
        java.lang.Byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100, 1, -1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 100, 1, -1, 0, 1, -1]");
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        short[] shortArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray0, (short) 10, (int) ' ');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        java.util.Map<java.lang.Object, java.lang.Object> objMap3 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(objMap3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray8 = new char[] { '#' };
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray8);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray10, 'a');
        char[] charArray19 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, '4', (int) (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, '#', 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray19);
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray30, 'a');
        char[] charArray34 = new char[] { '#' };
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray34);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray26, charArray34);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray1);
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        double[] doubleArray47 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray47, (double) (short) -1);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray47, (double) 'a', (double) 3);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray47, (double) (byte) 100);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray47, (double) 4);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray41, (java.lang.Object) int56, 1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        short[] shortArray17 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray23 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 0, 2);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray17, shortArray23);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray23);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray3, (short) 100);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray3, (short) (byte) 10);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray3, 0, 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 10, 100, 1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[]");
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, 10);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (short) 0);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (byte) 10);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, (int) ' ');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 2, 10, 0, -1]");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.clone(longArray15);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(longArray19, (long) (short) 100);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray22, (long) 1);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.clone(longArray24);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray19, longArray25);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Byte[] byteArray21 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray15, (java.lang.Object) byteArray22, 2);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.remove(byteArray26, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 1]");
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, true);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray9);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray9, false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, false, true, true, false]");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13, (double) '#');
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, (int) (short) 1, (double) 1.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (short) -1);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray18);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray2);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.add(doubleArray2, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 1.0]");
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        java.lang.Long[] longArray57 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray57, (long) (-1));
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray50, longArray59);
        java.lang.Byte[] byteArray63 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray63);
        java.lang.Long[] longArray71 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray71, (long) (-1));
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray63, (java.lang.Object) longArray73, (int) (short) -1);
        long[] longArray76 = org.apache.commons.lang3.ArrayUtils.addAll(longArray50, longArray73);
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.subarray(longArray76, (int) (byte) -1, (int) '#');
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.contains(longArray79, (long) 10);
        long[] longArray83 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray79, (long) (byte) 1);
        long[] longArray85 = org.apache.commons.lang3.ArrayUtils.add(longArray83, (long) 5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[-1, 10, -1, 10, 1, -1, 10, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[-1, 10, -1, 10, 1, -1, 10, -1, 10, -1, 10, 1, 1, 5]");
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (-1L));
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray8, (float) (short) -1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) 10);
        float[] floatArray19 = new float[] {};
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray19, (float) 10L);
        float[] floatArray22 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) (byte) 1);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.add(floatArray19, (float) (-1L));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray27, (float) 1L);
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray27);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray27);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0]");
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 100);
        double[] doubleArray12 = new double[] { (byte) 10 };
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray10, doubleArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.add(doubleArray10, (double) (byte) -1);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray10, (double) 6);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray10, (double) (short) 1, 2, (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0, 10.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, (double) (-1.0f), 1, (double) '4');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray15, (double) (byte) -1, (int) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.add(charArray3, '#');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, 10, (int) (short) 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.remove(byteArray15, 1);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.add(byteArray31, (int) (short) 1, (byte) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 10, 1, 0, 0, -1]");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, false);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true, 0);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 0);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray17);
        java.lang.Byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray20);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray23);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) '#', (int) (short) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(byteArray7, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100, 1, -1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 10);
        java.lang.Byte[] byteArray13 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray16);
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray20, (byte) 10, 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 1);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (int) (short) 0, (byte) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray16, (java.lang.Object) byteArray25);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        double[] doubleArray18 = new double[] { (-1), (byte) 100, 10L };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) (-1.0f));
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray14, (java.lang.Object) doubleArray23);
        java.lang.Integer[] intArray32 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray32);
        int[] intArray39 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray33, intArray39);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.add(intArray33, (int) '4');
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray23, (java.lang.Object) '4');
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray23);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 100.0, -1.0]");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        int int3 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray16 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) (-1));
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, (long) (short) -1, 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray18);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray8);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray8);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) 11);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray7 = new char[] { '#' };
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray7);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#]");
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        org.junit.Assert.assertNull(floatArray2);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (byte) 1, (java.lang.Object) longArray20);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray23 = org.apache.commons.lang3.ArrayUtils.remove(longArray20, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = new double[] { (byte) 10 };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray14, (double) (byte) 0);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 0.0d, (int) ' ');
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray14);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 1, (double) (short) 1);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (short) 100);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) 1L);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (byte) -1, (-1));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.add(longArray39, (long) 4);
        java.lang.Long[] longArray42 = org.apache.commons.lang3.ArrayUtils.toObject(longArray39);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray45 = org.apache.commons.lang3.ArrayUtils.add(longArray39, 100, (long) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[0, 100, -1, -1, 100, 100, 4]");
        org.junit.Assert.assertNotNull(longArray42);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray8, (int) (byte) 100, (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray5);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray5, (int) 'a', (int) (short) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray9, (double) 100L, (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray7 = new char[] { '#' };
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.add(charArray9, 'a');
        java.lang.Character[] charArray12 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray5, charArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(charArray14, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        java.lang.Short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray30, (int) (short) 10, (int) (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray30);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[]");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) (short) -1, 1);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (-1), 0);
        int[] intArray26 = new int[] { (byte) 0 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray26, 0);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.add(intArray26, 0);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray26, (int) (byte) 1, (int) ' ');
        int[] intArray35 = new int[] { (byte) 0 };
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray35, 0);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray35, 10, 0);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray35, 0, 1);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.addAll(intArray26, intArray35);
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.clone(intArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray45);
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.subarray(intArray45, 0, (int) ' ');
        int[] intArray51 = new int[] { (byte) 0 };
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray51, 0);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.add(intArray51, 0);
        int[] intArray59 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray65 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray65);
        int[] intArray72 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray66, intArray72);
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.addAll(intArray59, intArray72);
        int[] intArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray59, 2);
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.remove(intArray76, 1);
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray76, (int) (short) 0, 2);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray76, 0);
        int[] intArray84 = org.apache.commons.lang3.ArrayUtils.addAll(intArray55, intArray76);
        int int86 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray76, (int) (short) 100);
        int[] intArray87 = org.apache.commons.lang3.ArrayUtils.addAll(intArray49, intArray76);
        int[] intArray88 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray87);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[100, 52]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 100, 10, 52]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[100, 10, 52, 0, 100, 10, 52]");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray14, 1, (int) (short) 0);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) (-1.0f), 0, (double) (short) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) '4', (-1.0d));
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray17, (double) 0L, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) 0);
        java.lang.Short[] shortArray9 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray0, shortArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray0, (short) 0, 0);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 1, 10);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, (int) ' ', 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray59);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray59);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.add(longArray59, (long) 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[0]");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray18, (byte) 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray20, (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray20);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        java.util.Map<java.lang.Object, java.lang.Object> objMap3 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray9);
        java.lang.Boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray14, false, (int) (byte) 100);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(objMap3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 4, 4, (-1) };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3, (int) (byte) -1);
        java.lang.Byte[][] byteArray7 = new java.lang.Byte[][] {};
        java.lang.Byte[] byteArray13 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray19 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray25 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray31 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray37 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray38 = new java.lang.Byte[][] { byteArray13, byteArray19, byteArray25, byteArray31, byteArray37 };
        java.lang.Byte[][] byteArray39 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray38);
        java.util.Map<java.lang.Object, java.lang.Object> objMap40 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) byteArray7);
        java.lang.Byte[] byteArray43 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray43);
        java.lang.Long[] longArray51 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray51, (long) (-1));
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray43, (java.lang.Object) longArray53, (int) (short) -1);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray43, (byte) 1);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray43);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray7, (java.lang.Object[]) byteArray43);
        long[] longArray62 = new long[] { (byte) -1, 10 };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.clone(longArray62);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray63);
        java.lang.Byte[][] byteArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray7, (java.lang.Object) longArray63);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.add(longArray63, (long) 'a');
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) intArray6, (java.lang.Object) longArray67);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[4, 4, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[4, 4, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(objMap40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[10, -1, 97]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) -1);
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray20, (byte) 10, 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 1);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (int) (short) 0, (byte) 1);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (byte) 10);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray25, (int) (byte) 10, 10);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray25);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray39, (byte) 0);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 100 };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10, 0);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray39, byteArray44);
        byte[] byteArray49 = null;
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray48, byteArray49);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.remove(byteArray48, 2);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.clone(byteArray52);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray52, (byte) 1);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray60, (byte) 0);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray60, (byte) 1);
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray60, (byte) 1, 1);
        byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray55, byteArray60);
        byte[] byteArray71 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray68, 11, (-1));
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray68);
        byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 0, 100, 100, -1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-1, 0, 1, -1, 0, 100, 100, -1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1, 0, 1, 0]");
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        long[] longArray3 = new long[] { 5, (short) 1, '4' };
        java.lang.Long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toObject(longArray3);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) (short) 1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[5, 1, 52]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[5, 1, 52]");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        java.lang.Long[] longArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        int[] intArray50 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray56 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray56);
        int[] intArray63 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray57, intArray63);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.addAll(intArray50, intArray63);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray63, 1);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray46, (java.lang.Object) intArray63);
        long[] longArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray46);
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray46);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray44, longArray70);
        java.lang.Long[] longArray78 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray78);
        long[] longArray81 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray79, (long) '#');
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray81, (long) 100);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray44, longArray81);
        int int86 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray44, (long) (-1));
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[]");
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray14 = new boolean[] { true, true, false, false };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        boolean[] booleanArray21 = new boolean[] { true, true, false, true };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray21, true, (int) '4');
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray14, booleanArray21);
        boolean[] booleanArray30 = new boolean[] { true, true, false, false };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray30, false);
        boolean[] booleanArray37 = new boolean[] { true, true, false, true };
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray37, true, (int) '4');
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray30, booleanArray37);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray21, booleanArray30);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray21, true, (int) (byte) 10);
        boolean[] booleanArray50 = new boolean[] { true, true, false, true };
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray50, true, (int) '4');
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray50);
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray50, false);
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray50);
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray21, booleanArray50);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray21, true, (int) 'a');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Long[] longArray19 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19, (long) (-1));
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.add(longArray21, 0, (long) 1);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray21, (long) (-1), (int) (byte) 1);
        long[] longArray28 = new long[] {};
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(longArray28, (long) (short) 1);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray28);
        java.lang.Long[] longArray38 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray38, (long) (-1));
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray40, (long) '#');
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.subarray(longArray40, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray52 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray52, (long) (-1));
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray54, (long) '#');
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.addAll(longArray45, longArray54);
        long[] longArray60 = new long[] { (byte) -1, 10 };
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.clone(longArray60);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray45, longArray60);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.addAll(longArray31, longArray60);
        java.lang.Long[] longArray70 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray70, (long) (-1));
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray63, longArray72);
        long[] longArray75 = org.apache.commons.lang3.ArrayUtils.add(longArray72, (long) 1);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray2, (java.lang.Object) longArray72);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[-1, 10, -1, 10, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10L);
        float[] floatArray25 = new float[] { (byte) -1 };
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray25);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray23, 0.0f, (int) ' ');
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.clone(floatArray23);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray19, (java.lang.Object) floatArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray30, (float) ' ');
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray30, (float) 1);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray30, 2, 4);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(floatArray30, 10.0f);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 0, 0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        boolean[] booleanArray37 = new boolean[] { true, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray37, false);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray37, true, (int) (byte) 100);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray37);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray32, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.add(booleanArray32, true);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray32, (int) (short) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray49, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, true, true, true, false, false, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[true, true, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.add(longArray7, 4, (long) 100);
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.subarray(longArray7, (int) (byte) 100, (int) (short) 1);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.clone(longArray66);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[0, 100, -1, -1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[]");
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.clone(intArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, (int) (byte) 0, 100);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray21);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.io.Serializable[] serializableArray17 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) wildcardClassArray14, (int) '4', (int) (byte) 100);
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (float) 10L);
        float[] floatArray21 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray21);
        float[] floatArray23 = null;
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray21, floatArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) (-1L), (int) '4');
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray14, (java.lang.Object) floatArray21);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) (short) 0);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 4, 4, (-1) };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3, (int) (byte) -1);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[4, 4, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[4, 4, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[4, 4, -1]");
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.Object[]) charArray7, (java.lang.Object) (-1.0f));
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Object[][] objArray13 = new java.lang.Object[][] { objArray11, objArray12 };
        java.lang.Object obj14 = null;
        java.lang.Object[][] objArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray13, obj14);
        char[] charArray17 = new char[] { '#' };
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray13, (java.lang.Object[]) charArray18);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray10, (java.lang.Object) charArray18);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[#]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[#]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 100);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 100);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(byteArray15, (byte) -1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 1, (int) ' ');
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray9, 3, 3);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        long[] longArray3 = new long[] { 5, (short) 1, '4' };
        java.lang.Long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toObject(longArray3);
        java.lang.Byte[][] byteArray5 = new java.lang.Byte[][] {};
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray17 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray23 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray29 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray35 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray36 = new java.lang.Byte[][] { byteArray11, byteArray17, byteArray23, byteArray29, byteArray35 };
        java.lang.Byte[][] byteArray37 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray5, byteArray36);
        java.lang.Byte[][] byteArray38 = org.apache.commons.lang3.ArrayUtils.clone(byteArray36);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray4, (java.lang.Object) byteArray38, (int) (short) 10);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[5, 1, 52]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray5, (int) '4', (int) (short) 1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray8, (double) (short) 1, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 0);
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) -1);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13, (double) '#');
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, (int) (short) 1, (double) 1.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (short) -1);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray18);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray2);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23);
        java.lang.Double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 0, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) 0, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        byte[][] byteArray21 = new byte[][] { byteArray6, byteArray13, byteArray20 };
        byte[][] byteArray23 = org.apache.commons.lang3.ArrayUtils.remove(byteArray21, 2);
        byte[][] byteArray24 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray21);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray3, (int) (short) 1);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.subarray(intArray20, (int) '#', (int) (short) 0);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray23, 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        boolean[] booleanArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false, (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray3, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray3);
        java.lang.Character[] charArray12 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray3, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        char[] charArray12 = new char[] { '#' };
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.toObject(charArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray12);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.subarray(charArray12, 3, 2);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray10, charArray12);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 10);
        java.lang.Byte[] byteArray13 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray16);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.add(byteArray16, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 100]");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        long[] longArray0 = new long[] {};
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) (short) 1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) 3);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) (-1));
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 10);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray12, 3, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10, 100, -1, 100, 1, 0, 0]");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, (int) (short) -1, (int) (short) 0);
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray1, (int) (byte) -1, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 3, (int) '4');
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray25, (double) '#');
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray27, (int) (short) 1, (double) 1.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray35);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray34, (java.lang.Object) floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray35, (float) '#');
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) '#');
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray43, (float) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[10.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.lang.Object[][] objArray34 = new java.lang.Object[][] { objArray32, objArray33 };
        java.lang.Object obj35 = null;
        java.lang.Object[][] objArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray34, obj35);
        char[] charArray38 = new char[] { '#' };
        java.lang.Character[] charArray39 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray34, (java.lang.Object[]) charArray39);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39, ' ');
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray27, charArray44);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray48 = org.apache.commons.lang3.ArrayUtils.add(charArray27, (int) (short) -1, '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray50, 0L, (int) (byte) 10);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray50, 100L, (int) '#');
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray4, (long) (-1));
        org.apache.commons.lang3.ArrayUtils.reverse(longArray4);
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray19, 0, (long) 1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray19, (long) (-1), (int) (byte) 1);
        long[] longArray26 = new long[] {};
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(longArray26, (long) (short) 1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray19, longArray26);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray26);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray30);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(longArray4, 100L);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray4, (long) (short) 100, 2);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 52, 1, 0]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 52, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray3, (int) (short) 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray20, (int) (byte) -1);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.remove(intArray20, (int) (short) 1);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray25, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 52]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray16, (short) 10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray16, (short) 100, 4);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray2 = new double[] { (byte) 10 };
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray10 = new double[] { (byte) 10 };
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray10);
        double[] doubleArray17 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) (short) -1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray10, doubleArray17);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray17);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray3);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray22, (double) 10, (double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.lang.Object[] objArray0 = null;
        double[] doubleArray2 = new double[] { (byte) 10 };
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        java.lang.Double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5);
        double[] doubleArray12 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) (short) -1);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) (-1), (double) 2);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray5, (java.lang.Object) (-1));
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) int24);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        boolean[] booleanArray49 = new boolean[] {};
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray49, true);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray49);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray49, true, (int) (byte) 10);
        boolean[] booleanArray56 = new boolean[] {};
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray56, true);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray56);
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray56, true, (int) (byte) 10);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray49, booleanArray56);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray49, false, 10);
        boolean[] booleanArray67 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray49);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray49, 4, (int) (short) 1);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray70);
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray70);
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray70, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[]");
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, true]");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.lang.Long[][] longArray0 = new java.lang.Long[][] {};
        java.lang.Long[][] longArray1 = new java.lang.Long[][] {};
        java.lang.Long[][] longArray2 = new java.lang.Long[][] {};
        java.lang.Long[][] longArray3 = new java.lang.Long[][] {};
        java.lang.Long[][] longArray4 = new java.lang.Long[][] {};
        java.lang.Long[][] longArray5 = new java.lang.Long[][] {};
        java.lang.Long[][][] longArray6 = new java.lang.Long[][][] { longArray0, longArray1, longArray2, longArray3, longArray4, longArray5 };
        java.lang.Long[][][][] longArray7 = new java.lang.Long[][][][] { longArray6 };
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[] strArray18 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[][] strArray19 = new java.lang.String[][] { strArray13, strArray18 };
        java.lang.String[][][] strArray20 = new java.lang.String[][][] { strArray19 };
        java.lang.String[] strArray25 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[] strArray30 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray25, strArray30 };
        java.lang.String[][][] strArray32 = new java.lang.String[][][] { strArray31 };
        java.lang.String[] strArray37 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[] strArray42 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[][] strArray43 = new java.lang.String[][] { strArray37, strArray42 };
        java.lang.String[][][] strArray44 = new java.lang.String[][][] { strArray43 };
        java.lang.String[][][][] strArray45 = new java.lang.String[][][][] { strArray20, strArray32, strArray44 };
        java.lang.String[][][][] strArray46 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray47 = org.apache.commons.lang3.ArrayUtils.addAll(strArray45, strArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) longArray7, (java.lang.Object[]) strArray47);
        java.lang.Long[][][] longArray50 = new java.lang.Long[][][] {};
        java.lang.Long[] longArray52 = new java.lang.Long[] { 10L };
        java.lang.Long[] longArray54 = new java.lang.Long[] { 10L };
        java.lang.Long[] longArray56 = new java.lang.Long[] { 10L };
        java.lang.Long[] longArray58 = new java.lang.Long[] { 10L };
        java.lang.Long[] longArray60 = new java.lang.Long[] { 10L };
        java.lang.Long[] longArray62 = new java.lang.Long[] { 10L };
        java.lang.Long[][] longArray63 = new java.lang.Long[][] { longArray52, longArray54, longArray56, longArray58, longArray60, longArray62 };
        java.lang.Long[][] longArray64 = org.apache.commons.lang3.ArrayUtils.toArray(longArray63);
        java.lang.Long[][][] longArray65 = org.apache.commons.lang3.ArrayUtils.add(longArray50, longArray63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Long[][][][] longArray66 = org.apache.commons.lang3.ArrayUtils.add(longArray7, 6, longArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertNotNull(longArray65);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray4, 10, (int) (short) 10);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray12, (int) (byte) -1, (int) '#');
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray8);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 4, (int) (short) 10, 10.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 1.0, -1.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray2, (byte) 1, (int) (short) 1);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) -1);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.clone(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray7, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray8, (java.lang.Object) 100.0d);
        java.lang.Integer[] intArray16 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray16);
        int[] intArray23 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray23);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.add(intArray17, (int) '4');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray17);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(intArray17, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 10, (-1));
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1, 10, 100, 0, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.remove(byteArray15, 1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray31, (byte) 100);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray31, (byte) 0, (int) (short) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray10);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray10);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(charArray10, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        float[] floatArray3 = new float[] { 10.0f, 2, 6 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 0, (float) (byte) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f, (int) (byte) -1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, (float) 100);
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray3);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray12);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray12);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, 2.0, 6.0]");
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray30, (short) 1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        double[] doubleArray0 = null;
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray3 = new double[] { (byte) 10 };
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray4);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray4, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray11 = new double[] { (byte) 10 };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        double[] doubleArray18 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) (short) -1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray18);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray1, doubleArray4);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray0, doubleArray4);
        java.lang.String str26 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) doubleArray0, "false");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "false" + "'", str26, "false");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray10);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray10, '#');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray15, (int) (short) 1, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray8 = new float[] { (byte) -1 };
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (-1L));
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray14);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray21, (float) 1L);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.remove(floatArray21, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray5);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13, (double) '#');
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, (int) (short) 1, (double) 1.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (short) -1);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        java.lang.Double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray21);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int24 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray23);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray22, (java.lang.Object) floatArray23);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray23, (float) '#');
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray6, (java.lang.Object) floatArray27, 3);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.remove(floatArray27, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, 'a');
        org.junit.Assert.assertNull(charArray2);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray22, (float) (-1L));
        float[] floatArray25 = new float[] {};
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.add(floatArray25, (float) 10L);
        float[] floatArray29 = new float[] { (byte) -1 };
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray27, floatArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray22, floatArray27);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray27);
        java.lang.String str33 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray5);
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        char[] charArray36 = new char[] { ' ' };
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.add(charArray36, '#');
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(charArray36, '4');
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray36, 'a');
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray34, (java.lang.Object) charArray42);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray42, ' ');
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{10.0,-1.0}" + "'", str33, "{10.0,-1.0}");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ ]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        short[] shortArray17 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray23 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 0, 2);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray17, shortArray23);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray23);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray3, (int) (short) 1);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.add(shortArray3, 2, (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray33);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 10, 100, 1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 100]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100, 0, 10, 100]");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray5);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) ' ');
        double[] doubleArray19 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) (short) -1);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray19);
        double[] doubleArray27 = new double[] { (byte) 10 };
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray28);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray28, (double) (byte) 0);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, 0.0d, (int) ' ');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray28);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) 0.0f);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) 1, 0);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, (double) 1L);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray19);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray19, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[52.0, -1.0, 1.0, 100.0]");
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) 1, 3);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray18, (long) (byte) 100);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.subarray(longArray18, 11, 2);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, true);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        int[] intArray4 = new int[] { (byte) 0 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 0);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray2, (java.lang.Object) intArray4);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        int[] intArray14 = new int[] { (byte) 0 };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray14, 0);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.add(intArray14, 0);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray18);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19, (int) (byte) 10);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(intArray21, 11);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, (int) (short) 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        float[] floatArray3 = new float[] { 10.0f, 2, 6 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 0, (float) (byte) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f, (int) (byte) -1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, (float) 100);
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray3);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray12);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray12, (float) 3);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, 2.0, 6.0]");
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray38);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray40, 5, (int) (byte) 1);
        java.lang.Short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray40);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray44, (short) 0);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray44, (short) -1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[100, 10, 100]");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        long[] longArray28 = new long[] { (byte) -1, 10 };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray28);
        java.lang.Long[] longArray31 = org.apache.commons.lang3.ArrayUtils.toObject(longArray28);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray31);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10]");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        short[] shortArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) (byte) -1, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        java.lang.String str3 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) 0.0f);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0" + "'", str3, "0.0");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        java.lang.String str51 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray50);
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.add(longArray50, (long) (short) 10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{-1,10,-1,10,1,1,-1,10}" + "'", str51, "{-1,10,-1,10,1,1,-1,10}");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, 10, -1, 10, 1, 1, -1, 10, 10]");
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) 1);
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray56);
        short[] shortArray62 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray62);
        short[] shortArray68 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray68, (short) (byte) 0, 2);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray62, shortArray68);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray68);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray68, (short) -1, (int) (byte) 1);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray68, 6, 3);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray27, shortArray79);
        java.lang.Short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray79);
        java.util.Map<java.lang.Object, java.lang.Object> objMap82 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) shortArray81);
        short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray81);
        short[] shortArray84 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray81);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertNotNull(objMap82);
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[]");
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[]");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray8);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray5, doubleArray8);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 1L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray8);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 4, (double) 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray8, (double) '#', (double) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray3, false, (int) (byte) 1);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Long[] longArray16 = new java.lang.Long[] {};
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 0);
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 100 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray27, (byte) 10, 0);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray22, byteArray27);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray16, (java.lang.Object) byteArray31);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray37, (byte) 0);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray37, (byte) 1);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray31, byteArray37);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray37);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray43, (byte) 100);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray43, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 0, 0, 1, -1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 0, 1, -1, 0, 0, 1]");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray22, (float) (-1L));
        float[] floatArray25 = new float[] {};
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.add(floatArray25, (float) 10L);
        float[] floatArray29 = new float[] { (byte) -1 };
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray27, floatArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray22, floatArray27);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray27);
        java.lang.String str33 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray5);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (int) (byte) 0, (-1.0f));
        float[] floatArray37 = new float[] {};
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.add(floatArray37, (float) 10L);
        float[] floatArray40 = new float[] {};
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray37, floatArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray37, (float) (byte) 1);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray37, (float) (-1L));
        float[] floatArray46 = new float[] {};
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, (float) 10L);
        float[] floatArray50 = new float[] { (byte) -1 };
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray48, floatArray50);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.add(floatArray48, 0, (float) 6);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray54, (float) (-1), (int) (byte) 10);
        float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray37, floatArray54);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray36, floatArray58);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{10.0,-1.0}" + "'", str33, "{10.0,-1.0}");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[6.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[6.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray8 = new float[] { (byte) -1 };
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (-1L));
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray14);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, (int) (byte) -1, 5);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray24, (float) (byte) 100, 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        int[] intArray4 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray10 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray10);
        int[] intArray17 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray11, intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray17);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray17, 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray0, (java.lang.Object) intArray17);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.lang.Double[][][][] doubleArray0 = new java.lang.Double[][][][] {};
        java.lang.Double[][][][] doubleArray1 = org.apache.commons.lang3.ArrayUtils.toArray(doubleArray0);
        java.lang.Short[] shortArray5 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray9 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray13 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray17 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray21 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[] shortArray25 = new java.lang.Short[] { (short) -1, (short) 0, (short) 0 };
        java.lang.Short[][] shortArray26 = new java.lang.Short[][] { shortArray5, shortArray9, shortArray13, shortArray17, shortArray21, shortArray25 };
        java.lang.Short[] shortArray32 = new java.lang.Short[] { (short) 100, (short) 10, (short) -1, (short) 10, (short) 10 };
        java.lang.Short[] shortArray38 = new java.lang.Short[] { (short) 100, (short) 10, (short) -1, (short) 10, (short) 10 };
        java.lang.Short[] shortArray44 = new java.lang.Short[] { (short) 100, (short) 10, (short) -1, (short) 10, (short) 10 };
        java.lang.Short[] shortArray50 = new java.lang.Short[] { (short) 100, (short) 10, (short) -1, (short) 10, (short) 10 };
        java.lang.Short[][] shortArray51 = new java.lang.Short[][] { shortArray32, shortArray38, shortArray44, shortArray50 };
        java.lang.Short[][] shortArray52 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray51);
        java.lang.Character[] charArray57 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray62 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray67 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray72 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray77 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray82 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[][] charArray83 = new java.lang.Character[][] { charArray57, charArray62, charArray67, charArray72, charArray77, charArray82 };
        java.lang.Character[][] charArray84 = org.apache.commons.lang3.ArrayUtils.toArray(charArray83);
        java.lang.Short[][] shortArray85 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (java.lang.Object) charArray84);
        int int87 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray0, (java.lang.Object) shortArray85, (int) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, true);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray9, false);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray9, false, (int) 'a');
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray9, false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false, true, true]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray18, (float) (byte) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, 0.0f, 2);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray20, (float) (short) 10);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray20, (float) (short) 1);
        java.lang.Boolean[] booleanArray33 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray33);
        java.lang.Boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray34);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray34, false);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray34, true, (int) 'a');
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, (float) 10L);
        float[] floatArray45 = new float[] { (byte) -1 };
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray43, floatArray45);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray43, (float) 1);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray43, (float) (-1L));
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray43, (float) (short) 100, 6);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 'a', (java.lang.Object) floatArray43);
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray27, floatArray43);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray43, (float) 5, (int) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[10.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) (short) 0);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[0, 1, 52, -1]");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, '#', (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray3);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, (int) 'a', 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, ' ', (int) (byte) 100);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#,  ]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, (int) (short) -1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, '4');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) (byte) 0, (int) 'a');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray15, 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray17, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ ]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , a]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[] classArray4 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray5 = (java.lang.Class<?>[]) classArray4;
        java.lang.Class[] classArray7 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray8 = (java.lang.Class<?>[]) classArray7;
        java.lang.Class[] classArray10 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray11 = (java.lang.Class<?>[]) classArray10;
        java.lang.Class[] classArray13 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray14 = (java.lang.Class<?>[]) classArray13;
        java.lang.Class[][] classArray16 = new java.lang.Class[5][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray17 = (java.lang.Class<?>[][]) classArray16;
        wildcardClassArray17[0] = wildcardClassArray2;
        wildcardClassArray17[1] = wildcardClassArray5;
        wildcardClassArray17[2] = classArray7;
        wildcardClassArray17[3] = wildcardClassArray11;
        wildcardClassArray17[4] = classArray13;
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 1);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Long[] longArray41 = new java.lang.Long[] {};
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray47, (byte) 0);
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray52, (byte) 10, 0);
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray47, byteArray52);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray41, (java.lang.Object) byteArray56);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray62, (byte) 0);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray62, (byte) 1);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray56, byteArray62);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray56);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray34, (java.lang.Object) byteArray56);
        java.lang.Class<?>[][] wildcardClassArray70 = org.apache.commons.lang3.ArrayUtils.removeElement(wildcardClassArray17, (java.lang.Object) byteArray56);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray70);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClassArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) (-1.0f), (double) 0L);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray7);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray7, (double) (short) 100, (double) 11);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        java.lang.Short[] shortArray12 = new java.lang.Short[] { (short) -1, (short) 0 };
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) (byte) 10);
        short[] shortArray15 = null;
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray16);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.clone(shortArray19);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10, 100, 0]");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray6);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10, 100, -1, 1, 0, 0]");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        java.lang.Object obj0 = null;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray10);
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray10);
        java.lang.Class<?>[] wildcardClassArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray24 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24, (long) (-1));
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray26, 0, (long) 1);
        java.lang.Class<?> wildcardClass30 = longArray26.getClass();
        java.lang.Class<?>[] wildcardClassArray31 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray17, wildcardClass30);
        short[] shortArray35 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray35);
        short[] shortArray41 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray41, (short) (byte) 0, 2);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray35, shortArray41);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(shortArray41, (short) 10);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) wildcardClassArray31, (java.lang.Object) shortArray41);
        java.lang.Class<?>[] wildcardClassArray51 = org.apache.commons.lang3.ArrayUtils.subarray(wildcardClassArray31, 1, 100);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray31);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray16, (java.lang.Object[]) wildcardClassArray31);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEquals(obj0, (java.lang.Object) shortArray16);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClassArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray3, 2);
        int[] intArray24 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray30 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray30);
        int[] intArray37 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray31, intArray37);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.addAll(intArray24, intArray37);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.remove(intArray24, (int) (short) 1);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray20, intArray41);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray41, (int) ' ', (-1));
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(intArray41, (int) (byte) 1);
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.add(intArray41, (int) (short) 100);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray49, (int) (short) 0);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.add(intArray49, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[100, 52, 100]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 52, 100, 1]");
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        short[] shortArray17 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray23 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 0, 2);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray17, shortArray23);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray23);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30, (short) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 10, 100, 1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[0, 100, 10, 1]");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, 0.0d, (int) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (-1L));
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, 1, (double) (byte) 1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (-1), (double) 5);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        double[] doubleArray8 = new double[] { (-1), (byte) 100, 10L };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray18, (byte) 0);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray13, (java.lang.Object) byteArray22, 4);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray22);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray2, (java.lang.Object) byteArray22);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray22, (byte) 10, (int) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) longArray0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[0, 1, 52, -1]");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray22, (byte) 1);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.clone(byteArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray27);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray27, (byte) -1, 6);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray27);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray17, byteArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray33);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 0, 0, -1, 100, 100, 1, 0, -1]");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 1, 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray1);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, (int) (byte) -1);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray1, (int) (short) 0, 100);
        int[] intArray21 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray27 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray27);
        int[] intArray34 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray28, intArray34);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.addAll(intArray21, intArray34);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray21, 2);
        int[] intArray42 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray48 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray48);
        int[] intArray55 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray49, intArray55);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.addAll(intArray42, intArray55);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.remove(intArray42, (int) (short) 1);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray38, intArray59);
        int int63 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray59, (int) ' ', (-1));
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.contains(intArray59, (int) (byte) 1);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.add(intArray59, (int) (short) 100);
        int[] intArray69 = new int[] { (byte) 0 };
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray69, 0);
        int[] intArray73 = org.apache.commons.lang3.ArrayUtils.add(intArray69, 0);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray73, (int) '#');
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray73, (int) (short) 0);
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.addAll(intArray67, intArray77);
        int[] intArray79 = org.apache.commons.lang3.ArrayUtils.addAll(intArray17, intArray67);
        int[] intArray81 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray67, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[100, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[100, 52, 100, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[100, 0, 100, 52, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[100, 52, 100]");
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray19, '#');
        java.lang.Character[] charArray34 = org.apache.commons.lang3.ArrayUtils.toObject(charArray33);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray34);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) (-1.0f), (double) 0L);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray7, (double) '4');
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 0.0d, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray3);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        float[] floatArray0 = null;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 11);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        java.lang.Boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray49, true);
        boolean[] booleanArray56 = new boolean[] { true, true, false, false };
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray56, false);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray56, true);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray51, booleanArray56);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray51);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[]");
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 3, (int) '4');
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray25, (double) '#');
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray27, (int) (short) 1, (double) 1.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray35);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray34, (java.lang.Object) floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray35, (float) '#');
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, (float) 10L);
        float[] floatArray45 = new float[] { (byte) -1 };
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray43, floatArray45);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray46, (float) (-1L));
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray46, (float) 100L);
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.clone(floatArray46);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray40, floatArray46);
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray40, (int) (byte) 1, (-1));
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(floatArray55, (float) 1L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.lang.Double[][][][][][] doubleArray0 = new java.lang.Double[][][][][][] {};
        java.lang.Double[][][][][][] doubleArray1 = org.apache.commons.lang3.ArrayUtils.toArray(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double[][][][][][] doubleArray3 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(longArray7, (long) (short) 1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.io.Serializable[] serializableArray17 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) wildcardClassArray14, (int) '4', (int) (byte) 100);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray19 = org.apache.commons.lang3.ArrayUtils.remove((java.lang.reflect.GenericDeclaration[]) wildcardClassArray14, 0);
        java.lang.Long[] longArray20 = new java.lang.Long[] {};
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray26, (byte) 0);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 100 };
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray31, (byte) 10, 0);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray26, byteArray31);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray20, (java.lang.Object) byteArray35);
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        java.lang.Long[] longArray40 = org.apache.commons.lang3.ArrayUtils.toObject(longArray39);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) genericDeclarationArray19, (java.lang.Object) longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        java.lang.Byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray48);
        java.lang.Byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray48);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray48, (byte) 0, (int) '#');
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray48, (byte) 100, (int) '#');
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.clone(byteArray48);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray58);
        byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.clone(byteArray58);
        int int61 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray40, (java.lang.Object) byteArray60);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(genericDeclarationArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray16, (float) '#');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray20, (int) (byte) -1, (int) (short) 1);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray20, (float) 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray20);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(charArray1, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray1, '4');
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '4', (int) (byte) -1);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.remove(charArray6, 0);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray11, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a]");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, '#', (int) '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, (int) '4', 3);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray2, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        short[] shortArray20 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray20, (short) (byte) 0, 2);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray20, (short) 100);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray3, (short) (byte) -1);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][] classArray13 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray14 = (java.lang.Class<?>[][]) classArray13;
        java.lang.Class[][] classArray16 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray17 = (java.lang.Class<?>[][]) classArray16;
        java.lang.Class[][][] classArray19 = new java.lang.Class[5][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray20 = (java.lang.Class<?>[][][]) classArray19;
        wildcardClassArray20[0] = wildcardClassArray5;
        wildcardClassArray20[1] = wildcardClassArray8;
        wildcardClassArray20[2] = wildcardClassArray11;
        wildcardClassArray20[3] = wildcardClassArray14;
        wildcardClassArray20[4] = wildcardClassArray17;
        java.lang.Class<?>[][][] wildcardClassArray31 = org.apache.commons.lang3.ArrayUtils.addAll(wildcardClassArray2, wildcardClassArray20);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.reflect.Type[][][]) wildcardClassArray2);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray2);
        java.lang.reflect.Type[][][] typeArray36 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.reflect.Type[][][]) wildcardClassArray2, (int) (byte) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(wildcardClassArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(typeArray36);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = new double[] { (byte) 10 };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray16 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray16);
        double[] doubleArray24 = new double[] { (-1), (byte) 100, 10L };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray24);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray24, 100.0d, (double) 0.0f);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray20, doubleArray24);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) 10);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0, -1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        float[][] floatArray0 = null;
        float[] floatArray2 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 10L);
        float[] floatArray6 = new float[] { (byte) -1 };
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, 0.0f, (int) ' ');
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray4, (float) '#', (int) (byte) 0);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, (int) (short) 10, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            float[][] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 4, floatArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.lang.reflect.Type[][][] typeArray0 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray2 = org.apache.commons.lang3.ArrayUtils.clone(typeArray1);
        float[] floatArray3 = new float[] {};
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (float) 10L);
        float[] floatArray7 = new float[] { (byte) -1 };
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray8, (float) (-1L));
        float[] floatArray11 = new float[] {};
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) 10L);
        float[] floatArray15 = new float[] { (byte) -1 };
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray13, floatArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray8, floatArray13);
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray13, (float) 3, (int) '4');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) typeArray1, (java.lang.Object) int21);
        java.lang.reflect.Type[][][] typeArray23 = org.apache.commons.lang3.ArrayUtils.add(typeArray0, typeArray1);
        java.util.Map<java.lang.Object, java.lang.Object> objMap24 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) typeArray0);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray29, (byte) 0);
        java.lang.Byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        int int33 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray32);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray0, (java.lang.Object) int33);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(objMap24);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, (byte) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray15, byteArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.remove(byteArray15, 1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray31, (byte) 100);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(byteArray33, (byte) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (short) 100, (double) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        short[] shortArray5 = new short[] { (byte) 10, (byte) 0, (short) 1, (short) 1, (byte) 1 };
        short[][] shortArray6 = new short[][] { shortArray5 };
        short[][][] shortArray7 = new short[][][] { shortArray6 };
        short[] shortArray10 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray13 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray16 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray19 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray20 = new short[][] { shortArray10, shortArray13, shortArray16, shortArray19 };
        short[] shortArray23 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray26 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray29 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray32 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray33 = new short[][] { shortArray23, shortArray26, shortArray29, shortArray32 };
        short[] shortArray36 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray39 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray42 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray45 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray46 = new short[][] { shortArray36, shortArray39, shortArray42, shortArray45 };
        short[] shortArray49 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray52 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray55 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray58 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray59 = new short[][] { shortArray49, shortArray52, shortArray55, shortArray58 };
        short[] shortArray62 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray65 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray68 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray71 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray72 = new short[][] { shortArray62, shortArray65, shortArray68, shortArray71 };
        short[][][] shortArray73 = new short[][][] { shortArray20, shortArray33, shortArray46, shortArray59, shortArray72 };
        short[][][] shortArray76 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray73, (int) (byte) 10, (int) (byte) -1);
        short[][][] shortArray77 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray7, shortArray76);
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        java.lang.Object[][] objArray80 = new java.lang.Object[][] { objArray78, objArray79 };
        java.lang.Object obj81 = null;
        java.lang.Object[][] objArray82 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray80, obj81);
        char[] charArray84 = new char[] { '#' };
        java.lang.Character[] charArray85 = org.apache.commons.lang3.ArrayUtils.toObject(charArray84);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray80, (java.lang.Object[]) charArray85);
        char[] charArray87 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray85);
        char[] charArray88 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray85);
        short[][][] shortArray89 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray7, (java.lang.Object) charArray88);
        java.lang.Character[] charArray90 = org.apache.commons.lang3.ArrayUtils.toObject(charArray88);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, 0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertNotNull(shortArray76);
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[#]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[#]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[#]");
        org.junit.Assert.assertNotNull(shortArray89);
        org.junit.Assert.assertNotNull(charArray90);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        java.lang.Long[] longArray2 = new java.lang.Long[] {};
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 0);
        byte[] byteArray13 = new byte[] { (byte) 100, (byte) 100 };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 10, 0);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray13);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray2, (java.lang.Object) byteArray17);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) 0);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) 1);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray17, byteArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray17);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray17, (byte) 10);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.remove(byteArray17, 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray33, (byte) 0, (-1));
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray1, byteArray33);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 1, 0, 0, -1]");
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.clone(charArray10);
        java.lang.Character[] charArray12 = org.apache.commons.lang3.ArrayUtils.toObject(charArray11);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        java.lang.Short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, 5, (short) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray33);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 0);
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (byte) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) 1);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.clone(byteArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 0, 0, 1]");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (-1));
        java.lang.Long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toObject(longArray19);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray22 = org.apache.commons.lang3.ArrayUtils.remove(longArray19, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, 0.0d, (int) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray2, (double) (byte) 0);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray17);
        double[] doubleArray20 = new double[] { (byte) 10 };
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray21);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray18, doubleArray21);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray21, (double) 1L);
        double[] doubleArray30 = new double[] { (byte) 10 };
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray21, doubleArray31);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray21);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.add(doubleArray21, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 1.0]");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray11, 100L);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) (byte) 10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray20 = org.apache.commons.lang3.ArrayUtils.add(longArray11, (int) (byte) 10, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[1, -1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 100, (int) 'a');
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) 1L);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray17, (int) ' ', 11);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray27, (double) '#');
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.add(doubleArray29, (int) (short) 1, (double) 1.0f);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) (short) -1);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray35);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray36);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray36);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.add(doubleArray38, (double) (-1L));
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray40, (double) 6, 3);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray20, doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray0, (double) (-1L));
        org.junit.Assert.assertNull(doubleArray2);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray2, (double) (short) 100);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray8);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray5, doubleArray8);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 1L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray8);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, 1.0d, (int) (short) 1);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 2, (int) (short) 10, (double) 100);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 1, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 100);
        java.lang.Byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray18);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 100, 100]");
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (byte) 10);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(longArray19, (long) 1);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray23 = org.apache.commons.lang3.ArrayUtils.remove(longArray19, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.lang.Object obj0 = null;
        long[] longArray4 = new long[] { (byte) 0, (-1L), (short) 0 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.subarray(longArray4, 3, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray4, (long) 'a');
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEquals(obj0, (java.lang.Object) longArray10);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 100, (int) 'a');
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) 1L);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) (-1.0f), 10.0d);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, 10.0d, 4, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray3, (int) (short) 1);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.subarray(intArray20, (int) '#', (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = org.apache.commons.lang3.ArrayUtils.add(intArray23, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) (-1.0f), (int) (short) 100);
        java.lang.Double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 0, (int) (short) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray8);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray8);
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray3);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) floatArray11);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray4);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, ' ');
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, ' ', 2);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, 'a', (int) (short) 10);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray4);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray4);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray4, '#');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.remove(charArray4, 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, 'a', 0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray40);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.add(booleanArray40, true);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray51, true, (-1));
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[true, false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray11 = new double[] { (byte) 10 };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray12, (double) (byte) 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d, (int) ' ');
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 4, (double) 10L);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray12);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        boolean[][][][][] booleanArray0 = new boolean[][][][][] {};
        java.lang.Boolean[] booleanArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray1, true);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.add(longArray12, 0, (long) 1);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray12, (long) (-1), (int) (byte) 1);
        long[] longArray19 = new long[] {};
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(longArray19, (long) (short) 1);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.addAll(longArray12, longArray19);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) booleanArray3, (java.lang.Object) longArray12);
        boolean[][][][][] booleanArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, (java.lang.Object) longArray12);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(booleanArray24);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Character[] charArray5 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray10 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray15 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray20 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray25 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray30 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[][] charArray31 = new java.lang.Character[][] { charArray5, charArray10, charArray15, charArray20, charArray25, charArray30 };
        java.lang.Character[][] charArray32 = org.apache.commons.lang3.ArrayUtils.toArray(charArray31);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.reflect.GenericDeclaration[]) wildcardClassArray0, (java.lang.Object) charArray32);
        char[] charArray35 = new char[] { '#' };
        java.lang.Character[] charArray36 = org.apache.commons.lang3.ArrayUtils.toObject(charArray35);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.clone(charArray35);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.add(charArray37, 'a');
        char[] charArray46 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray46, '4', (int) (byte) 100);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray46, '#', 0);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.addAll(charArray37, charArray46);
        java.lang.Character[] charArray54 = org.apache.commons.lang3.ArrayUtils.toObject(charArray53);
        java.lang.Character[][] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray32, charArray54);
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray54, 'a');
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#, a]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#, #, a, 4, #,  ,  ]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray17 = new boolean[] { true, true, false, false };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, false);
        boolean[] booleanArray24 = new boolean[] { true, true, false, true };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, true, (int) '4');
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray17, booleanArray24);
        boolean[] booleanArray33 = new boolean[] { true, true, false, false };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray33, false);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray33, booleanArray40);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray24, booleanArray33);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, true, (int) (byte) 10);
        boolean[] booleanArray53 = new boolean[] { true, true, false, true };
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray53, true, (int) '4');
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray53);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray53, false);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray53);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray24, booleanArray53);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray61);
        java.lang.Boolean[] booleanArray68 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray68);
        java.lang.Boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray69);
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray70, false);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray72, false);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray61, booleanArray72);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray61);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, true, false, true, true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) 10);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (byte) 10, 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (int) (byte) 10, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) (-1));
        java.lang.Double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray11);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) 10.0f, (int) (byte) 100, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        java.lang.String str51 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray50);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.subarray(longArray50, 4, (int) (byte) -1);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray54, (long) (short) 10);
        java.lang.String str58 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) (short) 10, "{}");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{-1,10,-1,10,1,1,-1,10}" + "'", str51, "{-1,10,-1,10,1,1,-1,10}");
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10" + "'", str58, "10");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, 'a');
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray28);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray33);
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray33);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray35);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray38 = org.apache.commons.lang3.ArrayUtils.remove(charArray36, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray12, (-1), 2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0]");
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray3, 2);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray20, (int) (short) 0);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, (int) (byte) 1, 2);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray20, 11);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10, 52]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (-1L));
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.remove(longArray11, 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1, 10, -1, 10, 1, 1, -1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[10, -1, 10, 1, 1, -1]");
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) 0L);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) (byte) 100);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) (byte) -1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0]");
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        java.lang.Byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray13);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray14, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.clone(byteArray16);
        java.lang.Long[] longArray18 = new java.lang.Long[] {};
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) 0);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray29, (byte) 10, 0);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray24, byteArray29);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray18, (java.lang.Object) byteArray33);
        java.lang.Byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray33);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray33, (byte) 1);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.clone(byteArray37);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.add(byteArray38, 0, (byte) 10);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.add(byteArray41, 0, (byte) 100);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray17, byteArray44);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.add(byteArray45, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, -1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 10, -1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 0, 0, 1, 100, 100, 100, 10, -1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 0, 0, 1, 100, 100, 100, 10, -1, 0, 0, 100, 100, 10]");
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 1, 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        float[] floatArray3 = new float[] { 10.0f, 2, 6 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 0, (float) (byte) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f, (int) (byte) -1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, (float) 100);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, 2, 2);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray3, (float) (short) -1);
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray20 = new float[] {};
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 1);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray24);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.clone(floatArray24);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray26);
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray3);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 1.0f);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 2.0, 6.0, 1.0]");
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        long[] longArray28 = new long[] { (byte) -1, 10 };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray28);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray31, (long) 5, (int) (byte) -1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        long[] longArray3 = new long[] { (byte) 0, (-1L), (short) 0 };
        org.apache.commons.lang3.ArrayUtils.reverse(longArray3);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.subarray(longArray3, 3, (int) (byte) 0);
        long[] longArray8 = new long[] {};
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(longArray8, (long) (short) 1);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray18 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray18, (long) (-1));
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray20, 0, (long) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, (long) (-1), (int) (byte) 1);
        long[] longArray27 = new long[] {};
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(longArray27, (long) (short) 1);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.addAll(longArray20, longArray27);
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray51 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray51, (long) (-1));
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray53, (long) '#');
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.addAll(longArray44, longArray53);
        long[] longArray59 = new long[] { (byte) -1, 10 };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.clone(longArray59);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray44, longArray59);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.addAll(longArray30, longArray59);
        java.lang.Long[] longArray69 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray69, (long) (-1));
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray62, longArray71);
        java.lang.Byte[] byteArray75 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray76 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray75);
        java.lang.Long[] longArray83 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray85 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray83, (long) (-1));
        int int87 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray75, (java.lang.Object) longArray85, (int) (short) -1);
        long[] longArray88 = org.apache.commons.lang3.ArrayUtils.addAll(longArray62, longArray85);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray62);
        long[] longArray90 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray8);
        long[] longArray92 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray90, 0L);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray88), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(longArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray90), "[]");
        org.junit.Assert.assertNotNull(longArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray92), "[]");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        int[] intArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, (int) (byte) 1, 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, (int) (byte) 0, (int) 'a');
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) 100);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) 2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        short[] shortArray4 = new short[] { (byte) 0, (short) 100, (short) 0, (byte) 100 };
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) 10, (int) '4');
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, (int) (short) -1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 100, (int) 'a');
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) 1L);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) (-1.0f), 10.0d);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray17, 100.0d);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray22, (double) (short) -1, (int) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) (byte) -1, 10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        boolean[] booleanArray37 = new boolean[] { true, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray37, false);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray37, true, (int) (byte) 100);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray37);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, true);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.add(booleanArray43, true);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray47, true);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray47, false, (int) (short) 0);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray47, false, (int) 'a');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, true, true, true, false, false, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true, true, true, false, false, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[true, false, true, true, true, false, false, true, true, false, false, true]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 11 + "'", int55 == 11);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.remove(shortArray4, 0);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 1, 1, 10]");
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 100, (int) 'a');
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) 1L);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) (-1.0f), 10.0d);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 0, (int) (short) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray8);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray8);
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        java.lang.Object[] objArray0 = null;
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray5, (byte) 0);
        byte[] byteArray10 = new byte[] { (byte) 100, (byte) 100 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray10, (byte) 10, 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray5, byteArray10);
        byte[] byteArray15 = null;
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray14, byteArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.remove(byteArray14, 2);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.clone(byteArray14);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray19, (byte) 0, 1);
        java.lang.String str24 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray19, "hi!");
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray19, (byte) 100);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) byteArray19);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray32, (byte) 0);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray37, (byte) 10, 0);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray32, byteArray37);
        byte[] byteArray42 = null;
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray41, byteArray42);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.remove(byteArray41, 2);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.clone(byteArray41);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(byteArray46, (byte) 10);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray19, byteArray46);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{-1,0,0,1,100,100}" + "'", str24, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) '#');
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray54, (int) (short) 1, (double) 1.0f);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray57, (double) (short) -1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray57);
        java.lang.Double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray60);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int63 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray62);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray61, (java.lang.Object) floatArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray45, (java.lang.Object[]) doubleArray61);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61, (double) ' ');
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray1 = new java.lang.Short[][] { shortArray0 };
        java.lang.Short[] shortArray2 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray3 = new java.lang.Short[][] { shortArray2 };
        java.lang.Short[][][] shortArray4 = new java.lang.Short[][][] { shortArray1, shortArray3 };
        java.lang.Short[] shortArray5 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray6 = new java.lang.Short[][] { shortArray5 };
        java.lang.Short[] shortArray7 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray8 = new java.lang.Short[][] { shortArray7 };
        java.lang.Short[][][] shortArray9 = new java.lang.Short[][][] { shortArray6, shortArray8 };
        java.lang.Short[] shortArray10 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray11 = new java.lang.Short[][] { shortArray10 };
        java.lang.Short[] shortArray12 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray13 = new java.lang.Short[][] { shortArray12 };
        java.lang.Short[][][] shortArray14 = new java.lang.Short[][][] { shortArray11, shortArray13 };
        java.lang.Short[] shortArray15 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray16 = new java.lang.Short[][] { shortArray15 };
        java.lang.Short[] shortArray17 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray18 = new java.lang.Short[][] { shortArray17 };
        java.lang.Short[][][] shortArray19 = new java.lang.Short[][][] { shortArray16, shortArray18 };
        java.lang.Short[] shortArray20 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray21 = new java.lang.Short[][] { shortArray20 };
        java.lang.Short[] shortArray22 = new java.lang.Short[] {};
        java.lang.Short[][] shortArray23 = new java.lang.Short[][] { shortArray22 };
        java.lang.Short[][][] shortArray24 = new java.lang.Short[][][] { shortArray21, shortArray23 };
        java.lang.Short[][][][] shortArray25 = new java.lang.Short[][][][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24 };
        java.lang.Short[][][][][] shortArray26 = new java.lang.Short[][][][][] { shortArray25 };
        boolean[] booleanArray31 = new boolean[] { true, true, false, false };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray31, false);
        boolean[] booleanArray38 = new boolean[] { true, true, false, true };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray38, true, (int) '4');
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray31, booleanArray38);
        boolean[] booleanArray47 = new boolean[] { true, true, false, false };
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray47, false);
        boolean[] booleanArray54 = new boolean[] { true, true, false, true };
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray54, true, (int) '4');
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray47, booleanArray54);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray38, booleanArray47);
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray38, true, (int) (byte) 10);
        boolean[] booleanArray67 = new boolean[] { true, true, false, true };
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray67, true, (int) '4');
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray67);
        boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray67, false);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray67);
        boolean[] booleanArray75 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray38, booleanArray67);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray67);
        boolean[] booleanArray78 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray67, (int) (short) 0);
        java.lang.Short[][][][][] shortArray79 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray26, (java.lang.Object) booleanArray78);
        java.lang.Short[][][][][] shortArray80 = org.apache.commons.lang3.ArrayUtils.clone(shortArray79);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray75), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[false, true, true]");
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertNotNull(shortArray80);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, false);
        boolean[] booleanArray16 = new boolean[] { true, true, false, true };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, true, (int) '4');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray16);
        java.lang.Boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray16);
        java.lang.Boolean[] booleanArray27 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27);
        java.lang.Boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray16, booleanArray28);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray28, 2);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray28, false, (-1));
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray28);
        boolean[] booleanArray37 = new boolean[] {};
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray37, true);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray37);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray37, true, (int) (byte) 10);
        boolean[] booleanArray44 = new boolean[] {};
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray44, true);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray44);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray44, true, (int) (byte) 10);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray37, booleanArray44);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray37, false, 10);
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray37, true);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray28, booleanArray56);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray56, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.add(booleanArray59, 1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[]");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray0, 11, 0);
        org.junit.Assert.assertNull(booleanArray3);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray11, false);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, 1);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray0);
        java.lang.Class<?>[] wildcardClassArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray23 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray23, (long) (-1));
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.add(longArray25, 0, (long) 1);
        java.lang.Class<?> wildcardClass29 = longArray25.getClass();
        java.lang.Class<?>[] wildcardClassArray30 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray16, wildcardClass29);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray31 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.GenericDeclaration[]) wildcardClassArray0, (java.lang.reflect.GenericDeclaration[]) wildcardClassArray16);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray0);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray16);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClassArray30);
        org.junit.Assert.assertNotNull(genericDeclarationArray31);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        short[] shortArray18 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray18);
        short[] shortArray24 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray24, (short) (byte) 0, 2);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray18, shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) -1, (int) (byte) 1);
        short[] shortArray33 = null;
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray24);
        java.lang.Short[] shortArray42 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42, (short) 1);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray46);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.remove(shortArray24, 2);
        short[] shortArray53 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray53);
        short[] shortArray59 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray59, (short) (byte) 0, 2);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray53, shortArray59);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray59);
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray59, (short) -1, (int) (byte) 1);
        short[] shortArray68 = null;
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray59, shortArray68);
        int int72 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray69, (short) 0, 0);
        short[] shortArray77 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray77);
        short[] shortArray80 = org.apache.commons.lang3.ArrayUtils.remove(shortArray77, 0);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray69, shortArray80);
        java.lang.Short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray80);
        java.lang.Short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray80);
        short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray80, (int) (short) 10, (int) (short) 0);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray49, (java.lang.Object) shortArray80);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray80), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray8 = new float[] { (byte) -1 };
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (-1L));
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray14);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (-1.0f));
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) '#', (double) '4');
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.lang.Byte[][] byteArray0 = new java.lang.Byte[][] {};
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray18 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray24 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray30 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray31 = new java.lang.Byte[][] { byteArray6, byteArray12, byteArray18, byteArray24, byteArray30 };
        java.lang.Byte[][] byteArray32 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray31);
        java.util.Map<java.lang.Object, java.lang.Object> objMap33 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) byteArray0);
        java.lang.Byte[] byteArray36 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray36);
        java.lang.Long[] longArray44 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray44, (long) (-1));
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray36, (java.lang.Object) longArray46, (int) (short) -1);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray36, (byte) 1);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray36);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray0, (java.lang.Object[]) byteArray36);
        long[] longArray55 = new long[] { (byte) -1, 10 };
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.clone(longArray55);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray56);
        java.lang.Byte[][] byteArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (java.lang.Object) longArray56);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray56);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray56, (long) 10);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(objMap33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[-1]");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.remove(floatArray5, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray12 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18);
        int[] intArray25 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray19, intArray25);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray25);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, 2);
        int[] intArray33 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        int[] intArray46 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray46);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.remove(intArray33, (int) (short) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray50);
        java.lang.Integer[] intArray53 = org.apache.commons.lang3.ArrayUtils.toObject(intArray50);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.clone(intArray50);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[100, 52]");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray17 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) (short) -1);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray17, (double) 5);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray24, (double) (byte) 100);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, (double) 1.0f, 6);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, 10.0d, (int) (short) 1);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray24);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, 100.0d);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 5, 0, (double) 3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        short[] shortArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 1);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        int[] intArray23 = new int[] { (byte) 0 };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray23, 0);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray23, 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray27, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray16, intArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray27);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.clone(intArray27);
        java.lang.Integer[] intArray33 = org.apache.commons.lang3.ArrayUtils.toObject(intArray27);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray27, 4, (int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray12, 11, (int) (byte) 10);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.add(shortArray3, (int) (byte) 0, (short) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 100]");
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 10, 100, 0]");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray36 = null;
        boolean[] booleanArray41 = new boolean[] { true, true, false, false };
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray41, false);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray41, true);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray41, true);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.add(booleanArray41, 0, true);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray36, booleanArray41);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray36);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, (int) '#', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[true, true, false, true]");
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) '#');
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray54, (int) (short) 1, (double) 1.0f);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray57, (double) (short) -1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray57);
        java.lang.Double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray60);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int63 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray62);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray61, (java.lang.Object) floatArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray45, (java.lang.Object[]) doubleArray61);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray66);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray66, (double) 6);
        double[] doubleArray71 = new double[] { (byte) 10 };
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray71);
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray71, (double) 100.0f);
        java.lang.Double[] doubleArray75 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray71);
        int int78 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray71, (double) 100, (int) (short) 100);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray66, doubleArray71);
        java.lang.Double[] doubleArray80 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray71);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, 10);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray20, 0, (int) (short) 1);
        java.lang.Integer[] intArray26 = org.apache.commons.lang3.ArrayUtils.toObject(intArray20);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray26);
        java.lang.Integer[] intArray28 = org.apache.commons.lang3.ArrayUtils.toObject(intArray27);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        byte[] byteArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) -1, 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 10, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int16 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray15);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, (double) (-1.0f));
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 1.0f, (double) (short) -1);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) 3, (double) '#');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[52.0, -1.0, -1.0, 1.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10L);
        float[] floatArray25 = new float[] { (byte) -1 };
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray25);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray23, 0.0f, (int) ' ');
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.clone(floatArray23);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray19, (java.lang.Object) floatArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray30, (float) ' ');
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray30, (float) 1);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(floatArray30, (float) '4');
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.clone(floatArray30);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray30);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray12 = org.apache.commons.lang3.ArrayUtils.remove(longArray8, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (-1.0f));
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) 10L);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0]");
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        float[] floatArray1 = new float[] { '#' };
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1));
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f);
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) 1L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray14 = new float[] { (byte) -1 };
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray15, (float) (-1L));
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (float) 10L);
        float[] floatArray22 = new float[] { (byte) -1 };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray20);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray20);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray9);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 100L);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray9, (float) 1);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Byte[] byteArray21 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray15, (java.lang.Object) byteArray22, 2);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        int[] intArray31 = new int[] { (byte) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray31, 0);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.add(intArray31, 0);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray31, (int) (short) 100);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray29, (java.lang.Object) intArray31);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray31, (int) ' ');
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray15, (java.lang.Object) intArray31);
        double[] doubleArray44 = new double[] { (byte) 10 };
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray44);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray45);
        java.lang.Double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray46);
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray47);
        java.lang.Double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray48);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray56, (double) '#');
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.add(doubleArray58, (int) (short) 1, (double) 1.0f);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray61, (double) (short) -1);
        double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray61);
        java.lang.Double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray64);
        float[] floatArray66 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int67 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray66);
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray65, (java.lang.Object) floatArray66);
        float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray66, (float) '#');
        int int72 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray49, (java.lang.Object) floatArray70, 3);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray15, (java.lang.Object) 3);
        byte[] byteArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1, 0, 0, 1]");
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) (short) 10, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        short[] shortArray10 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray10, shortArray15);
        short[] shortArray23 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray23);
        short[] shortArray29 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray29, (short) (byte) 0, 2);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray29);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray29);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray29, (short) -1, (int) (byte) 1);
        short[] shortArray38 = null;
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray29, shortArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray10, shortArray29);
        java.lang.Short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray29);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray4, (java.lang.Object) shortArray41);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) 1L);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) ' ');
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray46, (double) '#');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0]");
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray17 = new boolean[] { true, true, false, false };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, false);
        boolean[] booleanArray24 = new boolean[] { true, true, false, true };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, true, (int) '4');
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray17, booleanArray24);
        boolean[] booleanArray33 = new boolean[] { true, true, false, false };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray33, false);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray33, booleanArray40);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray24, booleanArray33);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, true, (int) (byte) 10);
        boolean[] booleanArray53 = new boolean[] { true, true, false, true };
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray53, true, (int) '4');
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray53);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray53, false);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray53);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray24, booleanArray53);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray61);
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray62, 1);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, true, false, true, true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[true, false, true, true, true, false, true, true, true, false, true]");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 0);
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        java.lang.Byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        short[] shortArray3 = new short[] { (byte) 1, (short) 0, (byte) 100 };
        short[] shortArray7 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray7);
        short[] shortArray13 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray13, (short) (byte) 0, 2);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray7, shortArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray13);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray13, 3, (int) '4');
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray23);
        short[] shortArray28 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray28);
        short[] shortArray34 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray34, (short) (byte) 0, 2);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray28, shortArray34);
        java.lang.Short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray34);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray39);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39, (short) (byte) 10);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39, (short) -1);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray44, (short) 0, (int) (byte) 0);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray44);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) 10);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 0, 100]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, true, 6);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, false, 3);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, 10, (int) '4');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[]");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        java.lang.Short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray30, (int) (short) 10, (int) (short) 0);
        java.lang.Long[] longArray43 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray43, (long) (-1));
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray43);
        java.lang.reflect.Type[][] typeArray47 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray48 = org.apache.commons.lang3.ArrayUtils.clone(typeArray47);
        float[] floatArray49 = new float[] {};
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.add(floatArray49, (float) 10L);
        float[] floatArray53 = new float[] { (byte) -1 };
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray51, floatArray53);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray48, (java.lang.Object) floatArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) longArray43, (java.lang.Object[]) typeArray48);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) longArray43);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray7);
        java.lang.Character[] charArray11 = new java.lang.Character[] { '4' };
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray11);
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.toObject(charArray12);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray18, (byte) 0);
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, 0);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray18, byteArray23);
        byte[] byteArray28 = null;
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray27, byteArray28);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.remove(byteArray27, 2);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.clone(byteArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray13, (java.lang.Object) byteArray32, (-1));
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, ' ');
        char[] charArray38 = new char[] { ' ' };
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, '#');
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 'a');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(charArray42, '#');
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.remove(charArray42, 2);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.add(charArray46, (int) (byte) 0, '#');
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray46);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray7, charArray46);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , #]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, a]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , #]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#,  , #]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "4 #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "4 #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[4,  , #]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        long[] longArray0 = new long[] {};
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) (short) 1);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.add(longArray12, 0, (long) 1);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray12, (long) (-1), (int) (byte) 1);
        long[] longArray19 = new long[] {};
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(longArray19, (long) (short) 1);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.addAll(longArray12, longArray19);
        java.lang.Long[] longArray29 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) (-1));
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray31, (long) '#');
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.subarray(longArray31, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray43 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray43, (long) (-1));
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray45, (long) '#');
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.addAll(longArray36, longArray45);
        long[] longArray51 = new long[] { (byte) -1, 10 };
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray36, longArray51);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.addAll(longArray22, longArray51);
        java.lang.Long[] longArray61 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray61, (long) (-1));
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray54, longArray63);
        java.lang.Byte[] byteArray67 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray67);
        java.lang.Long[] longArray75 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray75, (long) (-1));
        int int79 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray67, (java.lang.Object) longArray77, (int) (short) -1);
        long[] longArray80 = org.apache.commons.lang3.ArrayUtils.addAll(longArray54, longArray77);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray0, longArray54);
        int int84 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray54, (long) (short) 1, 5);
        long[] longArray87 = new long[] { (byte) -1, 10 };
        long[] longArray88 = org.apache.commons.lang3.ArrayUtils.clone(longArray87);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray88);
        long[] longArray90 = org.apache.commons.lang3.ArrayUtils.clone(longArray88);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray90);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray54, longArray90);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(longArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray80), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertNotNull(longArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray87), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray88), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(longArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray90), "[10, -1]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray8 = new char[] { '#' };
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray8);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray10, 'a');
        char[] charArray19 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, '4', (int) (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, '#', 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray19);
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray30, 'a');
        char[] charArray34 = new char[] { '#' };
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray34);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray26, charArray34);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray34);
        char[] charArray40 = null;
        char[] charArray42 = new char[] { '#' };
        java.lang.Character[] charArray43 = org.apache.commons.lang3.ArrayUtils.toObject(charArray42);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.clone(charArray42);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.add(charArray44, 'a');
        char[] charArray53 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray53, '4', (int) (byte) 100);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray53, '#', 0);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.addAll(charArray44, charArray53);
        char[] charArray62 = new char[] { '#' };
        java.lang.Character[] charArray63 = org.apache.commons.lang3.ArrayUtils.toObject(charArray62);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.clone(charArray62);
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.add(charArray64, 'a');
        char[] charArray68 = new char[] { '#' };
        java.lang.Character[] charArray69 = org.apache.commons.lang3.ArrayUtils.toObject(charArray68);
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.clone(charArray68);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.addAll(charArray64, charArray68);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.addAll(charArray60, charArray68);
        char[] charArray73 = org.apache.commons.lang3.ArrayUtils.clone(charArray68);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray40, charArray73);
        char[] charArray76 = new char[] { '#' };
        java.lang.Character[] charArray77 = org.apache.commons.lang3.ArrayUtils.toObject(charArray76);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.clone(charArray76);
        char[] charArray80 = org.apache.commons.lang3.ArrayUtils.add(charArray78, 'a');
        java.lang.Character[] charArray81 = org.apache.commons.lang3.ArrayUtils.toObject(charArray78);
        int int83 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray78, ' ');
        java.lang.Character[] charArray84 = org.apache.commons.lang3.ArrayUtils.toObject(charArray78);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray40, charArray78);
        char[] charArray87 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray78, ' ');
        char[] charArray88 = org.apache.commons.lang3.ArrayUtils.addAll(charArray39, charArray78);
        int int90 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray78, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, a]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[#]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[#, a]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[#]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[#, #]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[#]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[#, a]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[#]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), " ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), " ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[ , #, #]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray4);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray11 = org.apache.commons.lang3.ArrayUtils.remove(longArray4, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 52, 1, 0]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) -1, (int) (short) 0);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray10, (short) (byte) 100);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray19, (short) (byte) 10, 11);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 10, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        int[] intArray4 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray10 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray10);
        int[] intArray17 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray11, intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray17);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray17, 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray0, (java.lang.Object) intArray17);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        java.lang.Object[] objArray24 = null;
        char[] charArray26 = new char[] { '#' };
        java.lang.Character[] charArray27 = org.apache.commons.lang3.ArrayUtils.toObject(charArray26);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray28, 'a');
        java.lang.Character[] charArray31 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, ' ');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.add(charArray28, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray28);
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray24, (java.lang.Object[]) charArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray0, (java.lang.Object) charArray38);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = new double[] { (byte) 10 };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray14, (double) (byte) 0);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 0.0d, (int) ' ');
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray14);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) '#');
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) 2, (-1), (double) (byte) 100);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (short) 10);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1, (int) 'a', (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.lang.reflect.Type[][][] typeArray0 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][] typeArray1 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][] typeArray2 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][] typeArray3 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][] typeArray4 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][][] typeArray5 = new java.lang.reflect.Type[][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (short) 0);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray6);
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        java.lang.reflect.Type[][][][] typeArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(typeArray5, (java.lang.Object) shortArray6);
        java.lang.reflect.Type[][][][] typeArray12 = org.apache.commons.lang3.ArrayUtils.clone(typeArray5);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 0, (int) (short) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray8);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, 10.0f, (int) ' ');
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, 100.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(byteArray4, (byte) 1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(byteArray4, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) ' ', 100.0d);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) '4');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, 4);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, (int) (byte) 1);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.remove(intArray24, (int) (byte) 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray26, (int) (byte) 10, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        long[] longArray0 = null;
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, 10, (int) (short) 0);
        org.junit.Assert.assertNull(longArray3);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, 0.0d, (int) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (-1L));
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray21);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray23, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray15, (java.lang.Object) booleanArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray25, false);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray25, 4, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        short[] shortArray2 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray5 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray8 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray11 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray12 = new short[][] { shortArray2, shortArray5, shortArray8, shortArray11 };
        short[] shortArray15 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray18 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray21 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray24 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray25 = new short[][] { shortArray15, shortArray18, shortArray21, shortArray24 };
        short[] shortArray28 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray31 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray34 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray37 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray38 = new short[][] { shortArray28, shortArray31, shortArray34, shortArray37 };
        short[] shortArray41 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray44 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray47 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray50 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray51 = new short[][] { shortArray41, shortArray44, shortArray47, shortArray50 };
        short[] shortArray54 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray57 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray60 = new short[] { (byte) 0, (byte) 1 };
        short[] shortArray63 = new short[] { (byte) 0, (byte) 1 };
        short[][] shortArray64 = new short[][] { shortArray54, shortArray57, shortArray60, shortArray63 };
        short[][][] shortArray65 = new short[][][] { shortArray12, shortArray25, shortArray38, shortArray51, shortArray64 };
        short[][][] shortArray68 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray65, (int) (byte) 10, (int) (byte) -1);
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 100.0d, 1.0d, 100.0d };
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray72);
        int int74 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray72);
        short[][][] shortArray75 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray65, (java.lang.Object) doubleArray72);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[0, 1]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(shortArray75);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(longArray8, (long) '#');
        long[] longArray21 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.clone(longArray21);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.add(longArray21, (long) (byte) 100);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.clone(longArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray21);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray21);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1, 52, 1, 0]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[0, 1, 52, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        float[][][] floatArray0 = new float[][][] {};
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        float[][] floatArray3 = new float[][] {};
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray7 = new float[] {};
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray7);
        float[] floatArray9 = null;
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray9);
        float[][] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, floatArray9);
        boolean[][] booleanArray12 = new boolean[][] {};
        boolean[][] booleanArray13 = new boolean[][] {};
        boolean[][] booleanArray14 = new boolean[][] {};
        boolean[][] booleanArray15 = new boolean[][] {};
        boolean[][][] booleanArray16 = new boolean[][][] { booleanArray12, booleanArray13, booleanArray14, booleanArray15 };
        boolean[] booleanArray20 = new boolean[] { true, false, true };
        boolean[][] booleanArray21 = new boolean[][] { booleanArray20 };
        boolean[] booleanArray25 = new boolean[] { true, false, true };
        boolean[][] booleanArray26 = new boolean[][] { booleanArray25 };
        boolean[] booleanArray30 = new boolean[] { true, false, true };
        boolean[][] booleanArray31 = new boolean[][] { booleanArray30 };
        boolean[] booleanArray35 = new boolean[] { true, false, true };
        boolean[][] booleanArray36 = new boolean[][] { booleanArray35 };
        boolean[] booleanArray40 = new boolean[] { true, false, true };
        boolean[][] booleanArray41 = new boolean[][] { booleanArray40 };
        boolean[][][] booleanArray42 = new boolean[][][] { booleanArray21, booleanArray26, booleanArray31, booleanArray36, booleanArray41 };
        boolean[][][] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray16, booleanArray42);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray3, (java.lang.Object) booleanArray43, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            float[][][] floatArray46 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (int) (byte) 10, floatArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, 0.0d, (int) ' ');
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, '#');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray4);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, ' ');
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, ' ', 2);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, 'a', (int) (short) 10);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray4);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray4);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        java.lang.Character[] charArray26 = org.apache.commons.lang3.ArrayUtils.toObject(charArray23);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray26);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = new char[] { '#' };
        java.lang.Character[] charArray31 = org.apache.commons.lang3.ArrayUtils.toObject(charArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray30);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.addAll(charArray28, charArray30);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.clone(charArray30);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.subarray(charArray30, (int) (byte) 100, (int) ' ');
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray30, 'a');
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray4, charArray30);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, ' ');
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        int[] intArray0 = null;
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.subarray(intArray0, 5, 6);
        org.junit.Assert.assertNull(intArray3);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        java.lang.Character[] charArray4 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray4);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.subarray(longArray22, 1, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray31 = org.apache.commons.lang3.ArrayUtils.add(longArray22, (int) (byte) 10, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[10, -1, 10, 1, 1]");
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray8);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray5, doubleArray8);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 1L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray8);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray8, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) '#', (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13, (double) '#');
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, (int) (short) 1, (double) 1.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (short) -1);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray18);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, (int) (short) -1, (int) (short) 0);
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '4');
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray12 = new char[] { ' ' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray12, '#');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, 'a');
        char[] charArray18 = new char[] { '#' };
        java.lang.Character[] charArray19 = org.apache.commons.lang3.ArrayUtils.toObject(charArray18);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.add(charArray20, 'a');
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray20);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray24);
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray27);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray12, charArray24);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray24);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray24, ' ', 10);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray24, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ ]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , #]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) (short) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        java.util.Map<java.lang.Object, java.lang.Object> objMap3 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, true);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray9);
        java.lang.Boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray14);
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray21);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray22, true);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray25, 2, (int) (byte) 10);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray25, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray30);
        boolean[] booleanArray32 = new boolean[] {};
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray32);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true, (int) (byte) 10);
        boolean[] booleanArray39 = new boolean[] {};
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray39, true);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray39);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray39, true, (int) (byte) 10);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray39);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, false, 10);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray32);
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray32, 4, (int) (short) 1);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray30, booleanArray53);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray53, true, 6);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray53);
        java.lang.Boolean[] booleanArray64 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray64);
        java.lang.Boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray65);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.add(booleanArray65, true);
        boolean[] booleanArray69 = null;
        boolean[] booleanArray74 = new boolean[] { true, true, false, false };
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray74, false);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray74, true);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray74, true);
        boolean[] booleanArray83 = org.apache.commons.lang3.ArrayUtils.add(booleanArray74, 0, true);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray69, booleanArray74);
        boolean[] booleanArray85 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray74);
        boolean[] booleanArray86 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray65, booleanArray74);
        int int88 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray74, false);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray53, booleanArray74);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(objMap3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[]");
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[true, false, false]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray83), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray86), "[true, true, false, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        int[] intArray2 = new int[] { 5, (byte) 10 };
        int[] intArray5 = new int[] { 5, (byte) 10 };
        int[] intArray8 = new int[] { 5, (byte) 10 };
        int[] intArray11 = new int[] { 5, (byte) 10 };
        int[][] intArray12 = new int[][] { intArray2, intArray5, intArray8, intArray11 };
        int[] intArray15 = new int[] { 5, (byte) 10 };
        int[] intArray18 = new int[] { 5, (byte) 10 };
        int[] intArray21 = new int[] { 5, (byte) 10 };
        int[] intArray24 = new int[] { 5, (byte) 10 };
        int[][] intArray25 = new int[][] { intArray15, intArray18, intArray21, intArray24 };
        int[] intArray28 = new int[] { 5, (byte) 10 };
        int[] intArray31 = new int[] { 5, (byte) 10 };
        int[] intArray34 = new int[] { 5, (byte) 10 };
        int[] intArray37 = new int[] { 5, (byte) 10 };
        int[][] intArray38 = new int[][] { intArray28, intArray31, intArray34, intArray37 };
        int[] intArray41 = new int[] { 5, (byte) 10 };
        int[] intArray44 = new int[] { 5, (byte) 10 };
        int[] intArray47 = new int[] { 5, (byte) 10 };
        int[] intArray50 = new int[] { 5, (byte) 10 };
        int[][] intArray51 = new int[][] { intArray41, intArray44, intArray47, intArray50 };
        int[] intArray54 = new int[] { 5, (byte) 10 };
        int[] intArray57 = new int[] { 5, (byte) 10 };
        int[] intArray60 = new int[] { 5, (byte) 10 };
        int[] intArray63 = new int[] { 5, (byte) 10 };
        int[][] intArray64 = new int[][] { intArray54, intArray57, intArray60, intArray63 };
        int[][][] intArray65 = new int[][][] { intArray12, intArray25, intArray38, intArray51, intArray64 };
        int[][][] intArray66 = new int[][][] {};
        int[][][] intArray67 = org.apache.commons.lang3.ArrayUtils.addAll(intArray65, intArray66);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[5, 10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray8 = new char[] { '#' };
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray8);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray10, 'a');
        char[] charArray19 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, '4', (int) (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, '#', 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray19);
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray30, 'a');
        char[] charArray34 = new char[] { '#' };
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray34);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray26, charArray34);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray34);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray39, '#', (-1));
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray39);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(charArray39, '#');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) (byte) 10);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        short[] shortArray28 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray28);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.remove(shortArray28, 0);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray28);
        short[] shortArray33 = null;
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray28, shortArray33);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1, 1, 10]");
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        java.lang.Byte[][] byteArray0 = new java.lang.Byte[][] {};
        java.lang.Byte[] byteArray7 = new java.lang.Byte[] { (byte) 1, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        java.lang.Byte[][] byteArray8 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, 0, byteArray7);
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9, (float) 1L);
        float[] floatArray13 = new float[] {};
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, (float) 10L);
        float[] floatArray17 = new float[] { (byte) -1 };
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray18, (float) (-1L));
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10L);
        float[] floatArray25 = new float[] { (byte) -1 };
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray23, (float) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray18, floatArray23);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray23);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (byte) -1, 5);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray8, (java.lang.Object) 5);
        float[] floatArray35 = new float[] {};
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray35, (float) 10L);
        float[] floatArray39 = new float[] { (byte) -1 };
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray37, floatArray39);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray40, (float) (-1L));
        float[] floatArray43 = new float[] {};
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray43, (float) 10L);
        float[] floatArray47 = new float[] { (byte) -1 };
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray45, floatArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray40, floatArray45);
        java.lang.Float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray45);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray8, (java.lang.Object[]) floatArray50);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 0, (int) (short) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray8);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray8);
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray13 = new float[] { '#' };
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, (float) (-1));
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray13);
        java.lang.String str19 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray13, " ");
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray13, 6, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.remove(floatArray13, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{35.0}" + "'", str19, "{35.0}");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.clone(floatArray4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.lang.Short[] shortArray2 = new java.lang.Short[] { (short) -1, (short) 0 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2, (short) (byte) 10);
        short[] shortArray5 = null;
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray6, (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (int) (byte) 10, (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '#', (int) 'a');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, (int) (byte) 1, (-1));
        char[] charArray15 = new char[] { '#' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.toObject(charArray15);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray17, 'a');
        char[] charArray26 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray26, '4', (int) (byte) 100);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray19, charArray26);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray19, '4');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.add(charArray32, (int) (byte) 0, '#');
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray35, 'a');
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray35);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a, 4]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "###a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "###a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #, #, a, 4]");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray1, (int) (byte) -1, (int) (byte) 1);
        double[] doubleArray16 = new double[] { (byte) 10 };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) ' ');
        double[] doubleArray22 = new double[] { (byte) 10 };
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray25, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.remove(shortArray4, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) 100, (int) '#');
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) (byte) 1);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray12, (short) -1);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.add(shortArray12, (short) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray16, (short) 100);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 1, 1, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 1, 1, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1, 1, 1, 10, 1, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 10, 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray16);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray20);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 0);
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ', (double) (-1.0f));
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0.0f, (int) (byte) 0);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) '#', 2);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray16);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) (byte) 100, (double) 100L);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 5, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) (-1));
        java.lang.Double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) 5);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray47, (long) (byte) 1);
        long[] longArray55 = org.apache.commons.lang3.ArrayUtils.add(longArray47, (int) (byte) 0, (long) (byte) 100);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(longArray47, 0L);
        java.lang.String str58 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) boolean57);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[100, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "false" + "'", str58, "false");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toObject(longArray13);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(longArray13, (long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray30 = org.apache.commons.lang3.ArrayUtils.remove(longArray13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 10L, 100L, 10L, (-1L), (-1L) };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) (short) 1);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) (short) 100);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[10, 100, 10, -1, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[10, 100, 10, -1, -1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[10, 100, 10, -1, -1]");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (short) 100, (int) (byte) 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray6, (float) 100L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        java.lang.String str51 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray50);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.subarray(longArray50, 4, (int) (byte) -1);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray54);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{-1,10,-1,10,1,1,-1,10}" + "'", str51, "{-1,10,-1,10,1,1,-1,10}");
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 3, (int) '4');
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray25, (double) '#');
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray27, (int) (short) 1, (double) 1.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray35);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray34, (java.lang.Object) floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray35, (float) '#');
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        java.lang.Float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray35);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        float[] floatArray1 = new float[] { '#' };
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1));
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f);
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) 1L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray14 = new float[] { (byte) -1 };
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray15, (float) (-1L));
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (float) 10L);
        float[] floatArray22 = new float[] { (byte) -1 };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray20);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray20);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray9);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 100L);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(floatArray9, (float) 4);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) 1);
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray56);
        short[] shortArray62 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray62);
        short[] shortArray68 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray68, (short) (byte) 0, 2);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray62, shortArray68);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray68);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray68, (short) -1, (int) (byte) 1);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray68, 6, 3);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray27, shortArray79);
        int int83 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray79, (short) 0, 10);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 1, 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray1);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) '4', 10);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = org.apache.commons.lang3.ArrayUtils.remove(intArray1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.lang.String[] strArray4 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[] strArray9 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[][] strArray10 = new java.lang.String[][] { strArray4, strArray9 };
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray10 };
        java.lang.String[] strArray16 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[] strArray21 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[][] strArray22 = new java.lang.String[][] { strArray16, strArray21 };
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray22 };
        java.lang.String[] strArray28 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[] strArray33 = new java.lang.String[] { "true", " ", "{0}", "true" };
        java.lang.String[][] strArray34 = new java.lang.String[][] { strArray28, strArray33 };
        java.lang.String[][][] strArray35 = new java.lang.String[][][] { strArray34 };
        java.lang.String[][][][] strArray36 = new java.lang.String[][][][] { strArray11, strArray23, strArray35 };
        java.lang.String[][][][] strArray37 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray38 = org.apache.commons.lang3.ArrayUtils.addAll(strArray36, strArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(strArray38);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        java.lang.String str2 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) 6, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "6" + "'", str2, "6");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.lang.Double[][][][][] doubleArray0 = new java.lang.Double[][][][][] {};
        java.lang.Double[][][][] doubleArray1 = new java.lang.Double[][][][] {};
        java.lang.Double[][][][] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toArray(doubleArray1);
        java.lang.Double[][][] doubleArray3 = new java.lang.Double[][][] {};
        java.lang.Double[][][] doubleArray4 = new java.lang.Double[][][] {};
        java.lang.Double[][][][] doubleArray5 = new java.lang.Double[][][][] { doubleArray3, doubleArray4 };
        java.lang.Double[][][][] doubleArray6 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray1, doubleArray5);
        java.lang.Double[][][][][] doubleArray7 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, doubleArray1);
        java.lang.Double[][][][][] doubleArray10 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray7, 5, 11);
        boolean[] booleanArray15 = new boolean[] { true, true, false, true };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray15, true, (int) '4');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray15);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray15);
        java.lang.Boolean[] booleanArray26 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray26);
        java.lang.Boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray15, booleanArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray10, (java.lang.Object) booleanArray27);
        java.lang.Double[][][][][] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toArray(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 10, 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray16);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray22, (float) (-1L));
        float[] floatArray25 = new float[] {};
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.add(floatArray25, (float) 10L);
        float[] floatArray29 = new float[] { (byte) -1 };
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray27, floatArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray22, floatArray27);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray27);
        java.lang.String str33 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray5);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray5);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, 0, (int) '4');
        java.lang.Float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray37);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{10.0,-1.0}" + "'", str33, "{10.0,-1.0}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray38);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, 0, (float) 6);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray17, (float) (-1), (int) (byte) 10);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray17);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray17, (float) (short) 10, 2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[6.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[6.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        float[] floatArray3 = new float[] { 10.0f, 2, 6 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 0, (float) (byte) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f, (int) (byte) -1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, (float) 100);
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray3);
        float[] floatArray13 = new float[] {};
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, (float) 10L);
        float[] floatArray17 = new float[] { (byte) -1 };
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray18, (float) (-1L));
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10L);
        float[] floatArray25 = new float[] { (byte) -1 };
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray18, floatArray23);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray23);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray23);
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray23, floatArray31);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, (int) (byte) 1, (float) 1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, 2.0, 6.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0, 1.0]");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        byte[] byteArray0 = null;
        java.lang.Byte[] byteArray3 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3);
        java.lang.Long[] longArray11 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray11, (long) (-1));
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray3, (java.lang.Object) longArray13, (int) (short) -1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) 1);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) 100);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) 1);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray22);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100]");
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (short) 100, (int) (byte) 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, (float) 11, (int) ' ');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, 10.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 100);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 100);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.remove(byteArray15, 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 1, 100, 100]");
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray5 = new boolean[] { true, true, false, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray5, false);
        boolean[] booleanArray12 = new boolean[] { true, true, false, true };
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, true, (int) '4');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray5, booleanArray12);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) 'a');
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, true, (int) '4');
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray23);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray23, (int) (byte) 100, (int) (byte) 100);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, true);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (short) -1, (int) (byte) -1, (double) 10L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray1);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3, 1.0d);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3, (double) (short) 100);
        double[] doubleArray10 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray10);
        double[] doubleArray13 = new double[] { (byte) 10 };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray10, doubleArray13);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray13, (double) 2);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) 100L, (double) 4);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, (double) (byte) 100);
        double[] doubleArray26 = new double[] { (-1), (byte) 100, 10L };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray26);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.add(doubleArray26, (double) (byte) 100);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) 0L, (double) 1.0f);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray13, doubleArray33);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray7, doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 100.0, 10.0, 100.0]");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        java.lang.Integer[] intArray21 = org.apache.commons.lang3.ArrayUtils.toObject(intArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray21);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray21);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0]");
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray20);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.subarray(intArray20, 0, (int) ' ');
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray24, (-1));
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray24, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0]");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, 10, 10);
        java.lang.Integer[] intArray11 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        int int12 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) intArray11);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][] classArray13 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray14 = (java.lang.Class<?>[][]) classArray13;
        java.lang.Class[][] classArray16 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray17 = (java.lang.Class<?>[][]) classArray16;
        java.lang.Class[][][] classArray19 = new java.lang.Class[5][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray20 = (java.lang.Class<?>[][][]) classArray19;
        wildcardClassArray20[0] = wildcardClassArray5;
        wildcardClassArray20[1] = wildcardClassArray8;
        wildcardClassArray20[2] = wildcardClassArray11;
        wildcardClassArray20[3] = wildcardClassArray14;
        wildcardClassArray20[4] = wildcardClassArray17;
        java.lang.Class<?>[][][] wildcardClassArray31 = org.apache.commons.lang3.ArrayUtils.addAll(wildcardClassArray2, wildcardClassArray20);
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray32 = null;
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray33 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.AnnotatedElement[][][]) wildcardClassArray20, annotatedElementArray32);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(wildcardClassArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(annotatedElementArray33);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        int[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 2);
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray2, 100);
        java.lang.Integer[] intArray5 = org.apache.commons.lang3.ArrayUtils.toObject(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[2]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2]");
        org.junit.Assert.assertNotNull(intArray5);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray40);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.add(booleanArray40, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[true, true, true, false, true]");
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        short[] shortArray17 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray23 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 0, 2);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray17, shortArray23);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray23);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray3, (short) 100);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray3, (int) (byte) -1, (int) ' ');
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 10, 100, 1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100, 10, 100]");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, ' ');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.clone(charArray10);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        short[] shortArray18 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray18);
        short[] shortArray24 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray24, (short) (byte) 0, 2);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray18, shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) -1, (int) (byte) 1);
        short[] shortArray33 = null;
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray24);
        java.lang.Short[] shortArray42 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42, (short) 1);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray46);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.remove(shortArray24, 2);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) 10, 0);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray7);
        java.lang.String[][] strArray9 = org.apache.commons.lang3.ArrayUtils.add(strArray6, strArray7);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, (int) (byte) 0, (int) 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray9, (java.lang.Object) floatArray17, (int) (byte) -1);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 100L);
        float[] floatArray22 = new float[] {};
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, (float) 10L);
        float[] floatArray26 = new float[] { (byte) -1 };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray26);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray21, floatArray27);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray27, 100.0f);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[100.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0, 100.0]");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 0L);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray12);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.lang.Short[] shortArray2 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray5 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray8 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray11 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray14 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray17 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[][] shortArray18 = new java.lang.Short[][] { shortArray2, shortArray5, shortArray8, shortArray11, shortArray14, shortArray17 };
        java.lang.Short[] shortArray21 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray27 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray30 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray33 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray36 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[][] shortArray37 = new java.lang.Short[][] { shortArray21, shortArray24, shortArray27, shortArray30, shortArray33, shortArray36 };
        java.lang.Short[] shortArray40 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray43 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray46 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray49 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray52 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray55 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[][] shortArray56 = new java.lang.Short[][] { shortArray40, shortArray43, shortArray46, shortArray49, shortArray52, shortArray55 };
        java.lang.Short[] shortArray59 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray62 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray65 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray68 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray71 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray74 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[][] shortArray75 = new java.lang.Short[][] { shortArray59, shortArray62, shortArray65, shortArray68, shortArray71, shortArray74 };
        java.lang.Short[] shortArray78 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray81 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray84 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray87 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray90 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[] shortArray93 = new java.lang.Short[] { (short) 10, (short) 0 };
        java.lang.Short[][] shortArray94 = new java.lang.Short[][] { shortArray78, shortArray81, shortArray84, shortArray87, shortArray90, shortArray93 };
        java.lang.Short[][][] shortArray95 = new java.lang.Short[][][] { shortArray18, shortArray37, shortArray56, shortArray75, shortArray94 };
        java.lang.Short[][][] shortArray96 = org.apache.commons.lang3.ArrayUtils.toArray(shortArray95);
        java.lang.Short[][][] shortArray97 = org.apache.commons.lang3.ArrayUtils.clone(shortArray96);
        java.util.Map<java.lang.Object, java.lang.Object> objMap98 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) shortArray97);
        java.io.Serializable[][][] serializableArray99 = org.apache.commons.lang3.ArrayUtils.clone((java.io.Serializable[][][]) shortArray97);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertNotNull(shortArray90);
        org.junit.Assert.assertNotNull(shortArray93);
        org.junit.Assert.assertNotNull(shortArray94);
        org.junit.Assert.assertNotNull(shortArray95);
        org.junit.Assert.assertNotNull(shortArray96);
        org.junit.Assert.assertNotNull(shortArray97);
        org.junit.Assert.assertNotNull(objMap98);
        org.junit.Assert.assertNotNull(serializableArray99);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) '#');
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray54, (int) (short) 1, (double) 1.0f);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray57, (double) (short) -1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray57);
        java.lang.Double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray60);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int63 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray62);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray61, (java.lang.Object) floatArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray45, (java.lang.Object[]) doubleArray61);
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61, (double) (short) 100);
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray67, (double) (byte) 1, (double) (byte) 100);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray67, (double) 10.0f, (int) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        long[] longArray2 = new long[] { (byte) -1, 10 };
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.add(longArray3, 0, (long) 10);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray3, (long) (short) -1);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray3);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[10]");
        org.junit.Assert.assertNotNull(longArray9);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        short[] shortArray0 = null;
        short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.clone(shortArray0);
        org.junit.Assert.assertNull(shortArray1);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, (int) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) (-1L));
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 0);
        float[] floatArray13 = new float[] { '#' };
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, (float) (-1));
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray16, (float) (byte) 100);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray16);
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, (float) 10L);
        float[] floatArray24 = new float[] { (byte) -1 };
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray22, floatArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray22, 0.0f, (int) ' ');
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.clone(floatArray22);
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray22);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray31);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[35.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[35.0, 10.0]");
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        java.lang.Boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray2);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, true);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray18, (float) (byte) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, 0.0f, 2);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray20, (float) (short) 10);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray20, (float) (short) 1);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray27, (float) 3);
        float[] floatArray30 = new float[] {};
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.add(floatArray30, (float) 10L);
        float[] floatArray33 = new float[] {};
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray30, floatArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray33);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray33, (float) 3);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray29, floatArray37);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray38, (float) (byte) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[3.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[3.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[3.0]");
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(longArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray9, (long) 1);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (long) (byte) 10);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(longArray14, (long) 100);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[100, 100, -1, -1, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[100, 100, -1, -1, 100, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray47, (long) (byte) 1);
        long[] longArray55 = org.apache.commons.lang3.ArrayUtils.add(longArray47, (int) (byte) 0, (long) (byte) 100);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(longArray47, (long) (byte) 1);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.subarray(longArray47, (int) (short) 10, (int) '4');
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[100, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[]");
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray9, 3, (int) '4');
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray18);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18, (short) (byte) 1);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray2, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 5);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray2, (long) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) -1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 10, (int) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        java.lang.Short[] shortArray12 = new java.lang.Short[] { (short) -1, (short) 0 };
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) (byte) 10);
        short[] shortArray15 = null;
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray16);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(shortArray16, (short) (byte) 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray16, (short) (byte) 1, (int) (short) -1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        byte[] byteArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray0, (byte) 0, 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '4', 4);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        long[] longArray0 = null;
        java.lang.Long[] longArray7 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7);
        java.lang.Long[] longArray15 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray15, (long) (-1));
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray17, (long) '#');
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.subarray(longArray17, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray29 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) (-1));
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray31, (long) '#');
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.addAll(longArray22, longArray31);
        long[] longArray37 = new long[] { (byte) -1, 10 };
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.clone(longArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray22, longArray37);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray22);
        java.lang.Long[] longArray41 = new java.lang.Long[] {};
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray47, (byte) 0);
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray52, (byte) 10, 0);
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray47, byteArray52);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray41, (java.lang.Object) byteArray56);
        long[] longArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41, (long) (byte) 10);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray60);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray60);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.add(longArray60, 0, (long) '#');
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[35]");
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 1, 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray1);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = org.apache.commons.lang3.ArrayUtils.remove(intArray1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0]");
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        java.lang.Byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray13);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray14, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.clone(byteArray16);
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray20, (byte) 10, 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 1);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (int) (short) 0, (byte) 1);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (byte) 10);
        java.lang.Byte[] byteArray33 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray33);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray25, byteArray34);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.add(byteArray35, (int) (byte) 0, (byte) 0);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 100);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray40, (byte) 0, 0);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray17, byteArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray17, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100, 100, 1, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 100, 100, 1, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 100, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, 1L);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) (short) 100);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray11, (long) 6);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray12 = new long[] { (byte) -1, 10 };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray15);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[][] doubleArray36 = new java.lang.Double[][] { doubleArray23, doubleArray29, doubleArray35 };
        java.lang.Double[][] doubleArray37 = new java.lang.Double[][] {};
        java.lang.Double[][] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray36, doubleArray37);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[][] doubleArray59 = new java.lang.Double[][] { doubleArray42, doubleArray46, doubleArray50, doubleArray54, doubleArray58 };
        java.lang.Double[][] doubleArray60 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray37, doubleArray59);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) longArray17, (java.lang.Object[]) doubleArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (byte) 100);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10, -1, 10, 1, 1]");
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.lang.Class<?>[] wildcardClassArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray22 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray22, (long) (-1));
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.add(longArray24, 0, (long) 1);
        java.lang.Class<?> wildcardClass28 = longArray24.getClass();
        java.lang.Class<?>[] wildcardClassArray29 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray15, wildcardClass28);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray30 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.AnnotatedElement[]) wildcardClassArray0, (java.lang.reflect.AnnotatedElement[]) wildcardClassArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(wildcardClassArray0);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClassArray29);
        org.junit.Assert.assertNotNull(annotatedElementArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray47, (long) (byte) 1);
        long[] longArray55 = org.apache.commons.lang3.ArrayUtils.add(longArray47, (int) (byte) 0, (long) (byte) 100);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(longArray55, 100L);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray59 = org.apache.commons.lang3.ArrayUtils.remove(longArray55, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[100, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray7);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.clone(floatArray7);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, 1.0f);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, 0.0f, (int) ' ');
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray14);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 100.0d, 1.0d, 100.0d };
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        int int12 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray10);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, (double) (byte) 100);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, 0.0d);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray16);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray40);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray40, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.add(booleanArray51, 4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, true, true]");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (-1), (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray22, (float) (-1L));
        float[] floatArray25 = new float[] {};
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.add(floatArray25, (float) 10L);
        float[] floatArray29 = new float[] { (byte) -1 };
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray27, floatArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray22, floatArray27);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray27);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.remove(floatArray5, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 4);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0]");
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, true);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray9, 2, (int) (byte) 10);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray12, (int) '#', 10);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray15, false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray7);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.clone(floatArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray9);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, 5);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '#', (int) 'a');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, (int) (byte) 1, (-1));
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) 0, 100);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.clone(charArray16);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        java.lang.Boolean[] booleanArray16 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray16);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray17, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.add(booleanArray17, false);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray17);
        java.lang.Boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray10);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray24, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true, true, false, true]");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        java.lang.Boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray49, true);
        boolean[] booleanArray56 = new boolean[] { true, true, false, false };
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray56, false);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray56, true);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray51, booleanArray56);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray51);
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray62, true, (int) (byte) -1);
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray62, true, (int) (byte) 1);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[]");
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray14, 1, (int) (short) 0);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray14, (double) (-1.0f), (double) (-1.0f));
        double[] doubleArray26 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, (double) (short) -1);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray26);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray14, doubleArray26);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, 4, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray12, (byte) 0);
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray17, (byte) 10, 0);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray12, byteArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 100);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray7, byteArray21);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.remove(byteArray21, 2);
        java.lang.Byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray21);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 100, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray20, (int) (byte) 100, 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.add(shortArray23, (-1), (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        java.lang.Integer[] intArray21 = org.apache.commons.lang3.ArrayUtils.toObject(intArray20);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, (int) '#', 0);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray20);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray20, (int) 'a', 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 1]");
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) 5);
        java.lang.Double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0, 1]");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, (int) (short) -1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, '4');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) (byte) 0, (int) 'a');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray15, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray19 = org.apache.commons.lang3.ArrayUtils.remove(charArray17, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ ]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ ]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , a]");
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 10, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray18, (byte) 0, 1);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray18, "hi!");
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray18, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1,0,0,1,100,100}" + "'", str23, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray7, 'a', 100);
        char[] charArray18 = new char[] { '#' };
        java.lang.Character[] charArray19 = org.apache.commons.lang3.ArrayUtils.toObject(charArray18);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.add(charArray20, 'a');
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray20);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray24);
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray27);
        char[] charArray32 = new char[] { '#' };
        java.lang.Character[] charArray33 = org.apache.commons.lang3.ArrayUtils.toObject(charArray32);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.clone(charArray32);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.add(charArray34, 'a');
        char[] charArray43 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray43, '4', (int) (byte) 100);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray36, charArray43);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray36);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray24, charArray36);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray24, '4');
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray7, charArray51);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, ' ');
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray10, '#');
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        char[] charArray15 = new char[] { '#' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.toObject(charArray15);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray17, 'a');
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray17);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray17, ' ');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.add(charArray17, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray17);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray17);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #]");
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray10);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray8, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#]");
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.remove(byteArray6, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray9);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray40);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray40, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray2, '4', 5);
        java.lang.Class<?> wildcardClass6 = charArray2.getClass();
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }
}


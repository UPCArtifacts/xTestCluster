import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.subarray(longArray13, 6, 4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        boolean[] booleanArray0 = new boolean[] {};
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte) 10);
        boolean[] booleanArray7 = new boolean[] {};
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray7);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray7);
        boolean[] booleanArray16 = null;
        boolean[] booleanArray17 = new boolean[] {};
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray17, true);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray16, booleanArray17);
        boolean[] booleanArray25 = new boolean[] { true, true, false, false };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray25, false);
        boolean[] booleanArray32 = new boolean[] { true, true, false, true };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true, (int) '4');
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray25, booleanArray32);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, (int) 'a');
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true, (int) '4');
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray17, booleanArray32);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.add(booleanArray43, 4, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true, false]");
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        double[] doubleArray20 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (short) -1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        double[] doubleArray28 = new double[] { (byte) 10 };
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray29);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray29, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray29, (double) (byte) 0);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, 0.0d, (int) ' ');
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray20, doubleArray29);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray40, 10.0d, (double) 1);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray40, 1.0d, (int) (short) 1);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray40);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (-1.0f), 3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) ' ');
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) '4');
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (int) (byte) -1, (float) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray21);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[100, 1, 10, 100, 0]");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) -1, 5);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray2, (byte) 1);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10, 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 1);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (int) (short) 0, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (byte) 10, 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray33, (byte) 0);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray38, (byte) 10, 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray33, byteArray38);
        byte[] byteArray43 = null;
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray42, byteArray43);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.remove(byteArray42, 2);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray42);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (short) 100, 10);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray2, byteArray20);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray20, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100, 100, 1, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '#');
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray2, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.lang.Class<?>[] wildcardClassArray17 = org.apache.commons.lang3.ArrayUtils.subarray(wildcardClassArray0, (int) '#', 10);
        java.lang.reflect.Type[][] typeArray18 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray19 = org.apache.commons.lang3.ArrayUtils.clone(typeArray18);
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, (float) 10L);
        float[] floatArray24 = new float[] { (byte) -1 };
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray22, floatArray24);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray19, (java.lang.Object) floatArray22);
        java.lang.Object[][] objArray29 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.Object[][]) typeArray19, 100, 1);
        char[] charArray31 = new char[] { '#' };
        java.lang.Character[] charArray32 = org.apache.commons.lang3.ArrayUtils.toObject(charArray31);
        int[] intArray34 = new int[] { (byte) 0 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray34, 0);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.add(intArray34, 0);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray34, (int) (short) 100);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray32, (java.lang.Object) intArray34);
        int[] intArray43 = new int[] { (byte) 0 };
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray43, 0);
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.add(intArray43, 0);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray43, (int) (short) 100);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray32, (java.lang.Object) (short) 100);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) typeArray19, (java.lang.Object[]) charArray32);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) wildcardClassArray17, (java.lang.Object[]) charArray32);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        boolean[] booleanArray0 = new boolean[] {};
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte) 10);
        boolean[] booleanArray7 = new boolean[] {};
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray7);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 10);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray18, false);
        java.lang.Boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(booleanArray21);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = org.apache.commons.lang3.ArrayUtils.clone(typeArray0);
        float[] floatArray2 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 10L);
        float[] floatArray6 = new float[] { (byte) -1 };
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray6);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray1, (java.lang.Object) floatArray4);
        java.lang.Object[][] objArray11 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.Object[][]) typeArray1, 100, 1);
        char[] charArray13 = new char[] { '#' };
        java.lang.Character[] charArray14 = org.apache.commons.lang3.ArrayUtils.toObject(charArray13);
        int[] intArray16 = new int[] { (byte) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray16, 0);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.add(intArray16, 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray16, (int) (short) 100);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray14, (java.lang.Object) intArray16);
        int[] intArray25 = new int[] { (byte) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray25, 0);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.add(intArray25, 0);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray25, (int) (short) 100);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray14, (java.lang.Object) (short) 100);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) typeArray1, (java.lang.Object[]) charArray14);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray14);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        double[] doubleArray2 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        double[] doubleArray5 = new double[] { (byte) 10 };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        java.lang.Object[] objArray8 = null;
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) '#');
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.add(doubleArray17, (int) (short) 1, (double) 1.0f);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) -1);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray8, (java.lang.Object) doubleArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray5, doubleArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray23, (double) 100.0f);
        java.lang.Double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray23);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray23, 2, 1);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (short) 100);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) 0.0f, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (-1));
        java.lang.Long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toObject(longArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(longArray19, (long) (byte) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray19, 0L);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, true, 6);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray21);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        double[] doubleArray25 = new double[] { (byte) 10 };
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray26);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray23, (java.lang.Object) doubleArray26, 4);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray23);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray33, true, (int) '4');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false, 2);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17);
        java.lang.Boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray18);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.add(booleanArray18, true);
        java.lang.Boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray21);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray21, false, (int) (short) 100);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray3, (float) 'a');
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) ' ', 7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 10);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray11, 3);
        java.lang.Long[] longArray47 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray47, (long) (-1));
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray49, (long) '#');
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.subarray(longArray49, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray61 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray61, (long) (-1));
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray63, (long) '#');
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.addAll(longArray54, longArray63);
        java.lang.Long[] longArray67 = org.apache.commons.lang3.ArrayUtils.toObject(longArray54);
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray67);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) 3, (java.lang.Object) longArray68);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray7 = new char[] { '#' };
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.add(charArray9, 'a');
        java.lang.Character[] charArray12 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray5, charArray14);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray5, 100, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ', 2);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, (int) (short) -1, (-1));
        char[] charArray15 = null;
        char[] charArray17 = new char[] { '#' };
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.add(charArray19, 'a');
        char[] charArray28 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, '4', (int) (byte) 100);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray28, '#', 0);
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray28);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.clone(charArray37);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.add(charArray39, 'a');
        char[] charArray43 = new char[] { '#' };
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.toObject(charArray43);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.clone(charArray43);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.addAll(charArray39, charArray43);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.addAll(charArray35, charArray43);
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.clone(charArray43);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray15, charArray48);
        char[] charArray51 = new char[] { '#' };
        java.lang.Character[] charArray52 = org.apache.commons.lang3.ArrayUtils.toObject(charArray51);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.clone(charArray51);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray53, 'a');
        java.lang.Character[] charArray56 = org.apache.commons.lang3.ArrayUtils.toObject(charArray53);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray53, ' ');
        java.lang.Character[] charArray59 = org.apache.commons.lang3.ArrayUtils.toObject(charArray53);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray15, charArray53);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray53, ' ');
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray53);
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, a]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[#, a]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[]");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 8);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.clone(intArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, 2);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 8]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 8]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 1, 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 'a');
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray12, (long) '#');
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.subarray(longArray12, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray24 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24, (long) (-1));
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray26, (long) '#');
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray17, longArray26);
        long[] longArray32 = new long[] { (byte) -1, 10 };
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray17, longArray32);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.clone(longArray17);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.subarray(longArray17, 3, (-1));
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray3, longArray17);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.add(longArray39, (long) (short) -1);
        short[] shortArray46 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray51 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray56 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray61 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray66 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray71 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray72 = new short[][] { shortArray46, shortArray51, shortArray56, shortArray61, shortArray66, shortArray71 };
        java.lang.Long[] longArray79 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray81 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray79, (long) (-1));
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray81, (long) '#');
        long[] longArray86 = org.apache.commons.lang3.ArrayUtils.subarray(longArray81, (int) '4', (int) (byte) 10);
        short[][] shortArray87 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray72, (java.lang.Object) longArray86);
        int int89 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray86, (long) (byte) -1);
        long[] longArray90 = null;
        long[] longArray91 = org.apache.commons.lang3.ArrayUtils.addAll(longArray86, longArray90);
        long[] longArray92 = org.apache.commons.lang3.ArrayUtils.addAll(longArray41, longArray91);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(longArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray86), "[]");
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(longArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray91), "[]");
        org.junit.Assert.assertNotNull(longArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray92), "[-1]");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray10, (byte) 0, 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 100]");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray1 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray1);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, 3, (int) 'a');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) 1);
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray56);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.add(shortArray58, (short) (byte) 100);
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray58, (short) 0);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[100, 10, 100, 1, 10, 0, 1, 10, 0, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (int) (byte) 0, (float) 0L);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, 3, (float) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0]");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 0, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray11, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        long[] longArray28 = new long[] { (byte) -1, 10 };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray28);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray13, (long) (byte) -1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray16 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) (-1));
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, (long) (short) -1, 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray18);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(longArray18, (long) '#');
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray18, 6, 100L);
        java.lang.Long[] longArray36 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray36, (long) (-1));
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.add(longArray38, 0, (long) 1);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray38, (long) (-1), (int) (byte) 1);
        long[] longArray45 = new long[] {};
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(longArray45, (long) (short) 1);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.addAll(longArray38, longArray45);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray48, (long) 1, 3);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray48, (long) '#');
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray48);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray18);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, 1, 1]");
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, (float) 10L);
        float[] floatArray20 = new float[] { (byte) -1 };
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray18, (float) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray18, (float) 4, 4);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray14, (java.lang.Object) 4, (int) (byte) -1);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray29, (short) -1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[0, 100, 10, 1]");
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        char[][][][] charArray0 = null;
        char[][][][] charArray1 = org.apache.commons.lang3.ArrayUtils.toArray(charArray0);
        org.junit.Assert.assertNull(charArray1);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 100L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) (short) 100);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 2, 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) 6, 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, 0.0f, (int) (short) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, (int) (byte) -1);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (byte) -1, (int) (short) 100);
        boolean[][][] booleanArray62 = new boolean[][][] {};
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 100.0d, 1.0d, 100.0d };
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray66);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.add(doubleArray67, (double) (byte) 0);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.add(doubleArray69, 1, 0.0d);
        boolean[][][] booleanArray73 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray62, (java.lang.Object) 1);
        java.lang.String[] strArray74 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.CharSequence[]) strArray74);
        int int77 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray62, (java.lang.Object) strArray74, (int) (byte) 10);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (short) 100, (java.lang.Object) int77);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 0.0, 1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, 1L);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray11, (long) 6);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.add(longArray22, 0, (long) 1);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.add(longArray25, 100L);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray11, longArray28);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, -1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) -1);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 0, 'a');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray13, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a');
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, '#', 0);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.add(charArray0, ' ');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) 100, (int) (byte) 100, (double) 1L);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        float[] floatArray0 = null;
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0, (float) '4');
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[52.0]");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) (-1L));
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray2);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) 10);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[0, 1, 52, -1]");
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, true);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray9);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray11, (int) (short) 0);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, true);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        double[] doubleArray2 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        double[] doubleArray5 = new double[] { (byte) 10 };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 2);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 100L, (double) 4);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) (byte) 100);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, (double) 0.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) (-1L));
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray16, (float) '#');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray16, 100, 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 0, (int) (short) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray8);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', (int) (short) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, (int) (byte) -1);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, (int) (short) -1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        long[] longArray0 = null;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray9, (long) '#');
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.subarray(longArray9, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray21 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray21, (long) (-1));
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray23, (long) '#');
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.addAll(longArray14, longArray23);
        long[] longArray29 = new long[] { (byte) -1, 10 };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray14, longArray29);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray29, 100L);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray29);
        java.lang.Long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, 10]");
        org.junit.Assert.assertNull(longArray35);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        java.lang.Integer[] intArray24 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray24);
        java.lang.String str26 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray25);
        java.lang.Integer[] intArray27 = org.apache.commons.lang3.ArrayUtils.toObject(intArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) doubleArray15, (java.lang.Object[]) intArray27);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray27, (int) '4');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{0,2,10,0,-1}" + "'", str26, "{0,2,10,0,-1}");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 2, 10, 0, -1]");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        long[] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray3 = org.apache.commons.lang3.ArrayUtils.add(longArray0, 10, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 4);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) '4');
        int[] intArray27 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray33 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray33);
        int[] intArray40 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray34, intArray40);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.addAll(intArray27, intArray40);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray27, 2);
        int[] intArray46 = org.apache.commons.lang3.ArrayUtils.remove(intArray44, 1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) intArray19, (java.lang.Object) intArray46);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray46, 8);
        java.lang.Integer[] intArray56 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray56);
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray56);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray56, 0);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray46, intArray60);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 52]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[52, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ', 2);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, 'a', (int) (short) 10);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, 'a');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray3);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.remove(shortArray0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray11, false);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, true, true]");
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 10L, (-1L), 0L, 1L, 1L, (-1L) };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (byte) 100);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray9, (-1L));
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(longArray9, (long) (byte) 100);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[10, -1, 0, 1, 1, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[10, -1, 0, 1, 1, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray17);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toObject(longArray17);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray6, 1);
        java.lang.Class<?> wildcardClass9 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d, 0.0d, (-1.0d), 100.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) 10);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 2, (int) (byte) 100, (double) 'a');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, 0.0d);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray8, (double) '#');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 0.0, -1.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0, 100.0, 10.0, 10.0]");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 0, (double) (short) -1);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray11, 0.0d);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray17);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray21 = org.apache.commons.lang3.ArrayUtils.add(longArray17, (int) (short) 100, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, 1.0d, 2, (double) '4');
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) (byte) 100, (int) (byte) 0, (double) 6);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, 0.0d, (int) '4', (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) (byte) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, (double) 1, (double) 7);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toObject(longArray13);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray26);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray26);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray26);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray32 = org.apache.commons.lang3.ArrayUtils.add(longArray29, (int) '#', (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (-1.0f));
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray10, (double) 2, (int) '4', 100.0d);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray10, (double) (short) 1, (double) 100L);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray10, 100.0d, (double) 4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[][] doubleArray18 = new java.lang.Double[][] { doubleArray5, doubleArray11, doubleArray17 };
        java.lang.Double[][] doubleArray19 = new java.lang.Double[][] {};
        java.lang.Double[][] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray19);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28, (double) '#');
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28, (double) 4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double[][] doubleArray34 = org.apache.commons.lang3.ArrayUtils.add(doubleArray20, 10, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1, (double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray11, (double) '#');
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, (int) (short) 1, (double) 1.0f);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) (short) -1);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        java.lang.Double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray19);
        java.lang.Object[] objArray21 = null;
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28, (double) '#');
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.add(doubleArray30, (int) (short) 1, (double) 1.0f);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, (double) (short) -1);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray21, (java.lang.Object) doubleArray36);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray36, 10.0d, (int) '4');
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray36, (double) 6, (int) '#');
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray36);
        double[] doubleArray46 = new double[] { (byte) 10 };
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray46);
        double[] doubleArray53 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray53, (double) (short) -1);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray46, doubleArray53);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray36, doubleArray53);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray59);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray60, (double) '#', 2);
        double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray36, doubleArray60);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray36);
        java.lang.String str66 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) doubleArray65);
        int int69 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray65, (double) 4, (double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{10.0,-1.0,1.0,1.0,0.0,1.0,10.0,10.0}" + "'", str66, "{10.0,-1.0,1.0,1.0,0.0,1.0,10.0,10.0}");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, 'a');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 10);
        boolean[] booleanArray39 = null;
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 3, (int) '4');
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray25, (double) '#');
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray27, (int) (short) 1, (double) 1.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray35);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray34, (java.lang.Object) floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray35, (float) '#');
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, 0, (float) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 10.0]");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray15, (int) '#', 0);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray15, (int) (byte) -1, 8);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) -1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 0, 1, 100, 100, -1]");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(shortArray9, (short) 1);
        short[] shortArray20 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray20);
        short[] shortArray26 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) (byte) 0, 2);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray20, shortArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) -1, (int) (byte) 1);
        short[] shortArray35 = null;
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray26);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 1, (int) ' ');
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 10.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(floatArray11, 100.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        java.lang.String str7 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray6);
        int[] intArray9 = new int[] { (byte) 0 };
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray9, 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.add(intArray9, 0);
        java.lang.Integer[] intArray14 = org.apache.commons.lang3.ArrayUtils.toObject(intArray13);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray14, (int) (byte) 10);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray14, (int) (byte) 10);
        boolean[] booleanArray23 = new boolean[] { true, true, false, true };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true, (int) '4');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray23);
        java.lang.Boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray23);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28, false);
        int[] intArray36 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray42 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray42);
        int[] intArray49 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray43, intArray49);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.addAll(intArray36, intArray49);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray36);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray28, (java.lang.Object) intArray36);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray14, (java.lang.Object) intArray36);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray14);
        java.lang.Integer[] intArray56 = org.apache.commons.lang3.ArrayUtils.toObject(intArray55);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray55);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{0,2,10,0,-1}" + "'", str7, "{0,2,10,0,-1}");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[52, 10, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) 0);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10, 0);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray15);
        byte[] byteArray20 = null;
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray19, byteArray20);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.remove(byteArray19, 2);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) 0);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray4, (java.lang.Object) byteArray24, (int) (byte) 0);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.remove(byteArray24, 0);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray30, (byte) 100);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray9, (double) (-1), (double) 4);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, 10.0d);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16);
        double[] doubleArray19 = new double[] { (byte) 10 };
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray19);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray20);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray20);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) 1L);
        double[] doubleArray29 = new double[] { (byte) 10 };
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray29);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray20, doubleArray30);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 0.0d, (double) (-1.0f));
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray31, 7, 2);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray9, doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray39, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 10.0, 10.0]");
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.lang.Object[] objArray0 = null;
        double[] doubleArray2 = new double[] { (byte) 10 };
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 100.0f);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) doubleArray2, 6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.add(doubleArray2, (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 100.0]");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) 1, 3);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray18, (long) (byte) 100);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        java.lang.Long[] longArray31 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray31, (long) (-1));
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.add(longArray33, 0, (long) 1);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray33, (long) (-1), (int) (byte) 1);
        long[] longArray40 = new long[] {};
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(longArray40, (long) (short) 1);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.addAll(longArray33, longArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray43, (long) 1, 3);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.add(longArray43, (long) (byte) 100);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray24, longArray43);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toObject(longArray13);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray5 = org.apache.commons.lang3.ArrayUtils.remove(charArray2, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4]");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = new double[] { (byte) 10 };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray16 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) ' ', 0.0d);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray20);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (byte) 0, (double) 6);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 1.0, -1.0, -1.0, 52.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = org.apache.commons.lang3.ArrayUtils.add(intArray5, 8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray21, (short) 0, 0);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray21);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.remove(shortArray21, (int) (byte) 1);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) (byte) 1);
        java.lang.Class<?>[] wildcardClassArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray30, (java.lang.Object) shortArray57);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray57, (short) (byte) 1);
        short[] shortArray64 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray64);
        short[] shortArray70 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray70, (short) (byte) 0, 2);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray64, shortArray70);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray64, (short) (byte) 0);
        short[] shortArray81 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int84 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray81, (short) (byte) 0, 2);
        short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray81, (short) 100);
        short[] shortArray87 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray64, shortArray86);
        short[] shortArray88 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray57, shortArray86);
        java.lang.Short[] shortArray89 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray57);
        short[] shortArray90 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray57);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[0, 100, 10, 1, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[0, 10, 1, 100]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(wildcardClassArray30);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray88), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray89);
        org.junit.Assert.assertNotNull(shortArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray90), "[0, 10, 1, 100, 100, 10, 100, 1, 10, 0]");
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(byteArray9, (byte) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray5, charArray12);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (short) 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, (int) '4');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, 0, true);
        boolean[] booleanArray17 = new boolean[] { true, true, false, false };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, false);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, true);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray17, true);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.add(booleanArray17, 0, true);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray26, true, 6);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray26, false);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray26, false);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray26);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[true, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[true, true, true, false, false]");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) 1, 3);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray18, (long) (byte) 100);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray18, (-1L));
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[10, -1, 10, 1, 1]");
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, true);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray9);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray9, false);
        boolean[] booleanArray18 = new boolean[] { true, true, false, true };
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray18, true, (int) '4');
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray18);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray18);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray23);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray25);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray25, (int) (byte) -1, (int) (short) 10);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true, true, false, true, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, true, false, true]");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray3);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[0, 100, 10, 1]");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, true);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.add(booleanArray9, false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, false, true, false]");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) (-1L));
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 0);
        boolean[] booleanArray16 = new boolean[] { true, true, false, true };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, true, (int) '4');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray16);
        java.lang.Boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray16);
        boolean[] booleanArray22 = null;
        boolean[] booleanArray23 = new boolean[] {};
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray22, booleanArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray23);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray16, booleanArray23);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray16, false);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray16, true);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) int11, (java.lang.Object) booleanArray32);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.add(booleanArray32, (int) (short) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray4, ' ');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray4, 0, (int) (byte) -1);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 0, 'a');
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray14);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, 'a');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.remove(charArray17, 0);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray19);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) 0);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10, 0);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray15);
        byte[] byteArray20 = null;
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray19, byteArray20);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.remove(byteArray19, 2);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) 0);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray4, (java.lang.Object) byteArray24, (int) (byte) 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int30 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray4, (java.lang.Object) int30);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 2, -1, 2]");
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 0, (double) '4');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray47, (long) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(longArray47);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[10, -1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10]");
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) (byte) 100);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[100, 10, 100]");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) 0L);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, 10.0d, (double) (-1.0f));
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 2);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) ' ');
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (-1.0d), (int) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, true, 6);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray17 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) 3);
        java.lang.Long[] longArray27 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray27, (long) (-1));
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray29, (long) '#');
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.subarray(longArray29, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray41 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41, (long) (-1));
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray43, (long) '#');
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.addAll(longArray34, longArray43);
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray47);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray47, (long) 7);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[100, 100, -1, -1, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (int) (short) 1, (byte) 10);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray8, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        int[] intArray12 = new int[] { (byte) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray12, 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, (int) (byte) 1, (int) ' ');
        int[] intArray21 = new int[] { (byte) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 10, 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0, 1);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray21);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray10, (java.lang.Object) intArray21);
        byte[] byteArray32 = null;
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray10, byteArray32);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 1);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray38, (byte) 1, 1);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray38);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray38);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 10);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 100);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray60, (byte) 0);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 100 };
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray65, (byte) 10, 0);
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray60, byteArray65);
        int int72 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray65, (byte) 1, 6);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray10, byteArray65);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 1, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 100, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray16);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(byteArray16, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray16);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) doubleArray2, " ");
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray2, (int) '#', (int) (short) 0);
        java.lang.Long[] longArray18 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray18, (long) (-1));
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray20, 0, (long) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, (long) (-1), (int) (byte) 1);
        long[] longArray27 = new long[] {};
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(longArray27, (long) (short) 1);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.addAll(longArray20, longArray27);
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray51 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray51, (long) (-1));
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray53, (long) '#');
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.addAll(longArray44, longArray53);
        long[] longArray59 = new long[] { (byte) -1, 10 };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.clone(longArray59);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray44, longArray59);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.addAll(longArray30, longArray59);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.subarray(longArray59, (int) '4', (int) '4');
        java.lang.Long[] longArray66 = org.apache.commons.lang3.ArrayUtils.toObject(longArray65);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray2, (java.lang.Object) longArray65);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{10.0}" + "'", str8, "{10.0}");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = org.apache.commons.lang3.ArrayUtils.clone(typeArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 10.0d };
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3, (double) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) typeArray1, (java.lang.Object) doubleArray6);
        boolean[] booleanArray13 = new boolean[] { true, true, false, true };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, true, (int) '4');
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, true, (int) (byte) 1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, true);
        boolean[] booleanArray28 = new boolean[] { true, true, false, true };
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray28, true, (int) '4');
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray28);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray28, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray28);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray35, true);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray35, (int) (byte) 0, (int) '4');
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray41, true);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) typeArray1, (java.lang.Object) true);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray9, 6, 3);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray25 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray25);
        short[] shortArray31 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray31, (short) (byte) 0, 2);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray25, shortArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray31);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray31, 3, (int) '4');
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray39, (short) 100, (int) (byte) 1);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray39);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.clone(shortArray39);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray13, (byte) 0);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray13, (byte) 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray8, (java.lang.Object) byteArray17, 4);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.remove(byteArray17, 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1, 0]");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1, (double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray11, (double) '#');
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, (int) (short) 1, (double) 1.0f);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) (short) -1);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        java.lang.Double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray19);
        java.lang.Object[] objArray21 = null;
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28, (double) '#');
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.add(doubleArray30, (int) (short) 1, (double) 1.0f);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, (double) (short) -1);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray21, (java.lang.Object) doubleArray36);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray36, 10.0d, (int) '4');
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray36, (double) 6, (int) '#');
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray36);
        double[] doubleArray46 = new double[] { (byte) 10 };
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray46);
        double[] doubleArray53 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray53, (double) (short) -1);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray46, doubleArray53);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray36, doubleArray53);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray59);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray60, (double) '#', 2);
        double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray36, doubleArray60);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray36);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray65, (double) 100L, (int) ' ');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.lang.Object[] objArray0 = null;
        double[] doubleArray3 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray3);
        double[] doubleArray6 = new double[] { (byte) 10 };
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray6);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray6, (double) 2);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 100L, (double) 4);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray6, (double) (byte) 100);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray15, (double) 0.0f);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) doubleArray15, (int) (short) 1);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray15);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray15, (double) '4', (double) 6);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray18, (float) 1L, 5);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray17, (long) (short) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray8, (long) (-1));
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray16, (long) (-1));
        java.lang.Short[] shortArray25 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray25);
        java.lang.Long[] longArray33 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray33, (long) (-1));
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.clone(longArray35);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray35);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.add(longArray35, (long) 5);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray35);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray26, (java.lang.Object) longArray35);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray35, (long) (short) 1);
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[1, 1, 10, -1, 10, -1, 5]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[10, 10, 1, 1, -1, 10, -1, 10, 1, 1]");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        float[][][][][][] floatArray0 = new float[][][][][][] {};
        char[] charArray2 = new char[] { ' ' };
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.add(charArray2, '#');
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray2, '#', (int) (short) 10);
        char[] charArray9 = new char[] { '#' };
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray11, 'a');
        char[] charArray20 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray20, '4', (int) (byte) 100);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray20, '#', 0);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray20);
        char[] charArray29 = new char[] { '#' };
        java.lang.Character[] charArray30 = org.apache.commons.lang3.ArrayUtils.toObject(charArray29);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.clone(charArray29);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray31, 'a');
        char[] charArray35 = new char[] { '#' };
        java.lang.Character[] charArray36 = org.apache.commons.lang3.ArrayUtils.toObject(charArray35);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.clone(charArray35);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray31, charArray35);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.addAll(charArray27, charArray35);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.addAll(charArray2, charArray35);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray35, '#', 6);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.add(charArray35, ' ');
        float[][][][][][] floatArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (java.lang.Object) charArray45);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[ ]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , #]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, a]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , #]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#,  ]");
        org.junit.Assert.assertNotNull(floatArray46);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray19 = new boolean[] { true, true, false, true };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray19, true, (int) '4');
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray19, true, (int) (byte) 1);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray19);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = org.apache.commons.lang3.ArrayUtils.clone(typeArray0);
        float[] floatArray2 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 10L);
        float[] floatArray6 = new float[] { (byte) -1 };
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray6);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray1, (java.lang.Object) floatArray4);
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray4);
        java.lang.reflect.Type[][] typeArray10 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray11 = org.apache.commons.lang3.ArrayUtils.clone(typeArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray11, (java.lang.Object) floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, (-1), (int) (short) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray9, (java.lang.Object) floatArray21, 6);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) (-1L));
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        short[] shortArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(shortArray0, (short) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.lang.Float[] floatArray4 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray9 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray24 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[][] floatArray30 = new java.lang.Float[][] { floatArray4, floatArray9, floatArray14, floatArray19, floatArray24, floatArray29 };
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[][] objArray33 = new java.lang.Object[][] { objArray31, objArray32 };
        java.lang.Object obj34 = null;
        java.lang.Object[][] objArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray33, obj34);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray33, (java.lang.Object[]) charArray38);
        java.lang.Float[][] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray30, (java.lang.Object) charArray38);
        java.lang.Object[] objArray41 = null;
        float[] floatArray42 = new float[] {};
        float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.add(floatArray42, (float) 10L);
        float[] floatArray46 = new float[] { (byte) -1 };
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray44, floatArray46);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray47, (float) (-1L));
        float[] floatArray50 = new float[] {};
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.add(floatArray50, (float) 10L);
        float[] floatArray54 = new float[] { (byte) -1 };
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray52, floatArray54);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray47, floatArray52);
        java.lang.Float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray52);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray41, (java.lang.Object) floatArray57);
        float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray57, (float) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray61 = org.apache.commons.lang3.ArrayUtils.add((java.lang.Object[]) floatArray30, (java.lang.Object) floatArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: [F");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[10.0]");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 1, 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        boolean[] booleanArray37 = new boolean[] { true, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray37, false);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray37, true, (int) (byte) 100);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray37);
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray32);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.add(booleanArray44, (int) ' ', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 8");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, true, true, true, false, false, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true, true, false, true, true, true, false, false]");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(shortArray9, (short) 1);
        short[] shortArray20 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray20);
        short[] shortArray26 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) (byte) 0, 2);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray20, shortArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) -1, (int) (byte) 1);
        short[] shortArray35 = null;
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray26);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.clone(shortArray9);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray38, (short) 0, (-1));
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray1);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '4', (int) (byte) -1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray11, false);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, true);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, true);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, true);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4, 0);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4, 2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 2, -1, 2]");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = org.apache.commons.lang3.ArrayUtils.clone(typeArray0);
        float[] floatArray2 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 10L);
        float[] floatArray6 = new float[] { (byte) -1 };
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray6);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray1, (java.lang.Object) floatArray4);
        java.lang.Object[][] objArray11 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.Object[][]) typeArray1, 100, 1);
        java.lang.reflect.Type[][] typeArray12 = org.apache.commons.lang3.ArrayUtils.toArray(typeArray1);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(typeArray12);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (float) 1L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0]");
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        java.lang.Long[] longArray57 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray57, (long) (-1));
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray50, longArray59);
        java.lang.Byte[] byteArray63 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray63);
        java.lang.Long[] longArray71 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray71, (long) (-1));
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray63, (java.lang.Object) longArray73, (int) (short) -1);
        long[] longArray76 = org.apache.commons.lang3.ArrayUtils.addAll(longArray50, longArray73);
        java.lang.Long[] longArray77 = org.apache.commons.lang3.ArrayUtils.toObject(longArray73);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray77);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray1, (int) (byte) -1, (int) (byte) 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.io.Serializable[] serializableArray17 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) wildcardClassArray14, (int) '4', (int) (byte) 100);
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (float) 10L);
        float[] floatArray21 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray21);
        float[] floatArray23 = null;
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray21, floatArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) (-1L), (int) '4');
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray14, (java.lang.Object) floatArray21);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (int) (short) 100, (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) -1, (int) (short) 0);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray10, 2, (int) (byte) -1);
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray10);
        java.lang.Byte[] byteArray24 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray24);
        java.lang.Long[] longArray32 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray32, (long) (-1));
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray24, (java.lang.Object) longArray34, (int) (short) -1);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray24, (byte) 1);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) shortArray10, (java.lang.Object) byteArray39);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray10, (int) (byte) -1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1, 10, 100, 0]");
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 100);
        java.lang.Byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray18);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 100, 100]");
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(charArray1, '4');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray7 = org.apache.commons.lang3.ArrayUtils.remove(charArray1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 100.0f);
        java.lang.Double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray1);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (byte) -1, (double) (short) 100);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.add(doubleArray1, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 100.0]");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray7, (int) (short) 1, (double) (short) 100);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        java.lang.Long[] longArray28 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray29, (long) 3);
        java.lang.Long[] longArray38 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray38, (long) (-1));
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray40, (long) '#');
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.subarray(longArray40, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray52 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray52, (long) (-1));
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray54, (long) '#');
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.addAll(longArray45, longArray54);
        long[] longArray58 = org.apache.commons.lang3.ArrayUtils.addAll(longArray29, longArray45);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray58);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray19, longArray58);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray58);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray58, 0L);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[100, 100, -1, -1, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[0, 1, 52, -1, 100, 100, -1, -1, 100, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray18, (byte) 1);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1, 100, 100]");
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        int[] intArray6 = new int[] { (byte) -1, (short) 1, 3, 0, 8, 1 };
        int[] intArray13 = new int[] { (byte) -1, (short) 1, 3, 0, 8, 1 };
        int[] intArray20 = new int[] { (byte) -1, (short) 1, 3, 0, 8, 1 };
        int[][] intArray21 = new int[][] { intArray6, intArray13, intArray20 };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray21);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 3, 0, 8, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 3, 0, 8, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 3, 0, 8, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 10.0f);
        java.util.Map<java.lang.Object, java.lang.Object> objMap12 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) floatArray0);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(objMap12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray5, "{100,52}");
        java.lang.Object[] objArray9 = null;
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray14 = new float[] { (byte) -1 };
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray15, (float) (-1L));
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (float) 10L);
        float[] floatArray22 = new float[] { (byte) -1 };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray20);
        java.lang.Float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray9, (java.lang.Object) floatArray25);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray25);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray25, (float) (-1L));
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray25, 0.0f);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.clone(floatArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable[] serializableArray33 = org.apache.commons.lang3.ArrayUtils.add((java.io.Serializable[]) intArray5, (java.io.Serializable) floatArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: [F");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{0,2,10,0,-1}" + "'", str8, "{0,2,10,0,-1}");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (-1), (-1));
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14, (double) '#');
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) int7, (java.lang.Object) doubleArray18);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 0, 0, (double) (short) 100);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 3, (int) '4', (double) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray1 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray1);
        boolean[] booleanArray9 = new boolean[] { true, true, false, false };
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray9, false);
        boolean[] booleanArray16 = new boolean[] { true, true, false, true };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, true, (int) '4');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray9, booleanArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray16, true, (int) 'a');
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, true, (int) '4');
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray16);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.add(booleanArray27, 4, false);
        java.lang.Boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray31);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.add(shortArray7, (short) 100);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray7, 4, 3);
        java.lang.Short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray7);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray7, (short) (byte) 10, 3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, 100, -1, 1, 0, 0, 100]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        byte[] byteArray0 = null;
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray0, 3, 3);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 0);
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 100 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray27, (byte) 10, 0);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray22, byteArray27);
        byte[] byteArray32 = null;
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray31, byteArray32);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.remove(byteArray31, 2);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.clone(byteArray35);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.add(byteArray36, (byte) 0);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray17, byteArray36);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 10);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray17, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, (int) (short) -1, (int) '#');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, 'a');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, 'a');
        char[] charArray16 = new char[] { ' ' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray16, '#');
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Object[][] objArray21 = new java.lang.Object[][] { objArray19, objArray20 };
        java.lang.Object obj22 = null;
        java.lang.Object[][] objArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray21, obj22);
        char[] charArray25 = new char[] { '#' };
        java.lang.Character[] charArray26 = org.apache.commons.lang3.ArrayUtils.toObject(charArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray21, (java.lang.Object[]) charArray26);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray26, ' ');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray18, charArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray12, charArray29);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ ]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ ]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ ]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , #]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, (float) 0, (int) (short) 10);
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray11, (float) 1L);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray19 = new float[] { (byte) -1 };
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray20, (float) (-1L));
        float[] floatArray23 = new float[] {};
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, (float) 10L);
        float[] floatArray27 = new float[] { (byte) -1 };
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray25, floatArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray25, (float) 1);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray20, floatArray25);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray25);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray32, (float) 1L);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.clone(floatArray32);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray35);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.remove(floatArray6, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray19, 0, (long) 1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray19, (long) (-1), (int) (byte) 1);
        long[] longArray26 = new long[] {};
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(longArray26, (long) (short) 1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray19, longArray26);
        java.lang.Long[] longArray36 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray36, (long) (-1));
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray38, (long) '#');
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.subarray(longArray38, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray50 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray50, (long) (-1));
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray52, (long) '#');
        long[] longArray55 = org.apache.commons.lang3.ArrayUtils.addAll(longArray43, longArray52);
        long[] longArray58 = new long[] { (byte) -1, 10 };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray43, longArray58);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.addAll(longArray29, longArray58);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray58, (long) ' ');
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray58);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.add(longArray64, 6, (long) 3);
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.subarray(longArray64, (int) 'a', (int) 'a');
        org.apache.commons.lang3.ArrayUtils.reverse(longArray70);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[-1, 10, -1, 10, 1, 1, 3, -1, 10]");
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[]");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray5);
        java.lang.reflect.Type[][] typeArray12 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray13 = org.apache.commons.lang3.ArrayUtils.clone(typeArray12);
        float[] floatArray14 = new float[] {};
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray14, (float) 10L);
        float[] floatArray18 = new float[] { (byte) -1 };
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray18);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray13, (java.lang.Object) floatArray16);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray16);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 3, (int) '4');
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray25, (double) '#');
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray27, (int) (short) 1, (double) 1.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray35);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray34, (java.lang.Object) floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray35, (float) '#');
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.remove(floatArray35, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0]");
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.clone(longArray27);
        long[] longArray31 = new long[] { (byte) -1, 10 };
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.clone(longArray31);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray32);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray27, longArray34);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) ' ', 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray27);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray27);
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray27, (long) 7);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, 10, -1, 10, 1, 1, 1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[1, 1, 10, -1, 10, -1]");
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) -1, (int) (short) 0);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(shortArray10, (short) (byte) 0);
        int int20 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) shortArray10);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = org.apache.commons.lang3.ArrayUtils.clone(typeArray0);
        float[] floatArray2 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 10L);
        float[] floatArray6 = new float[] { (byte) -1 };
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray6);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) typeArray1, (java.lang.Object) floatArray4);
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray4);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.remove(floatArray13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0]");
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) 5);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) 4);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15);
        double[] doubleArray24 = null;
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray23, doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (-1L));
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray11 = new float[] {};
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) 10L);
        float[] floatArray15 = new float[] { (byte) -1 };
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray13, floatArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, 0.0f, (int) ' ');
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) (short) 0, (int) 'a');
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray20);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) -1, (int) (short) 0);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(shortArray10, (short) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray10);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) ' ', (-1));
        org.apache.commons.lang3.ArrayUtils.reverse(longArray8);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1, ' ');
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, 'a', (int) (byte) 100);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, (int) (short) 0, (byte) 1);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, (byte) 10);
        java.lang.Byte[] byteArray22 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray22);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray14, byteArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) 10);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray26);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100, 1, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 100, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        int[] intArray17 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray23 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23);
        int[] intArray30 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray24, intArray30);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.addAll(intArray17, intArray30);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray17);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray9, (java.lang.Object) intArray17);
        java.lang.Short[] shortArray41 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41, (short) 1);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.add(shortArray45, 1, (short) 0);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray48, (short) 10, 8);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) booleanArray9, (java.lang.Object) 8);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[10, 0, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.lang.Short[] shortArray2 = new java.lang.Short[] { (short) -1, (short) 0 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2, (short) (byte) 10);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(shortArray5, (short) (byte) -1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray5);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray5, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        boolean[] booleanArray20 = new boolean[] { true, true, false, true };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray20, true, (int) '4');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray20);
        java.lang.Boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray20);
        boolean[] booleanArray26 = null;
        boolean[] booleanArray27 = new boolean[] {};
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray26, booleanArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray27);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray20, false);
        boolean[] booleanArray39 = new boolean[] { true, true, false, false };
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray39, false);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray39, true);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray39, true);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.add(booleanArray39, 0, true);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray48, true, 6);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray48, true);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray20, booleanArray48);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray14, (java.lang.Object) booleanArray48, 0);
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray48, false, 100);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) (byte) 1, (-1));
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray18, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray18);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray18, true, (int) (short) 10);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 100);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.clone(shortArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[0, 100, 10, 1, 100]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) -1);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 0, 'a');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '#');
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        long[] longArray5 = new long[] { (-1L), '4', (byte) 10, 0L, '4' };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray5, (long) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray5);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray5, (-1L));
        long[] longArray15 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.clone(longArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray5, longArray16);
        long[] longArray18 = null;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray16, longArray18);
        long[] longArray20 = null;
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[52, 0, 10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[0, 1, 52, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(longArray21);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        int[] intArray4 = new int[] { (byte) 0 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 0);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(intArray4, (int) (short) 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray0, (java.lang.Object) intArray4);
        int[] intArray15 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray21 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray21);
        int[] intArray28 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray22, intArray28);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray15, intArray28);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.subarray(intArray15, (int) (short) -1, 1);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.subarray(intArray15, (-1), 0);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray15);
        java.lang.Integer[] intArray38 = org.apache.commons.lang3.ArrayUtils.toObject(intArray15);
        boolean[] booleanArray43 = new boolean[] { true, true, false, false };
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, false);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, true);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray43, true);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.add(booleanArray43, 0, true);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray52, true, 6);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray52, false);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray52, false);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray52, booleanArray60);
        java.lang.Boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray60);
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray38, (java.lang.Object[]) booleanArray62);
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62, false);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[]");
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, 3, 2);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, ' ');
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray10, 'a');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.remove(charArray10, 0);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray10);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, 'a');
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(charArray20);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray3, (int) (byte) 1, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#, a]");
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        java.util.Map<java.lang.Object, java.lang.Object> objMap3 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(objMap3);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray8);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (long) 5);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray12);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, 1, 10, -1, 10, -1, 5]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) '#');
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray54, (int) (short) 1, (double) 1.0f);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray57, (double) (short) -1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray57);
        java.lang.Double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray60);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int63 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray62);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray61, (java.lang.Object) floatArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray45, (java.lang.Object[]) doubleArray61);
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61, (double) (short) 100);
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray67, (double) (byte) 1, (double) (byte) 100);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray67, (double) 100, (double) (-1.0f));
        int int77 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray67, (double) 1L, 4, (double) (short) 100);
        int int80 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray67, 100.0d, 0.0d);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray3, (int) (short) 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray20, (int) (byte) -1);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray23, (int) (short) 1, (int) (short) 10);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray23);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 52]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 52]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray5, 7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray5, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = org.apache.commons.lang3.ArrayUtils.add(intArray5, 6, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Object[][] objArray6 = new java.lang.Object[][] { objArray4, objArray5 };
        java.lang.Object obj7 = null;
        java.lang.Object[][] objArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray6, obj7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray6, (java.lang.Object[]) charArray11);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray11, ' ');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray14);
        char[] charArray17 = new char[] { '#' };
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.add(charArray19, 'a');
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray15, charArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray15, '4', (-1));
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray15, 'a');
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.add(charArray29, ' ');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.subarray(charArray29, 0, (-1));
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , #, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, a]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #, #, #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " ## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " ## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, #,  ]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray22);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray22);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray22, (long) (short) 10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray5, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray5);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray5, (-1));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0]");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray16 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) (-1));
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, (long) (short) -1, 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray18);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray8);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (-1), 8);
        long[] longArray33 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.add(longArray33, (long) (byte) 100);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray36);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 100);
        java.lang.String str18 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray13, "{10.0}");
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, 10, (int) (short) 100);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) (short) 100, "false");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{100,100,1,0,0,-1}" + "'", str18, "{100,100,1,0,0,-1}");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100, 3);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100, 3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 0);
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        short[] shortArray13 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray13);
        short[] shortArray19 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray19, (short) (byte) 0, 2);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray13, shortArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray13, (short) (byte) 0);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.clone(shortArray13);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.add(shortArray13, (short) 100);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray9, (java.lang.Object) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap30 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) intArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '0', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 10, 100, 100]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        int[] intArray4 = new int[] { (byte) 0 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 0);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray2, (java.lang.Object) intArray4);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray2);
        char[] charArray14 = new char[] { '#' };
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray14);
        int[] intArray17 = new int[] { (byte) 0 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray17, 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray17, 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, (int) (short) 100);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray15, (java.lang.Object) intArray17);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, '4');
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray2, (java.lang.Object) charArray15, 3);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray20 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray14, intArray20);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) '4');
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray14, 10);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray25);
        int[] intArray28 = new int[] { (byte) 0 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray28, 0);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.add(intArray28, 0);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray28, (int) (short) 0);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.subarray(intArray28, 1, 10);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray25, intArray37);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.add(intArray38, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 2, 10, 0, -1, 10, 1]");
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        boolean[] booleanArray37 = new boolean[] { true, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray37, false);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray37, true, (int) (byte) 100);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray37);
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray32);
        boolean[] booleanArray45 = null;
        boolean[] booleanArray50 = new boolean[] { true, true, false, true };
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray50, true, (int) '4');
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray50);
        java.lang.Boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray50);
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray55);
        java.lang.Boolean[] booleanArray62 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62);
        java.lang.Boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray63);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray63, false);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.add(booleanArray63, false);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray56, booleanArray63);
        boolean[] booleanArray74 = new boolean[] { true, true, false, true };
        int int77 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray74, true, (int) '4');
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray74);
        boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray74, false);
        boolean[] booleanArray81 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray74);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray81, true);
        boolean[] booleanArray85 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray81, false);
        boolean[] booleanArray87 = org.apache.commons.lang3.ArrayUtils.add(booleanArray81, true);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray63, booleanArray81);
        boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray45, booleanArray81);
        boolean[] booleanArray90 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray45);
        boolean[] booleanArray92 = org.apache.commons.lang3.ArrayUtils.add(booleanArray90, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, true, true, true, false, false, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[true, true, false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true, true, false, true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray81), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray87), "[true, true, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray89), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray90), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray92), "[true, true, false, true, true, true, false, false, false]");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        short[] shortArray5 = new short[] { (byte) -1, (byte) -1, (byte) 100, (byte) 0, (short) 100 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.add(shortArray5, (short) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray5, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, -1, 100, 0, 100]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[-1, -1, 100, 0, 100, 0]");
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray9, (int) 'a');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 10, 0, -1, 97]");
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray3, 2);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.add(intArray3, (-1));
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray3, (int) (byte) 10);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray24, (int) (short) 1, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10, 52, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10, 52, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, 10);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (short) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 7, 1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ', (double) (-1.0f));
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) 10L);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) 4, (int) (short) 100, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray16, (float) '#');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray20, (int) (byte) -1, (int) (short) 1);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray23, (float) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, 4, (float) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) -1);
        java.lang.Long[] longArray12 = new java.lang.Long[] {};
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray12);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray18, (byte) 0);
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, 0);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray18, byteArray23);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray12, (java.lang.Object) byteArray27);
        java.lang.Byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray27);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray27, (byte) 1);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.clone(byteArray31);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray32);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray32, (byte) 1);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.add(byteArray32, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 0, -1, -1, 0, 0, 100, 100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 0, 100, 100, 10]");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, (int) (byte) -1);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        int[] intArray64 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray70 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray70);
        int[] intArray77 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray71, intArray77);
        int[] intArray79 = org.apache.commons.lang3.ArrayUtils.addAll(intArray64, intArray77);
        int[] intArray81 = org.apache.commons.lang3.ArrayUtils.remove(intArray64, (int) (short) 1);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray81, (int) (byte) -1);
        int[] intArray84 = org.apache.commons.lang3.ArrayUtils.clone(intArray81);
        int[] intArray85 = org.apache.commons.lang3.ArrayUtils.addAll(intArray60, intArray84);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.contains(intArray84, (-1));
        java.lang.Object obj88 = null;
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (-1), obj88);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[100, 52]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 100, 52]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray4);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray8);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, '#');
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(charArray13);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, 3, 2);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, ' ');
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray10, 'a');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.remove(charArray10, 0);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray10);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray6, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray21 = org.apache.commons.lang3.ArrayUtils.remove(charArray6, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a]");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        double[] doubleArray16 = null;
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) 10L, 4);
        java.lang.Double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray15, (int) '#', 0);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray15, (int) (byte) -1, 8);
        java.lang.Byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray15);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        java.lang.Long[] longArray11 = new java.lang.Long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray11);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 0);
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray22, (byte) 10, 0);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray17, byteArray22);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray11, (java.lang.Object) byteArray26);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray32, (byte) 0);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray32, (byte) 1);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray26, byteArray32);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray26);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray26, (byte) 10);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.clone(byteArray26);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray26);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray42, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 100, 100, 1, 100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = new double[] { (byte) 10 };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        double[] doubleArray20 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (short) -1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray13, doubleArray20);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray13, (int) (byte) -1, (int) (byte) 1);
        double[] doubleArray28 = new double[] { (byte) 10 };
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray29);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) ' ');
        double[] doubleArray34 = new double[] { (byte) 10 };
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray29, doubleArray34);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray26, doubleArray29);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray29);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray11, (double) '#');
        double[] doubleArray42 = new double[] { (byte) 10 };
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray42);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray43);
        java.lang.Double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray44);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray45);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray46, (int) '4', (int) (short) 1);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray49, (double) 'a');
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray40, doubleArray51);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray40, 0);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[52.0, -1.0, -1.0, 1.0, 100.0]");
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) 5);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) 4);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray22, (double) 100L);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray22);
        java.lang.Class<?> wildcardClass26 = doubleArray22.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray10, false, (int) (short) 10);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ', 2);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, 'a', (int) (short) 10);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, 'a');
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray3, '#');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, 3, 2);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, ' ');
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray10, 'a');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.remove(charArray10, 0);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray10);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, 'a');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray19, 'a');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.subarray(charArray21, 0, 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 1);
        int[] intArray22 = new int[] { (byte) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray22, 0);
        java.lang.Integer[] intArray25 = org.apache.commons.lang3.ArrayUtils.toObject(intArray22);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.addAll(intArray16, intArray22);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray16);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, -1, -1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (short) 0);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, (long) 'a');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray16);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, 0.0d, (double) (-1.0f));
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray16, 3, (int) (short) -1);
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray16);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray19 = new boolean[] { true, true, false, true };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray19, true, (int) '4');
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray19, true, (int) (byte) 1);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray19);
        java.lang.Boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Long[] longArray16 = new java.lang.Long[] {};
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 0);
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 100 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray27, (byte) 10, 0);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray22, byteArray27);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray16, (java.lang.Object) byteArray31);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray37, (byte) 0);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray37, (byte) 1);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray31, byteArray37);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray37);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.clone(byteArray37);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray44);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 0, 0, 1, -1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray12, (byte) -1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) (byte) 1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100, 1]");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 10.0]");
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray22);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray22);
        boolean[] booleanArray32 = new boolean[] { true, true, false, true };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true, (int) '4');
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray32);
        java.lang.Boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray32);
        boolean[] booleanArray38 = null;
        boolean[] booleanArray39 = new boolean[] {};
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray39, true);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray38, booleanArray39);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray39);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray39);
        java.lang.Boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray39);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) longArray27, (java.lang.Object[]) booleanArray45);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) longArray27);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, 1, (short) 0);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray10, 4, (int) (short) 1);
        short[] shortArray20 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray20);
        short[] shortArray26 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) (byte) 0, 2);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray20, shortArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) -1, (int) (byte) 1);
        short[] shortArray35 = null;
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray36, (short) 0, 0);
        short[] shortArray44 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray44);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.remove(shortArray44, 0);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray36, shortArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray16, shortArray47);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 0, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        java.lang.Long[][] longArray1 = new java.lang.Long[][] { longArray0 };
        java.lang.Long[][][] longArray2 = new java.lang.Long[][][] { longArray1 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Long[][][] longArray4 = org.apache.commons.lang3.ArrayUtils.remove(longArray2, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) (short) 1, 7);
        java.lang.Long[] longArray13 = new java.lang.Long[] {};
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 0);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray24, (byte) 10, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray19, byteArray24);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray13, (java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 0);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray28, byteArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray12, byteArray34);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 100.0f);
        java.lang.Double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray1);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 1L);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) (short) 0, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 100L, 0L, 100L, 100L, 1L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) ' ');
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, 1L);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) (short) 100);
        java.lang.Object[] objArray12 = null;
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19, (double) '#');
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray21, (int) (short) 1, (double) 1.0f);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray24, (double) (short) -1);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray12, (java.lang.Object) doubleArray27);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray27, 10.0d, (int) '4');
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray27, (double) 6, (int) '#');
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray27, (double) 100L);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray27, (int) (short) 0);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray5, (java.lang.Object) (short) 0);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[100, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[100, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[100, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        short[] shortArray18 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray18);
        short[] shortArray24 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray24, (short) (byte) 0, 2);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray18, shortArray24);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) 10);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) wildcardClassArray14, (java.lang.Object) shortArray24);
        char[] charArray34 = new char[] { '#' };
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.add(charArray36, 'a');
        char[] charArray45 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray45, '4', (int) (byte) 100);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray45, '#', 0);
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray45);
        java.lang.Character[] charArray53 = org.apache.commons.lang3.ArrayUtils.toObject(charArray52);
        float[] floatArray54 = new float[] {};
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.add(floatArray54, (float) 10L);
        float[] floatArray58 = new float[] { (byte) -1 };
        float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray56, floatArray58);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray56, 0.0f, (int) ' ');
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.clone(floatArray56);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray52, (java.lang.Object) floatArray63);
        java.lang.Class<?> wildcardClass65 = floatArray63.getClass();
        java.lang.Class<?>[] wildcardClassArray66 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray14, (int) (byte) 0, wildcardClass65);
        long[] longArray71 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray72 = org.apache.commons.lang3.ArrayUtils.clone(longArray71);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.add(longArray71, (long) (byte) 100);
        long[] longArray75 = org.apache.commons.lang3.ArrayUtils.clone(longArray71);
        java.lang.Long[] longArray76 = org.apache.commons.lang3.ArrayUtils.toObject(longArray75);
        long[] longArray78 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray76, (long) 2);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray78);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray14, (java.lang.Object) longArray78);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray83 = org.apache.commons.lang3.ArrayUtils.add(longArray78, (-1), (long) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, a]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClassArray66);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[-1, 52, 1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1, (double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray11, (double) '#');
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, (int) (short) 1, (double) 1.0f);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) (short) -1);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        java.lang.Double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray19);
        java.lang.Object[] objArray21 = null;
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28, (double) '#');
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.add(doubleArray30, (int) (short) 1, (double) 1.0f);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, (double) (short) -1);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray21, (java.lang.Object) doubleArray36);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray36, 10.0d, (int) '4');
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray36, (double) 6, (int) '#');
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray36);
        double[] doubleArray46 = new double[] { (byte) 10 };
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray46);
        double[] doubleArray53 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray53, (double) (short) -1);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray46, doubleArray53);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray36, doubleArray53);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray59);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray60, (double) '#', 2);
        double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray36, doubleArray60);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray36);
        java.lang.Double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray65);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 4, 4);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) '#');
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray12 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray12);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray6);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, 0, (int) (byte) 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray19, 1);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, (int) ' ', 5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        java.lang.Long[] longArray57 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray57, (long) (-1));
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray50, longArray59);
        short[] shortArray66 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray71 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int74 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray71, (short) (byte) 0, 2);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray66, shortArray71);
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray71, (short) -1, (int) (short) 0);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray71, 2, (int) (byte) -1);
        java.lang.Short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray71);
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) boolean60, (java.lang.Object) shortArray82);
        short[] shortArray84 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray82);
        int int87 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray84, (short) (byte) -1, (int) (byte) -1);
        short[] shortArray88 = org.apache.commons.lang3.ArrayUtils.clone(shortArray84);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[]");
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(shortArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray88), "[1, 10, 100, 0]");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(charArray7, 'a');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, 7, 100);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray18, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray20);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(byteArray20, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100, 1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        long[] longArray0 = null;
        java.lang.Byte[] byteArray3 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3);
        java.lang.Long[] longArray11 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray11, (long) (-1));
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray3, (java.lang.Object) longArray13, (int) (short) -1);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray13, 10L, (int) (byte) 10);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray13, (int) (short) 100, (int) 'a');
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray21);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.clone(longArray22);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        java.lang.Short[] shortArray12 = new java.lang.Short[] { (short) -1, (short) 0 };
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) (byte) 10);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(shortArray15, (short) (byte) -1);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, (int) (byte) -1);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 2);
        java.lang.Integer[] intArray61 = new java.lang.Integer[] {};
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray61, (int) (byte) 10);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray60, intArray63);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 2]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray5 = new float[] { (byte) -1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray11);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) floatArray16);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) (-1L));
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, 0.0f);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray22, (float) (-1L), (int) '4');
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.clone(floatArray22);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.add(floatArray26, (float) 6);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, 6.0]");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        short[] shortArray18 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray18);
        short[] shortArray24 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray24, (short) (byte) 0, 2);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray18, shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) -1, (int) (byte) 1);
        short[] shortArray33 = null;
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray24);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) -1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray38, (short) 1);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray38, (int) (short) 1, (int) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[0, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[]");
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray8 = new float[] { (byte) -1 };
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (-1L));
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray14);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) (short) 100);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray21, 2, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray21);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray21, (float) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) -1);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (-1));
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 2);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100, 3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 0);
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, 2, 10);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray13, (byte) 10, 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray13, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray26 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray26);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray32);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) (byte) 0);
        short[] shortArray43 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray43, (short) (byte) 0, 2);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray43, (short) 100);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray48);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.clone(shortArray26);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray26, (short) (byte) -1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray52);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray52, (short) (byte) 1);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.add(shortArray55, (short) (byte) 1);
        java.lang.Short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray55);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(shortArray55, (short) 10);
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.add(shortArray55, (int) (short) 0, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[100, 100, 10, 100]");
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray27, '#', (int) (byte) 10);
        char[] charArray36 = new char[] { '#' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 'a');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ', 2);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.subarray(charArray38, (int) (short) -1, (-1));
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.addAll(charArray27, charArray49);
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.add(charArray49, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray52, 7, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a]");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray15);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 1);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.remove(byteArray20, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 100, 100]");
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, 0.0d, (int) (byte) -1, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray8);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, (int) (byte) 0, (int) ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, 0.0d, (double) (-1.0f));
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray16, 3, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.add(doubleArray16, (int) ' ', (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) (byte) 10);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.clone(shortArray19);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[0, 100, 10, 1]");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) (byte) 10);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 0, 0);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(shortArray23, (short) -1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[10, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(longArray8, 0L);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[0, 1, 52, -1]");
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Object[][] objArray6 = new java.lang.Object[][] { objArray4, objArray5 };
        java.lang.Object obj7 = null;
        java.lang.Object[][] objArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray6, obj7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray6, (java.lang.Object[]) charArray11);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray11, ' ');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray14);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) '4', 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , #, #]");
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) 10);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (byte) 10, 10);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 0);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 10, 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        byte[] byteArray30 = null;
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray30);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.remove(byteArray29, 2);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray29);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.add(byteArray29, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 100, 1, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 0, 1, 100, 100, 0]");
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray10, (byte) -1);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 0);
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray22, (byte) 10, 0);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray17, byteArray22);
        byte[] byteArray27 = null;
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray26, byteArray27);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.remove(byteArray26, 2);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.clone(byteArray26);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray31, (byte) 0, 1);
        java.lang.String str36 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray31, "hi!");
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray31);
        java.lang.Byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray38);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{-1,0,0,1,100,100}" + "'", str36, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 100, 100, 1, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 0, 1, 100, 100]");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray5 = new float[] { (byte) -1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray11);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) floatArray16);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) (-1L));
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, 0.0f);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.clone(floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray23, (float) (-1L), 0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) 2);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) 3);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, (int) (short) 100, (double) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 0, (double) (short) -1);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray11, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray11, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 10.0]");
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, 10, 0);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(floatArray19, (float) '4');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) 2);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.add(floatArray19, (float) ' ');
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[32.0]");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 100, (int) (short) 1);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray3, (-1), (int) '#');
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[100, 10, 100]");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        byte[] byteArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, false);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Byte[] byteArray21 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray15, (java.lang.Object) byteArray22, 2);
        java.lang.Byte[] byteArray28 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray28);
        boolean[] booleanArray34 = new boolean[] { true, true, false, true };
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray34, true, (int) '4');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray34, false);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray34);
        java.lang.Boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray28, (java.lang.Object) booleanArray41);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray22, (java.lang.Object) booleanArray41);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray41, false);
        java.lang.String str48 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) booleanArray41, "{-1,10,-1,10,1,1}");
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray41, false, (int) '4');
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray41, false);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray41, true);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray55, false);
        boolean[] booleanArray62 = new boolean[] { true, true, false, false };
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray62, false);
        boolean[] booleanArray69 = new boolean[] { true, true, false, true };
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray69, true, (int) '4');
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray62, booleanArray69);
        boolean[] booleanArray78 = new boolean[] { true, true, false, false };
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray78, false);
        boolean[] booleanArray85 = new boolean[] { true, true, false, true };
        int int88 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray85, true, (int) '4');
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray78, booleanArray85);
        boolean[] booleanArray90 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray69, booleanArray78);
        int int93 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray69, true, (int) (byte) 10);
        int int96 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray69, false, 10);
        boolean[] booleanArray97 = null;
        boolean[] booleanArray98 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray69, booleanArray97);
        boolean boolean99 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray55, booleanArray69);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 100]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{true,true,false,true}" + "'", str48, "{true,true,false,true}");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[true, false, true]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(booleanArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray90), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertNotNull(booleanArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray98), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray11, 3, (int) ' ');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray15);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.add(booleanArray15, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, false]");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) (byte) 1, (-1));
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray18, false);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray18, true, (int) '#');
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.add(booleanArray18, 0, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true]");
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(charArray1, '#');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 100L);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.remove(floatArray0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[100.0]");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 100.0d, 1.0d, 100.0d };
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray4, (double) (byte) 0);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.add(doubleArray6, 1, 0.0d);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) (short) 1, 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 0.0, 1.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 100L);
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3, (float) 1L);
        float[] floatArray7 = new float[] {};
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) 10L);
        float[] floatArray11 = new float[] { (byte) -1 };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) (-1L));
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray19 = new float[] { (byte) -1 };
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray17, (float) 1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray17);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray17);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray24, (float) 1L);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.clone(floatArray24);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray24);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray24, (float) 8);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[100.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) 0.0f);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray5, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray5);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.subarray(intArray5, 8, (int) (short) 1);
        java.lang.Integer[] intArray12 = org.apache.commons.lang3.ArrayUtils.toObject(intArray11);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) 1);
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray56);
        int int61 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray56, (short) (byte) -1, (int) 'a');
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.add(shortArray56, (short) (byte) 10);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[1, 10, 0, 10]");
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 3, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, 0.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Object[][] objArray6 = new java.lang.Object[][] { objArray4, objArray5 };
        java.lang.Object obj7 = null;
        java.lang.Object[][] objArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray6, obj7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray6, (java.lang.Object[]) charArray11);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray11, ' ');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray14);
        char[] charArray17 = new char[] { '#' };
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.add(charArray19, 'a');
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray15, charArray23);
        java.lang.Character[] charArray25 = org.apache.commons.lang3.ArrayUtils.toObject(charArray15);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , #, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, a]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #, #, #]");
        org.junit.Assert.assertNotNull(charArray25);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 1);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 1, 1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray33, (byte) 0);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(byteArray33, (byte) 100);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(byteArray33, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 100, 100, -1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray18 = new boolean[] {};
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray18, true);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray18);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray18, true, (int) (byte) 10);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray18);
        java.lang.Boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray18);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray26, false);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, ' ');
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray10, ' ', (int) (short) 100);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray10, 'a', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(charArray10, '4');
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = new double[] { (byte) 10 };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray16);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray23 = new double[] { (byte) 10 };
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray23);
        double[] doubleArray30 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, (double) (short) -1);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray23, doubleArray30);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray16, doubleArray30);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray13, doubleArray16);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) ' ', 100, (double) 3);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray16);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.add(doubleArray40, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray42, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0, 10.0]");
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 1.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray24 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray34 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray39 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[][] floatArray40 = new java.lang.Float[][] { floatArray14, floatArray19, floatArray24, floatArray29, floatArray34, floatArray39 };
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Object[][] objArray43 = new java.lang.Object[][] { objArray41, objArray42 };
        java.lang.Object obj44 = null;
        java.lang.Object[][] objArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray43, obj44);
        char[] charArray47 = new char[] { '#' };
        java.lang.Character[] charArray48 = org.apache.commons.lang3.ArrayUtils.toObject(charArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray43, (java.lang.Object[]) charArray48);
        java.lang.Float[][] floatArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray40, (java.lang.Object) charArray48);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray6, (java.lang.Object[]) floatArray40);
        java.lang.Float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray53);
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray53, (float) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Float[][] floatArray57 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, (int) (byte) -1, floatArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[]");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 5);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 1.0, -1.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        double[] doubleArray2 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        double[] doubleArray5 = new double[] { (byte) 10 };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 2);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 100L, (double) 4);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) (byte) 100);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, (double) 0.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) (-1L));
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 8, 3);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[][] byteArray15 = new byte[][] { byteArray4, byteArray9, byteArray14 };
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[][] byteArray31 = new byte[][] { byteArray20, byteArray25, byteArray30 };
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[][] byteArray47 = new byte[][] { byteArray36, byteArray41, byteArray46 };
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[][] byteArray63 = new byte[][] { byteArray52, byteArray57, byteArray62 };
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[][] byteArray79 = new byte[][] { byteArray68, byteArray73, byteArray78 };
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray89 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[] byteArray94 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 1 };
        byte[][] byteArray95 = new byte[][] { byteArray84, byteArray89, byteArray94 };
        byte[][][] byteArray96 = new byte[][][] { byteArray15, byteArray31, byteArray47, byteArray63, byteArray79, byteArray95 };
        boolean boolean97 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray96);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[0, 1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.toObject(charArray20);
        float[] floatArray22 = new float[] {};
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, (float) 10L);
        float[] floatArray26 = new float[] { (byte) -1 };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray26);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray24, 0.0f, (int) ' ');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray24);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray20, (java.lang.Object) floatArray31);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray20, '#');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) "{100,52}", (java.lang.Object) charArray20);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray20, 'a');
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.add(charArray20, '4');
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "##a4#  4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "##a4#  4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#, #, a, 4, #,  ,  , 4]");
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, false);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray10, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (int) (byte) 0, (float) 0L);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray9, 7, (int) (byte) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) ' ');
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9, (float) (byte) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray5, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray5);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.subarray(intArray5, 8, (int) (short) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray11, 6, 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, 1, (short) 0);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) (byte) -1, (int) '#');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(shortArray10, (short) 1);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 0, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray17);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray3, 2);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.remove(intArray20, 1);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray22, 2);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray24, (java.lang.Object) 10.0d);
        java.lang.Integer[] intArray27 = org.apache.commons.lang3.ArrayUtils.toObject(intArray24);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        int[] intArray4 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray10 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray10);
        int[] intArray17 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray11, intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray17);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray17, 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray0, (java.lang.Object) intArray17);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(intArray17, (int) (byte) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        int[] intArray12 = new int[] { (byte) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray12, 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, (int) (byte) 1, (int) ' ');
        int[] intArray21 = new int[] { (byte) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 10, 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0, 1);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray21);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray10, (java.lang.Object) intArray21);
        byte[] byteArray32 = null;
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray10, byteArray32);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 1);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray38, (byte) 1, 1);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray38);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray38);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 10);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray53, (byte) 1, 7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 1, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 100, 100, 1, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        int[] intArray4 = new int[] { (byte) 0 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 0);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray2, (java.lang.Object) intArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 2, 2);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray4);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.remove(shortArray8, (int) (short) 0);
        java.lang.Class<?>[] wildcardClassArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray15 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray15);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray15, shortArray21);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray32, (short) 100);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray11, (java.lang.Object) shortArray38);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray38, (short) (byte) 1);
        short[] shortArray45 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray45);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray45, shortArray51);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray45, (short) (byte) 0);
        short[] shortArray62 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray62, (short) (byte) 0, 2);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray62, (short) 100);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray45, shortArray67);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray38, shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray69);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray70);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray70);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[0, 10, 1, 0, 10, 1, 100, 10, 100, 0, 0, 1, -1, 100, 10]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 4, 4);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray17, (double) '#');
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, (int) (short) 1, (double) 1.0f);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray22, (double) (short) -1);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int28 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray27);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray26, (java.lang.Object) floatArray27);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray27, (float) '#');
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, (int) (short) 0, (float) (short) 10);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, 0.0f);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray34);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.clone(floatArray34);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[10.0]");
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray12 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18);
        int[] intArray25 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray19, intArray25);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray25);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, 2);
        int[] intArray33 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        int[] intArray46 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray46);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.remove(intArray33, (int) (short) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray50);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 0);
        java.lang.Integer[] intArray59 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray59);
        int[] intArray61 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray60);
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.add(intArray60, 3);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, -1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 2, -1, 2, 3]");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) -1, (int) (short) 0);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray10, 2, (int) (byte) -1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray10, (short) (byte) 100);
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray10);
        java.lang.Character[] charArray25 = new java.lang.Character[] { '4' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray25);
        java.lang.Character[] charArray27 = org.apache.commons.lang3.ArrayUtils.toObject(charArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray23, (java.lang.Object[]) charArray27);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Boolean[] booleanArray15 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray16);
        java.lang.Boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(booleanArray19);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray20 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray14, intArray20);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) '4');
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray14, 10);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray25);
        int[] intArray28 = new int[] { (byte) 0 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray28, 0);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.add(intArray28, 0);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray28, (int) (short) 0);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.subarray(intArray28, 1, 10);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray25, intArray37);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = org.apache.commons.lang3.ArrayUtils.add(intArray25, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 2, 10, 0, -1, 10]");
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) (-1.0f), (int) (short) 100);
        java.lang.Double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Long[] longArray50 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray50, (long) (-1));
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray52, (long) (short) -1, 10);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray52, (long) 10, 4);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray43, (java.lang.Object) 4, 6);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (-1.0f));
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (byte) 10);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray13, (float) 4, 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) (byte) 10);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 0, 0);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 1);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray29, (short) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[10, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 0);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        java.lang.Class<?>[] wildcardClassArray23 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray30 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray30, (long) (-1));
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.add(longArray32, 0, (long) 1);
        java.lang.Class<?> wildcardClass36 = longArray32.getClass();
        java.lang.Class<?>[] wildcardClassArray37 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray23, wildcardClass36);
        java.io.Serializable[] serializableArray40 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) wildcardClassArray37, (int) '4', (int) (byte) 100);
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, (float) 10L);
        float[] floatArray44 = new float[] {};
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray41, floatArray44);
        float[] floatArray46 = null;
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray44, floatArray46);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray44, (float) (-1L), (int) '4');
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray37, (java.lang.Object) floatArray44);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray44, (float) 'a', (int) (byte) 1);
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.clone(floatArray44);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) floatArray44);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100]");
        org.junit.Assert.assertNotNull(wildcardClassArray23);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClassArray37);
        org.junit.Assert.assertNotNull(serializableArray40);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) ' ', 100.0d);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 3, 0);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray16, 8, 8);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        float[] floatArray3 = new float[] { (byte) 0, 1, (short) -1 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, (float) 8, (-1));
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray3);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, 10, 0);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, 0.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        long[] longArray28 = new long[] { (byte) -1, 10 };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray28);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray28, (long) 7);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray28, (long) (short) 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray10, (double) 4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, false, 0);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.lang.Object[] objArray0 = null;
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) '#');
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, (int) (short) 1, (double) 1.0f);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) -1);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) doubleArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, 10.0d, (int) '4');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray15, (double) 6, (int) '#');
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray15, (double) 100L);
        double[] doubleArray27 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray27);
        double[] doubleArray30 = new double[] { (byte) 10 };
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray27, doubleArray30);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) 2);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray30, (double) 100L, (double) 4);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.add(doubleArray30, (double) (byte) 100);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.add(doubleArray39, (double) 0.0f);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray15, doubleArray41);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray41, (double) 5, (int) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100, 3);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0, 6);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) '#', (int) (byte) 10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, (double) 1L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        double[] doubleArray0 = null;
        short[] shortArray5 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray10 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray15 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray20 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray25 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray30 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray31 = new short[][] { shortArray5, shortArray10, shortArray15, shortArray20, shortArray25, shortArray30 };
        java.lang.Long[] longArray38 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray38, (long) (-1));
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray40, (long) '#');
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.subarray(longArray40, (int) '4', (int) (byte) 10);
        short[][] shortArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray31, (java.lang.Object) longArray45);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray53, (double) '#');
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.add(doubleArray55, (int) (short) 1, (double) 1.0f);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray58, (double) (short) -1);
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray58);
        java.lang.Double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray61);
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int64 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray63);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray62, (java.lang.Object) floatArray63);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray46, (java.lang.Object[]) doubleArray62);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray62, (double) (short) 100);
        char[] charArray70 = new char[] { '#' };
        java.lang.Character[] charArray71 = org.apache.commons.lang3.ArrayUtils.toObject(charArray70);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.clone(charArray70);
        char[] charArray74 = org.apache.commons.lang3.ArrayUtils.add(charArray72, 'a');
        char[] charArray76 = new char[] { '#' };
        java.lang.Character[] charArray77 = org.apache.commons.lang3.ArrayUtils.toObject(charArray76);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.clone(charArray76);
        char[] charArray79 = org.apache.commons.lang3.ArrayUtils.addAll(charArray72, charArray76);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray68, (java.lang.Object) charArray76);
        int int84 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray68, (double) 1, (int) '4', (double) 0);
        double[] doubleArray85 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray68);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray85, (double) (short) -1, (double) 8);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#, a]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 3, 6, (double) (short) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (short) 100, 4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#, 4]");
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        java.lang.Integer[] intArray4 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        int int6 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray8 = new char[] { '#' };
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray8);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray10, 'a');
        char[] charArray19 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, '4', (int) (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, '#', 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray19);
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray30, 'a');
        char[] charArray34 = new char[] { '#' };
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray34);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray26, charArray34);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray34);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray34, ' ');
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.add(charArray34, '4');
        char[] charArray45 = new char[] { '#' };
        java.lang.Character[] charArray46 = org.apache.commons.lang3.ArrayUtils.toObject(charArray45);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.clone(charArray45);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.add(charArray47, 'a');
        java.lang.Character[] charArray50 = org.apache.commons.lang3.ArrayUtils.toObject(charArray47);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray47, ' ');
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray47, ' ', 2);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray47, 'a', (int) (short) 10);
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.addAll(charArray43, charArray47);
        char[] charArray61 = org.apache.commons.lang3.ArrayUtils.remove(charArray43, 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#, a]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, 4, #]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[4]");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        java.lang.Long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.subarray(longArray4, (int) (short) 100, (int) 'a');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) (short) 1, (int) (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray11, (long) (byte) 0);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray17 = new boolean[] { true, true, false, false };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, false);
        boolean[] booleanArray24 = new boolean[] { true, true, false, true };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, true, (int) '4');
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray17, booleanArray24);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray17, (int) (byte) 1, (-1));
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray31, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable[] serializableArray35 = org.apache.commons.lang3.ArrayUtils.add((java.io.Serializable[]) booleanArray9, (java.io.Serializable) booleanArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: [Z");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[]");
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 100L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) (short) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        java.lang.Integer[][][][] intArray0 = new java.lang.Integer[][][][] {};
        java.lang.Integer[][][][] intArray1 = new java.lang.Integer[][][][] {};
        java.lang.Integer[][][][] intArray2 = new java.lang.Integer[][][][] {};
        java.lang.Integer[][][][] intArray3 = new java.lang.Integer[][][][] {};
        java.lang.Integer[][][][][] intArray4 = new java.lang.Integer[][][][][] { intArray0, intArray1, intArray2, intArray3 };
        java.lang.Integer[][][][][] intArray7 = org.apache.commons.lang3.ArrayUtils.subarray(intArray4, 8, (int) '4');
        boolean[] booleanArray12 = new boolean[] { true, true, false, false };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray12, false);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray12, true);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray12);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray12);
        java.lang.Integer[][][][][] intArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray4, (java.lang.Object) boolean18);
        java.io.Serializable[][] serializableArray22 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[][]) intArray4, 6, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(serializableArray22);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) 'a', (int) (short) -1);
        boolean[] booleanArray12 = new boolean[] { true, true, false, true };
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, true, (int) '4');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray12);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray12, false);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray12);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        boolean[] booleanArray25 = new boolean[] { true, true, false, false };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray25, false);
        boolean[] booleanArray32 = new boolean[] { true, true, false, true };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true, (int) '4');
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray25, booleanArray32);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, (int) 'a');
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true, (int) '4');
        java.lang.Boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray32);
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray19, booleanArray32);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray32);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.add(booleanArray32, 6, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[true, true, false, true]");
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.lang.Byte[][] byteArray0 = new java.lang.Byte[][] {};
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray18 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray24 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray30 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray31 = new java.lang.Byte[][] { byteArray6, byteArray12, byteArray18, byteArray24, byteArray30 };
        java.lang.Byte[][] byteArray32 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray31);
        java.lang.Byte[][] byteArray33 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray0);
        java.lang.Character[] charArray38 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray43 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray48 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray53 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray58 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray63 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[][] charArray64 = new java.lang.Character[][] { charArray38, charArray43, charArray48, charArray53, charArray58, charArray63 };
        java.lang.Character[][] charArray65 = org.apache.commons.lang3.ArrayUtils.toArray(charArray64);
        java.lang.Character[] charArray71 = new java.lang.Character[] { '4', ' ', 'a', 'a', '4' };
        java.lang.Character[][] charArray72 = org.apache.commons.lang3.ArrayUtils.add(charArray65, charArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[][] objArray73 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.Object[][]) byteArray33, (java.lang.Object[][]) charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot store [Ljava.lang.Character; in an array of [Ljava.lang.Byte;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertNotNull(charArray72);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray8 = new float[] { (byte) -1 };
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (-1L));
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray14);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, (int) (byte) -1, 5);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray24, (float) 0, (int) (short) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, 100.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 0);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray24, (byte) 10, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray19, byteArray24);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, 0, (int) (byte) 10);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) 100);
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray33);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray14, (java.lang.Object) byteArray34, 7);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray34, (byte) -1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray38);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.remove(longArray60, (int) (short) 0);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.subarray(longArray62, (int) (byte) 100, (-1));
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[]");
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray8 = new int[] { (byte) 0 };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray8, 0);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray8, 0);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray8);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray13);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 2, 10, 0, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.commons.lang3.ArrayUtils arrayUtils0 = new org.apache.commons.lang3.ArrayUtils();
        org.apache.commons.lang3.ArrayUtils arrayUtils1 = new org.apache.commons.lang3.ArrayUtils();
        org.apache.commons.lang3.ArrayUtils arrayUtils2 = new org.apache.commons.lang3.ArrayUtils();
        org.apache.commons.lang3.ArrayUtils arrayUtils3 = new org.apache.commons.lang3.ArrayUtils();
        org.apache.commons.lang3.ArrayUtils arrayUtils4 = new org.apache.commons.lang3.ArrayUtils();
        org.apache.commons.lang3.ArrayUtils[] arrayUtilsArray5 = new org.apache.commons.lang3.ArrayUtils[] { arrayUtils0, arrayUtils1, arrayUtils2, arrayUtils3, arrayUtils4 };
        org.apache.commons.lang3.ArrayUtils[] arrayUtilsArray6 = new org.apache.commons.lang3.ArrayUtils[] {};
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(arrayUtilsArray6);
        org.apache.commons.lang3.ArrayUtils[] arrayUtilsArray8 = org.apache.commons.lang3.ArrayUtils.addAll(arrayUtilsArray5, arrayUtilsArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) arrayUtilsArray8);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) 0);
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100 };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray19, (byte) 10, 0);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray14, byteArray19);
        byte[] byteArray24 = null;
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray23, byteArray24);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.remove(byteArray23, 2);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray28, (byte) 0, 1);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.clone(byteArray28);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) arrayUtilsArray8, (java.lang.Object) byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.add(byteArray28, (-1), (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(arrayUtilsArray5);
        org.junit.Assert.assertNotNull(arrayUtilsArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(arrayUtilsArray8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray10);
        char[] charArray15 = new char[] { '#' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.toObject(charArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray8, charArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray8);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray8);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) 'a', (-1));
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(longArray8, (long) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray8);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray0);
        java.util.Map<java.lang.Object, java.lang.Object> objMap2 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray0);
        java.lang.Long[] longArray3 = new java.lang.Long[] {};
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray3);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (byte) 0);
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100 };
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray14, (byte) 10, 0);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray3, (java.lang.Object) byteArray18);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray18, byteArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray18);
        java.lang.Long[] longArray31 = new java.lang.Long[] {};
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray31);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray37, (byte) 0);
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray42, (byte) 10, 0);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray37, byteArray42);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray31, (java.lang.Object) byteArray46);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray52, (byte) 0);
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray52, (byte) 1);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray46, byteArray52);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray46);
        byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 10);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray18, byteArray60);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.clone(byteArray60);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) byteArray60, (int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(objMap2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray5 = new float[] { (byte) -1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 1);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray11);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray6, (int) (short) -1, (int) '4');
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray6);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Boolean[] booleanArray15 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray16);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray16, 2);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray20, false, 2);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray20, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false, true]");
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray7, (long) (byte) 100, 3);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray7, (long) ' ');
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray7, (long) (short) 1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray8);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray5, doubleArray8);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 1L);
        double[] doubleArray17 = new double[] { (byte) 10 };
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray8, doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray19, 8, 8);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray22, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray19, (short) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[100, 10, 1]");
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, true);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, 0, true);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, 6);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray32);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, (int) ' ', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray47, 2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray1);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3, 1.0d);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray7, 100.0d, 10.0d);
        java.lang.Double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        java.lang.reflect.Type[][][] typeArray0 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray2 = org.apache.commons.lang3.ArrayUtils.clone(typeArray1);
        float[] floatArray3 = new float[] {};
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (float) 10L);
        float[] floatArray7 = new float[] { (byte) -1 };
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray8, (float) (-1L));
        float[] floatArray11 = new float[] {};
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) 10L);
        float[] floatArray15 = new float[] { (byte) -1 };
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray13, floatArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray8, floatArray13);
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray13, (float) 3, (int) '4');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) typeArray1, (java.lang.Object) int21);
        java.lang.reflect.Type[][][] typeArray23 = org.apache.commons.lang3.ArrayUtils.add(typeArray0, typeArray1);
        java.lang.String[] strArray24 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.CharSequence[]) strArray24);
        java.io.Serializable[] serializableArray26 = org.apache.commons.lang3.ArrayUtils.addAll((java.io.Serializable[]) typeArray1, (java.io.Serializable[]) strArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) typeArray1);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(serializableArray26);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray16, 8, 8);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) '4', (-1.0d));
        double[] doubleArray28 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) (short) -1);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray34, (double) 5);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray34, (int) (short) 0, 8);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray16, doubleArray39);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 0.0f, (int) '#', (double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, false, (int) (short) 1);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(booleanArray17);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (byte) 0, 1.0d);
        double[] doubleArray19 = new double[] { (byte) 10 };
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray19);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray20);
        java.lang.String str26 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) doubleArray20, " ");
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray20, (int) '#', (int) (short) 0);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.add(doubleArray20, (double) 1.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{10.0}" + "'", str26, "{10.0}");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        java.lang.Short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 1);
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(shortArray23);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, (int) '#', (int) (byte) 1);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, (int) (short) -1, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Byte[] byteArray21 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray15, (java.lang.Object) byteArray22, 2);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15, (byte) 1);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        boolean[] booleanArray33 = new boolean[] { true, true, false, false };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray33, false);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray33, true, (int) (byte) 100);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray15, (java.lang.Object) true, (int) '#');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) (short) 1, (double) 6);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray1, (double) 6);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 6.0]");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray9);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray9, 8, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4, 0);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4, (int) 'a');
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4, (int) 'a');
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 2, -1, 2]");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 100.0f);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.add(doubleArray1, 0, (double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0]");
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) 0L, 7, (double) (byte) 100);
        double[] doubleArray45 = new double[] { (byte) 10 };
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray45);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray46);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray46, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray46);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray46);
        double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.add(doubleArray46, (double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 100.0]");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.remove(shortArray8, (int) (short) 0);
        java.lang.Class<?>[] wildcardClassArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray15 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray15);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray15, shortArray21);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray32, (short) 100);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray11, (java.lang.Object) shortArray38);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray38, (short) (byte) 1);
        short[] shortArray45 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray45);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray45, shortArray51);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray45, (short) (byte) 0);
        short[] shortArray62 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray62, (short) (byte) 0, 2);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray62, (short) 100);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray45, shortArray67);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray38, shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray69);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray70);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.contains(shortArray70, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[10, 100, -1, 1, 0, 0, 100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        java.lang.Float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray3);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.clone(floatArray3);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (byte) -1);
        float[] floatArray3 = new float[] {};
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (float) 10L);
        float[] floatArray6 = new float[] {};
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 1);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (float) (-1L));
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray11, (float) 1L);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray11);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(floatArray15);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) (-1.0f), (double) 0L);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray7, (double) 10L);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, 1.0d, 100, (double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray7);
        int int41 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) longArray7);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[100, 100, -1, -1, 100, 0]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray12, 'a');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '#', (int) (byte) 1);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, a, 4, #,  ,  ]");
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, (double) (short) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 1.0]");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.subarray(longArray47, (int) '4', (int) '4');
        long[] longArray58 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray58);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.addAll(longArray47, longArray58);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1, 52, 1, 0]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[-1, 10, -1, 52, 1, 0]");
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = new double[] { (byte) 10 };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray14, (double) (byte) 0);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 0.0d, (int) ' ');
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray14);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) '#');
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (short) 100, (int) (short) 0, 0.0d);
        java.lang.Double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray5);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 7, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 1.0, -1.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 4);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray19, 0);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.subarray(intArray24, 4, (int) (short) 0);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.add(intArray24, (int) (short) 0, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 0, 0]");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, true);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, false);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray9, booleanArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray9, false, (int) 'a');
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) 5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, true);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, false);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray9, booleanArray12);
        boolean[] booleanArray18 = new boolean[] { true, true, false, false };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray18, false);
        boolean[] booleanArray25 = new boolean[] { true, true, false, true };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, true, (int) '4');
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray18, booleanArray25);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray18, (int) (byte) 1, (-1));
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray32);
        java.lang.Long[] longArray42 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray42, (long) (-1));
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.add(longArray44, 0, (long) 1);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray44, (long) (-1), (int) (byte) 1);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray44, (long) (-1));
        java.lang.Long[] longArray53 = org.apache.commons.lang3.ArrayUtils.toObject(longArray44);
        boolean[] booleanArray58 = new boolean[] { true, true, false, false };
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray58, false);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray58, true);
        boolean[] booleanArray67 = new boolean[] { true, true, false, true };
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray67, true, (int) '4');
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray67);
        boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray67, false);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray67);
        boolean[] booleanArray75 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray58, booleanArray74);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray53, (java.lang.Object) booleanArray75);
        int int79 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray75, false, (int) (byte) 0);
        boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray75);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray75), "[true, true, false, false, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[true, true, false, false, true, true, false, true]");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray4, '4');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, (int) (short) -1, (int) (short) 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray7);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, true, 6);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, true, (int) 'a');
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray13, 0);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, true, false, false]");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, 100, -1, 1, 0, 0]");
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) (short) 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray20, (float) (short) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (-1L));
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(longArray11, (long) (byte) 0);
        short[] shortArray20 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray20, (short) (byte) 0, 2);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) boolean15, (java.lang.Object) 2);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1, 10, -1, 10, 1, 1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        short[] shortArray3 = new short[] { (short) 10, (short) 100, (byte) 0 };
        short[] shortArray7 = new short[] { (short) 10, (short) 100, (byte) 0 };
        short[][] shortArray8 = new short[][] { shortArray3, shortArray7 };
        short[][][] shortArray9 = new short[][][] { shortArray8 };
        short[][][] shortArray10 = org.apache.commons.lang3.ArrayUtils.clone(shortArray9);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.add(intArray5, (int) 'a');
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray20 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray14, intArray20);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) '4');
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 100, 2);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray5, intArray14);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) (short) 0, 7);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 2, -1, 2, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 2, -1, 2, 0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[7, 0, 2, 10, 0, -1]");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, 0.0f, (int) ' ');
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.clone(floatArray19);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray19, (float) '4');
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray19);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray29, (int) (short) 100, (int) (short) 10);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray32, (float) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 1.0, -1.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        double[] doubleArray41 = new double[] { (byte) 10 };
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray41);
        double[] doubleArray48 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray48, (double) (short) -1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray41, doubleArray48);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray31, doubleArray48);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray54);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray55, (double) '#', 2);
        double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray55);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray55);
        double[] doubleArray63 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray55, (int) (byte) 100, 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (-1L));
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        int[] intArray12 = new int[] { (byte) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray12, 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, (int) (byte) 1, (int) ' ');
        int[] intArray21 = new int[] { (byte) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 10, 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0, 1);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray21);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray10, (java.lang.Object) intArray21);
        byte[] byteArray32 = null;
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray10, byteArray32);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 1);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray38, (byte) 1, 1);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray38);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray38);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray53);
        java.lang.Byte[] byteArray57 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray57);
        java.lang.Long[] longArray65 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray65, (long) (-1));
        int int69 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray57, (java.lang.Object) longArray67, (int) (short) -1);
        byte[] byteArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray57, (byte) 1);
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray57, (byte) 0);
        byte[] byteArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray57, (byte) 0);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray53, byteArray75);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 1, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray26 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray26);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray32);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) (byte) 0);
        short[] shortArray43 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray43, (short) (byte) 0, 2);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray43, (short) 100);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray48);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.clone(shortArray26);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray26, (short) (byte) -1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray52);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray19, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[0, 100, 10]");
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = new double[] { (byte) 10 };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        double[] doubleArray20 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (short) -1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray13, doubleArray20);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray13, (int) (byte) -1, (int) (byte) 1);
        double[] doubleArray28 = new double[] { (byte) 10 };
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray29);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) ' ');
        double[] doubleArray34 = new double[] { (byte) 10 };
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray29, doubleArray34);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray26, doubleArray29);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray29);
        double[] doubleArray40 = new double[] { (byte) 10 };
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray40);
        double[] doubleArray47 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray47, (double) (short) -1);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray40, doubleArray47);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray40);
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray29, doubleArray51);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray29, (double) 6, (double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 1, 1, 10 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3, 100);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3, (int) (byte) 1);
        int[] intArray11 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray17 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray17);
        int[] intArray24 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray18, intArray24);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.addAll(intArray11, intArray24);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray24, 1);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray28, 10);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray28, 3, (int) (byte) -1);
        java.lang.Integer[] intArray34 = org.apache.commons.lang3.ArrayUtils.toObject(intArray28);
        int[] intArray38 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray44 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray44);
        int[] intArray51 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray45, intArray51);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.addAll(intArray38, intArray51);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray38, (int) (byte) -1);
        int[] intArray56 = org.apache.commons.lang3.ArrayUtils.addAll(intArray28, intArray38);
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray28, 5, (int) (byte) 10);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray28);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray28, 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1, 1, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 1, 10]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, -1, -1, 10, 100, 100, 10, 52]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toObject(longArray13);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray13, (int) (short) 0, (long) (short) 0);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray13, (long) 10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        java.lang.Boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        org.junit.Assert.assertNull(booleanArray2);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) 100);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, true, (int) 'a');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        java.lang.Boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray11, false);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray24, true, (int) (byte) 0);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false, (int) (short) 0);
        boolean[] booleanArray17 = new boolean[] { true, true, false, true };
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray17, true, (int) '4');
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray17);
        java.lang.Boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray17);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray22);
        java.lang.Boolean[] booleanArray29 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray29);
        java.lang.Boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray30, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.add(booleanArray30, false);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray30);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray30);
        char[] charArray38 = null;
        char[] charArray40 = new char[] { '#' };
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray40);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray42, 'a');
        char[] charArray51 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray51, '4', (int) (byte) 100);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray51, '#', 0);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.addAll(charArray42, charArray51);
        char[] charArray60 = new char[] { '#' };
        java.lang.Character[] charArray61 = org.apache.commons.lang3.ArrayUtils.toObject(charArray60);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.clone(charArray60);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.add(charArray62, 'a');
        char[] charArray66 = new char[] { '#' };
        java.lang.Character[] charArray67 = org.apache.commons.lang3.ArrayUtils.toObject(charArray66);
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.clone(charArray66);
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.addAll(charArray62, charArray66);
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.addAll(charArray58, charArray66);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.clone(charArray66);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray38, charArray71);
        java.lang.Character[] charArray73 = org.apache.commons.lang3.ArrayUtils.toObject(charArray71);
        char[] charArray75 = new char[] { '#' };
        java.lang.Character[] charArray76 = org.apache.commons.lang3.ArrayUtils.toObject(charArray75);
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.clone(charArray75);
        char[] charArray79 = org.apache.commons.lang3.ArrayUtils.add(charArray77, 'a');
        java.lang.Character[] charArray80 = org.apache.commons.lang3.ArrayUtils.toObject(charArray77);
        char[] charArray81 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray80);
        char[] charArray82 = org.apache.commons.lang3.ArrayUtils.clone(charArray81);
        char[] charArray84 = new char[] { '#' };
        java.lang.Character[] charArray85 = org.apache.commons.lang3.ArrayUtils.toObject(charArray84);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray84);
        char[] charArray87 = org.apache.commons.lang3.ArrayUtils.addAll(charArray82, charArray84);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray71, charArray87);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray87);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) booleanArray30, (java.lang.Object) boolean89);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[true, true, false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[true, true, false, true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#, a]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[#, a]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[#]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[#]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#, #]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[#]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[#]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#, a]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[#]");
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[#]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray12 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18);
        int[] intArray25 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray19, intArray25);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray25);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, 2);
        int[] intArray33 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        int[] intArray46 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray46);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.remove(intArray33, (int) (short) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray50);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 0);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) ' ');
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 10);
        java.lang.Integer[] intArray59 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 10]");
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) 5);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) 4);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        long[] longArray0 = null;
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray1, (long) 1);
        java.lang.Long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toObject(longArray3);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray0, longArray3);
        java.lang.String str7 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray0, "#");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#" + "'", str7, "#");
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 10);
        boolean[] booleanArray39 = null;
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray39);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray39, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (byte) 1, (java.lang.Object) longArray20);
        long[] longArray22 = new long[] {};
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(longArray22, (long) (short) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray22, (long) 3);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray20, longArray22);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) (short) 0, 10);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.subarray(longArray22, (int) (byte) -1, 8);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray22, 0L);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) 10);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0, -1.0, -1.0, 1.0, 100.0, 1.0]");
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (byte) 1, (java.lang.Object) longArray20);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.remove(longArray20, 2);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.add(longArray20, (long) '4');
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray20);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, 1L);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, 10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1, 52]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        short[] shortArray0 = null;
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (int) (byte) 0, (short) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[0]");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray18, (byte) 0, 1);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray18, "hi!");
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.remove(byteArray18, 4);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray18, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1,0,0,1,100,100}" + "'", str23, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1, 100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, 'a');
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray28);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray33);
        char[] charArray36 = new char[] { '#' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 'a');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray38);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray38, ' ');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray47, '#');
        char[] charArray51 = new char[] { '#' };
        java.lang.Character[] charArray52 = org.apache.commons.lang3.ArrayUtils.toObject(charArray51);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.clone(charArray51);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray53, 'a');
        char[] charArray62 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray62, '4', (int) (byte) 100);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray62, '#', 0);
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.addAll(charArray53, charArray62);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray62, 'a');
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray49, charArray71);
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray49, '4', (int) 'a');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray49);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray49);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[#, a]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "#4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "#4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[#, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, false);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, true);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, false, true, true]");
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray7);
        java.lang.String[][] strArray9 = org.apache.commons.lang3.ArrayUtils.add(strArray6, strArray7);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, (int) (byte) 0, (int) 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray9, (java.lang.Object) floatArray17, (int) (byte) -1);
        short[] shortArray24 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        short[] shortArray29 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray29);
        short[] shortArray35 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray35, (short) (byte) 0, 2);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray29, shortArray35);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray29);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray9, (java.lang.Object) shortArray24);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray24, (short) 10);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.add(shortArray24, (short) 1);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[1, 1, 1, 10, 1]");
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray20, (short) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.add(shortArray22, 5, (short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[0, 100, 10]");
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray8, (long) (-1));
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray8);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (int) (short) 0, 0L);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.subarray(longArray21, (int) (byte) 10, (int) (short) 100);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[0, 1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, 4, (short) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        java.lang.Integer[] intArray10 = org.apache.commons.lang3.ArrayUtils.toObject(intArray9);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray10);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray1, (long) (short) 1);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, (long) (short) 10);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray3, (long) (short) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray7);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (-1L));
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray19);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray7, floatArray19);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) (byte) 1);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray28, (float) (short) -1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[1.0, -1.0]");
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        java.lang.Integer[][] intArray0 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray1 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray2 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray3 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray4 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray5 = new java.lang.Integer[][] {};
        java.lang.Integer[][][] intArray6 = new java.lang.Integer[][][] { intArray0, intArray1, intArray2, intArray3, intArray4, intArray5 };
        java.lang.Integer[][] intArray7 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray8 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray9 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray10 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray11 = new java.lang.Integer[][] {};
        java.lang.Integer[][] intArray12 = new java.lang.Integer[][] {};
        java.lang.Integer[][][] intArray13 = new java.lang.Integer[][][] { intArray7, intArray8, intArray9, intArray10, intArray11, intArray12 };
        java.lang.Integer[][][][] intArray14 = new java.lang.Integer[][][][] { intArray6, intArray13 };
        java.lang.Integer[][][][] intArray16 = org.apache.commons.lang3.ArrayUtils.remove(intArray14, 1);
        java.lang.Integer[][][][] intArray17 = org.apache.commons.lang3.ArrayUtils.toArray(intArray14);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray2, '4', (int) '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray2, 0, 6);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, 'a', 3);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) 0L);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, 10.0d, (double) (-1.0f));
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 2);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) ' ');
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) (short) 10, (int) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray11, 100L);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray13, (long) (short) 100, 10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[1, -1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 0, 0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) (short) 10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray5, (float) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray14);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 10.0]");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = new double[] { (byte) 10 };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray16 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) ' ', 0.0d);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray20, 6, (-1.0d));
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, 100.0d, (double) 2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) 10);
        java.lang.Byte[] byteArray15 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray16);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 10);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100, 1, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, 1, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 100, 1, 0, 100, 10]");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        java.lang.Long[] longArray57 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray57, (long) (-1));
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray50, longArray59);
        java.lang.Long[] longArray66 = new java.lang.Long[] { 100L, 0L, 100L, 100L, 1L };
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray66, (long) ' ');
        int int71 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray68, 10L, (int) (byte) 1);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray59, longArray68);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[100, 0, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.toObject(charArray20);
        float[] floatArray22 = new float[] {};
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, (float) 10L);
        float[] floatArray26 = new float[] { (byte) -1 };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray26);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray24, 0.0f, (int) ' ');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray24);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray20, (java.lang.Object) floatArray31);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray20, '#');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) "{100,52}", (java.lang.Object) charArray20);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(charArray20, 'a');
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray12, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (short) -1, 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) 10, 4);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) (short) 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray20 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray14, intArray20);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) '4');
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray14, 10);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray25);
        java.lang.Integer[] intArray27 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = org.apache.commons.lang3.ArrayUtils.remove(intArray1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray27);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, '#', 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        double[] doubleArray0 = null;
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray0, (double) ' ', 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray7);
        java.lang.String[][] strArray9 = org.apache.commons.lang3.ArrayUtils.add(strArray6, strArray7);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, (int) (byte) 0, (int) 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray9, (java.lang.Object) floatArray17, (int) (byte) -1);
        short[] shortArray24 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        short[] shortArray29 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray29);
        short[] shortArray35 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray35, (short) (byte) 0, 2);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray29, shortArray35);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray29);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray9, (java.lang.Object) shortArray24);
        java.lang.String[][] strArray44 = org.apache.commons.lang3.ArrayUtils.subarray(strArray9, 7, (int) (byte) 10);
        java.lang.Comparable<java.lang.String>[][] strComparableArray45 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Comparable<java.lang.String>[][]) strArray44);
        java.lang.String[] strArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray46);
        java.util.Map<java.lang.Object, java.lang.Object> objMap48 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray46);
        java.lang.String[][] strArray49 = org.apache.commons.lang3.ArrayUtils.add(strArray44, strArray46);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strComparableArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(objMap48);
        org.junit.Assert.assertNotNull(strArray49);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap12 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '-1.0', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 10);
        java.lang.Long[] longArray13 = new java.lang.Long[] {};
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 0);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray24, (byte) 10, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray19, byteArray24);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray13, (java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 0);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray28, byteArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray28);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray6, (java.lang.Object) byteArray28);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(byteArray28, (byte) 1);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray28, (byte) 10);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.add(byteArray28, (byte) -1);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100, 100, 1, 0, 0, -1, -1]");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        short[] shortArray20 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray20, (short) (byte) 0, 2);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray20, (short) 100);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray25);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray25, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 10, 0]");
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = new double[] { (byte) 10 };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray16 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray16);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) 100L, (int) '#', (double) (byte) 1);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) (short) 100, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, (int) (short) -1, (int) '#');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, 'a');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, 'a');
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, 'a');
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray12, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ ]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ ]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        boolean[] booleanArray37 = new boolean[] { true, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray37, false);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray37, true, (int) (byte) 100);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray37);
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray32);
        boolean[] booleanArray45 = null;
        boolean[] booleanArray50 = new boolean[] { true, true, false, true };
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray50, true, (int) '4');
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray50);
        java.lang.Boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray50);
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray55);
        java.lang.Boolean[] booleanArray62 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray62);
        java.lang.Boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray63);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray63, false);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.add(booleanArray63, false);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray56, booleanArray63);
        boolean[] booleanArray74 = new boolean[] { true, true, false, true };
        int int77 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray74, true, (int) '4');
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray74);
        boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray74, false);
        boolean[] booleanArray81 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray74);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray81, true);
        boolean[] booleanArray85 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray81, false);
        boolean[] booleanArray87 = org.apache.commons.lang3.ArrayUtils.add(booleanArray81, true);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray63, booleanArray81);
        boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray45, booleanArray81);
        boolean[] booleanArray90 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray45);
        boolean[] booleanArray93 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray90, (int) (byte) 10, (int) (short) 100);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, true, true, true, false, false, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[true, true, false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true, true, false, true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray81), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray87), "[true, true, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray89), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray90), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray93), "[]");
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) 1);
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray56);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.add(shortArray58, (short) (byte) 100);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.add(shortArray61, (short) 0);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray61);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.clone(shortArray61);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray61, 100, 100);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray61);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray58, shortArray61);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray58, 8, 8);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[100, 10, 100, 1, 10, 0, 1, 10, 0, 100]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[]");
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.lang.Short[] shortArray2 = new java.lang.Short[] { (short) -1, (short) 0 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2, (short) (byte) 10);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray5, 0, (int) ' ');
        short[] shortArray12 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray12);
        short[] shortArray18 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray18, (short) (byte) 0, 2);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray12, shortArray18);
        short[] shortArray26 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray26);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray32);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray12, shortArray32);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.add(shortArray37, (short) 100);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray37);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 10, 100, 1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[100, 10, 100, 1, 10, 100, 0, 100]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[-1, 0, 100, 10, 100, 1, 10, 100, 0]");
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        boolean[] booleanArray15 = new boolean[] { true, true, false, true };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray15, true, (int) '4');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray15);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray15);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        int[] intArray28 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray34 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray34);
        int[] intArray41 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray35, intArray41);
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.addAll(intArray28, intArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray28);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray20, (java.lang.Object) intArray28);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray6, (java.lang.Object) intArray28);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = org.apache.commons.lang3.ArrayUtils.add(intArray28, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[52, 10, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, true);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, false);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray9, booleanArray12);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray9, false);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray15, true, 100);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray15, false, (int) (short) 0);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false, true]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 1);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) (byte) -1, 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray8);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = new double[] { (byte) 10 };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray16 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ', (double) 5);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.add(doubleArray2, (int) (byte) 0, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 10.0]");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        short[] shortArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, 'a');
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray28);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray33);
        char[] charArray36 = new char[] { '#' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 'a');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray38);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray38, ' ');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray47, '#');
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray49, '4', 6);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray49, ' ', (int) (short) -1);
        char[] charArray57 = new char[] { ' ' };
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.add(charArray57, '#');
        char[] charArray61 = org.apache.commons.lang3.ArrayUtils.add(charArray59, 'a');
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        java.lang.Object[][] objArray64 = new java.lang.Object[][] { objArray62, objArray63 };
        java.lang.Object obj65 = null;
        java.lang.Object[][] objArray66 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray64, obj65);
        char[] charArray68 = new char[] { '#' };
        java.lang.Character[] charArray69 = org.apache.commons.lang3.ArrayUtils.toObject(charArray68);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray64, (java.lang.Object[]) charArray69);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray69, ' ');
        char[] charArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray69, '4');
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.addAll(charArray59, charArray74);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray49, charArray74);
        char[] charArray78 = new char[] { '#' };
        java.lang.Character[] charArray79 = org.apache.commons.lang3.ArrayUtils.toObject(charArray78);
        char[] charArray80 = org.apache.commons.lang3.ArrayUtils.clone(charArray78);
        char[] charArray82 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray80, '4');
        char[] charArray85 = org.apache.commons.lang3.ArrayUtils.subarray(charArray80, (int) '4', (int) (short) 10);
        int int88 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray80, ' ', 7);
        char[] charArray89 = org.apache.commons.lang3.ArrayUtils.addAll(charArray74, charArray80);
        char[] charArray91 = org.apache.commons.lang3.ArrayUtils.add(charArray74, '#');
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, a]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[#]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), " ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), " ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[ , #, #]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[#]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[#]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[#, #]");
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[#, #]");
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) ' ');
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray9);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray8 = new float[] { (byte) -1 };
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (-1L));
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray14);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, (int) (byte) -1, 5);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 8, (int) (short) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, true);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, 0, true);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, 6);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray32);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.add(booleanArray38, false);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true, true, true, true, false, false, false]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, true);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, 0, true);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, 6);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray32);
        java.lang.String str39 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) booleanArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray4);
        java.lang.Boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, true);
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{true,true,false,true}" + "'", str39, "{true,true,false,true}");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true, false, true, true]");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) 100, (int) (byte) 100);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, 3, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10, 100, -1, 0]");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 0, 0, 0, 10, 100]");
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray7);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7, 5);
        java.lang.Long[] longArray17 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray32);
        java.lang.Long[] longArray51 = new java.lang.Long[] {};
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray51);
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray57, (byte) 0);
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray62, (byte) 10, 0);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray57, byteArray62);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray51, (java.lang.Object) byteArray66);
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray51);
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray51, (long) (byte) 10);
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray70);
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.remove(longArray71, (int) (short) 0);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.clone(longArray71);
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray7, (java.lang.Object) longArray74);
        long[] longArray80 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray81 = org.apache.commons.lang3.ArrayUtils.clone(longArray80);
        long[] longArray83 = org.apache.commons.lang3.ArrayUtils.add(longArray80, (long) (byte) 100);
        java.lang.Long[] longArray84 = org.apache.commons.lang3.ArrayUtils.toObject(longArray80);
        long[] longArray87 = org.apache.commons.lang3.ArrayUtils.subarray(longArray80, (int) (short) 100, (int) 'a');
        long[] longArray88 = org.apache.commons.lang3.ArrayUtils.addAll(longArray74, longArray87);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[]");
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(longArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray80), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray84);
        org.junit.Assert.assertNotNull(longArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray87), "[]");
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray88), "[0, 100, -1, -1, 100, 100]");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray8);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 10.0, 1.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1, (double) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray4, (double) 0L);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray4, (double) 10L, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        java.lang.Character[] charArray14 = new java.lang.Character[] { '4' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray14);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray14, 'a');
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray9, (java.lang.Object) charArray17);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, true]");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 10);
        java.lang.Long[] longArray13 = new java.lang.Long[] {};
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 0);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray24, (byte) 10, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray19, byteArray24);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray13, (java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 0);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray28, byteArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray28);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray6, (java.lang.Object) byteArray28);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.remove(byteArray28, 2);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100, 100, 0, 0, -1]");
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray16 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) (-1));
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, (long) (short) -1, 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray18);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(longArray18, (long) '#');
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray18, 6, 100L);
        java.lang.Long[] longArray36 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray36, (long) (-1));
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.add(longArray38, 0, (long) 1);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray38, (long) (-1), (int) (byte) 1);
        long[] longArray45 = new long[] {};
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(longArray45, (long) (short) 1);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.addAll(longArray38, longArray45);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray48, (long) 1, 3);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray48, (long) '#');
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray48);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.remove(longArray54, 0);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.subarray(longArray56, (int) '#', 5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[10, -1, 10, 1, 1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray12 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray12);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray6);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, 0, (int) (byte) 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray19, 1);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.subarray(intArray21, 5, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray24, (int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) 100.0f, (int) (byte) 100, (double) 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray7);
        java.lang.String[][] strArray9 = org.apache.commons.lang3.ArrayUtils.add(strArray6, strArray7);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, (int) (byte) 0, (int) 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray9, (java.lang.Object) floatArray17, (int) (byte) -1);
        short[] shortArray24 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        short[] shortArray29 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray29);
        short[] shortArray35 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray35, (short) (byte) 0, 2);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray29, shortArray35);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray29);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray9, (java.lang.Object) shortArray24);
        java.lang.String[][] strArray44 = org.apache.commons.lang3.ArrayUtils.subarray(strArray9, 7, (int) (byte) 10);
        float[] floatArray45 = null;
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.add(floatArray45, (float) 100L);
        java.lang.Float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray48);
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray48, (float) 1L);
        float[] floatArray52 = new float[] {};
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.add(floatArray52, (float) 10L);
        float[] floatArray56 = new float[] { (byte) -1 };
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray54, floatArray56);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray57, (float) (-1L));
        float[] floatArray60 = new float[] {};
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.add(floatArray60, (float) 10L);
        float[] floatArray64 = new float[] { (byte) -1 };
        float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray62, floatArray64);
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray62, (float) 1);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray57, floatArray62);
        float[] floatArray69 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray51, floatArray62);
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray69, (float) 1L);
        float[] floatArray72 = org.apache.commons.lang3.ArrayUtils.clone(floatArray69);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray47, floatArray69);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.contains(floatArray47, (float) (-1));
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.contains(floatArray47, (float) 1);
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray44, (java.lang.Object) boolean77);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[100.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[10.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        long[] longArray28 = new long[] { (byte) -1, 10 };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray28);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray28, (long) (byte) 100);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray32, (-1L));
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray32, (long) 100);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 100L);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.clone(floatArray5);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.remove(floatArray10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0, -1.0]");
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.io.Serializable[] serializableArray17 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) wildcardClassArray14, (int) '4', (int) (byte) 100);
        boolean[] booleanArray23 = new boolean[] { false, false, false, false, false };
        boolean[] booleanArray29 = new boolean[] { false, false, false, false, false };
        boolean[] booleanArray35 = new boolean[] { false, false, false, false, false };
        boolean[][] booleanArray36 = new boolean[][] { booleanArray23, booleanArray29, booleanArray35 };
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[][] booleanArray39 = org.apache.commons.lang3.ArrayUtils.add(booleanArray36, (int) (byte) 0, booleanArray38);
        java.lang.Integer[] intArray44 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray44);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray50, (byte) 0);
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 100 };
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray55, (byte) 10, 0);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray50, byteArray55);
        byte[] byteArray60 = null;
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray59, byteArray60);
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.remove(byteArray59, 2);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.clone(byteArray63);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.add(byteArray64, (byte) 0);
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray44, (java.lang.Object) byteArray64, (int) (byte) 0);
        boolean[][] booleanArray69 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray36, (java.lang.Object) intArray44);
        int[] intArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray44, (int) (short) 10);
        int[] intArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray44);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) serializableArray17, (java.lang.Object) intArray44);
        int[] intArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray44, 0);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 2, -1, 2]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 2, -1, 2]");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, (float) 0, (int) (short) 10);
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray11, (float) 1L);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray19 = new float[] { (byte) -1 };
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray20, (float) (-1L));
        float[] floatArray23 = new float[] {};
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, (float) 10L);
        float[] floatArray27 = new float[] { (byte) -1 };
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray25, floatArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray25, (float) 1);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray20, floatArray25);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray25);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray32, (float) 1L);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.clone(floatArray32);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray35);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) (byte) -1);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray6, (float) 100L);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.clone(floatArray6);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray0, 1.0d);
        org.junit.Assert.assertNull(doubleArray2);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) 10.0f, (double) (-1L));
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, 10.0d, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        short[] shortArray22 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray22);
        short[] shortArray27 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray27);
        short[] shortArray33 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray33, (short) (byte) 0, 2);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray27, shortArray33);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray27);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(shortArray22, (short) (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray22);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray22);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray22, (short) (byte) 0, (int) '4');
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.add(shortArray22, 4, (short) (byte) 0);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray22);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[10, 1, 1, 1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[10, 1, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, true);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, 0, true);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, 6);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray32);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.add(booleanArray38, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, false, true, true, true, true, false, true, true]");
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a');
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.add(charArray0, '#');
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray34 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray35 = new short[][] { shortArray9, shortArray14, shortArray19, shortArray24, shortArray29, shortArray34 };
        java.lang.Long[] longArray42 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray42, (long) (-1));
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray44, (long) '#');
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.subarray(longArray44, (int) '4', (int) (byte) 10);
        short[][] shortArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray35, (java.lang.Object) longArray49);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray57, (double) '#');
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.add(doubleArray59, (int) (short) 1, (double) 1.0f);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray62, (double) (short) -1);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray62);
        java.lang.Double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray65);
        float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int68 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray67);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray66, (java.lang.Object) floatArray67);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray50, (java.lang.Object[]) doubleArray66);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray66, (double) (short) 100);
        char[] charArray74 = new char[] { '#' };
        java.lang.Character[] charArray75 = org.apache.commons.lang3.ArrayUtils.toObject(charArray74);
        char[] charArray76 = org.apache.commons.lang3.ArrayUtils.clone(charArray74);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.add(charArray76, 'a');
        char[] charArray80 = new char[] { '#' };
        java.lang.Character[] charArray81 = org.apache.commons.lang3.ArrayUtils.toObject(charArray80);
        char[] charArray82 = org.apache.commons.lang3.ArrayUtils.clone(charArray80);
        char[] charArray83 = org.apache.commons.lang3.ArrayUtils.addAll(charArray76, charArray80);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray72, (java.lang.Object) charArray80);
        char[] charArray85 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray80);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#, a]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[#]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[#]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[#, #]");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] {};
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.isEmpty(strArray1);
        java.lang.String[][][][] strArray3 = org.apache.commons.lang3.ArrayUtils.add(strArray0, strArray1);
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][][] strArray5 = new java.lang.String[][][] { strArray4 };
        java.lang.String[] strArray6 = new java.lang.String[] {};
        java.lang.String[] strArray7 = new java.lang.String[] {};
        java.lang.String[] strArray8 = new java.lang.String[] {};
        java.lang.String[] strArray9 = new java.lang.String[] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] { strArray6, strArray7, strArray8, strArray9 };
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray10 };
        java.lang.String[][][] strArray12 = org.apache.commons.lang3.ArrayUtils.addAll(strArray5, strArray11);
        java.lang.String[][][][] strArray13 = org.apache.commons.lang3.ArrayUtils.add(strArray0, strArray5);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (int) (short) 0, (byte) -1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, -1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, -1, 1, 100, 100, 0]");
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        float[] floatArray1 = new float[] { '#' };
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1));
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, 0, (int) (short) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray4);
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray4);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray9);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray9, 1, (int) '4');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, 0, (int) (short) -1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray4, (float) '4');
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        short[] shortArray5 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) -1, (int) (short) 0);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray10, 2, (int) (byte) -1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray10, (short) (byte) 100);
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray10);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray23, (short) 0);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray25, (short) (byte) 0);
        short[] shortArray28 = null;
        short[] shortArray32 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray32);
        short[] shortArray38 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray38, (short) (byte) 0, 2);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray32, shortArray38);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray32, (short) (byte) 0);
        short[] shortArray49 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray49, (short) (byte) 0, 2);
        short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray49, (short) 100);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray32, shortArray54);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray28, shortArray55);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray55);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray55, (int) (short) 10, (int) (byte) -1);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray25, shortArray60);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[0, 10, 1, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1, 10, 100, 0]");
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        double[] doubleArray2 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        double[] doubleArray5 = new double[] { (byte) 10 };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        java.lang.Object[] objArray8 = null;
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) '#');
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.add(doubleArray17, (int) (short) 1, (double) 1.0f);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) -1);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray8, (java.lang.Object) doubleArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray5, doubleArray23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) '4');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 52.0]");
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 7);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[7.0]");
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Object[][] objArray16 = new java.lang.Object[][] { objArray14, objArray15 };
        java.lang.Object obj17 = null;
        java.lang.Object[][] objArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray16, obj17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray12, (java.lang.Object[]) objArray18);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12, (byte) 100);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) doubleArray8, (java.lang.Object[]) byteArray12);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12, (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 100]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 100]");
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 100L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, 10.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.remove(byteArray9, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 1]");
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray3, '#');
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray10, '4', (int) (short) -1);
        char[] charArray16 = new char[] { '#' };
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.toObject(charArray16);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray16);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 'a');
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.addAll(charArray18, charArray22);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray25);
        char[] charArray28 = new char[] { ' ' };
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray28, '#');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray30, 'a');
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(charArray32, '#');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray25, charArray32);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray32);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray38 = org.apache.commons.lang3.ArrayUtils.remove(charArray36, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, a]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , #, a]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "## #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "## #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #,  , #, a]");
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray1);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) '4', 1.0d);
        int int8 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        short[] shortArray18 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray18);
        short[] shortArray24 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray24, (short) (byte) 0, 2);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray18, shortArray24);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) 10);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) wildcardClassArray14, (java.lang.Object) shortArray24);
        double[] doubleArray35 = new double[] { (-1), (byte) 100, 10L };
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray35, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray35);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray45, (byte) 0);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.add(byteArray45, (byte) 0);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray40, (java.lang.Object) byteArray49, 4);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.clone(byteArray49);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.reflect.Type[]) wildcardClassArray14, (java.lang.Object) byteArray52);
        java.lang.Class<?>[] wildcardClassArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray61 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray61, (long) (-1));
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.add(longArray63, 0, (long) 1);
        java.lang.Class<?> wildcardClass67 = longArray63.getClass();
        java.lang.Class<?>[] wildcardClassArray68 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray54, wildcardClass67);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray54);
        java.lang.Class<?>[] wildcardClassArray70 = org.apache.commons.lang3.ArrayUtils.addAll(wildcardClassArray14, wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 0, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 0, 0, 1, 0]");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(wildcardClassArray68);
        org.junit.Assert.assertNotNull(wildcardClassArray70);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 1);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 1, 1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray33, (byte) 0);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(byteArray33, (byte) 100);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray33, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 100, 100, -1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 100, 100, -1, 0, 0]");
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, 1, (int) (short) 0);
        java.lang.Long[] longArray24 = new java.lang.Long[] {};
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24);
        int[] intArray28 = new int[] { (byte) 0 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray28, 0);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.add(intArray28, 0);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray28, (int) (short) 0);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray24, (java.lang.Object) intArray28);
        java.lang.Integer[] intArray41 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray41);
        int[] intArray48 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray42, intArray48);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray42, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray42);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.subarray(intArray42, 0, (int) (byte) 0);
        int[] intArray56 = org.apache.commons.lang3.ArrayUtils.addAll(intArray28, intArray55);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray20, intArray28);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.subarray(intArray20, 0, (int) (short) 1);
        int[] intArray62 = new int[] { (byte) 0 };
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray62, 0);
        int[] intArray66 = org.apache.commons.lang3.ArrayUtils.add(intArray62, 0);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray62, (int) (byte) 1, (int) ' ');
        int[] intArray71 = new int[] { (byte) 0 };
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray71, 0);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray71, 10, 0);
        int int79 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray71, 0, 1);
        int[] intArray80 = org.apache.commons.lang3.ArrayUtils.addAll(intArray62, intArray71);
        int int82 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray80, 4);
        int int84 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray80, 0);
        int[] intArray85 = org.apache.commons.lang3.ArrayUtils.clone(intArray80);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray60, intArray80);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        char[] charArray18 = null;
        char[] charArray20 = new char[] { '#' };
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.toObject(charArray20);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.clone(charArray20);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.add(charArray22, 'a');
        char[] charArray31 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray31, '4', (int) (byte) 100);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray31, '#', 0);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray22, charArray31);
        char[] charArray40 = new char[] { '#' };
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray40);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray42, 'a');
        char[] charArray46 = new char[] { '#' };
        java.lang.Character[] charArray47 = org.apache.commons.lang3.ArrayUtils.toObject(charArray46);
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.clone(charArray46);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.addAll(charArray42, charArray46);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.addAll(charArray38, charArray46);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.clone(charArray46);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray18, charArray51);
        java.lang.Character[] charArray53 = org.apache.commons.lang3.ArrayUtils.toObject(charArray51);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) longArray0, (java.lang.Object[]) charArray53);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#, a]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#, #]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[]");
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 4);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray19, 0);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.subarray(intArray24, (int) (byte) 10, (int) '#');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, 10.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray21, (short) 0, 0);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray21);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 10);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, 0, (short) 0);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.clone(shortArray27);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(shortArray31, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[0, 100, 10, 1, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[0, 100, 1, 100]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[0, 0, 100, 1, 100]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[0, 100, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (byte) 0);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.remove(byteArray9, 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', 0);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, 0.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 1);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) 'a', (int) ' ');
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.clone(byteArray25);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray3, (byte) -1);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.clone(byteArray5);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 100]");
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray4);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 100);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (-1));
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25, 10);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25, (int) (short) 0);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray0, (java.lang.Object) intArray25, 0);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25, 5);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 2, 10, 0, -1]");
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray4);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 100);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 0, -1]");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) (short) -1);
        double[] doubleArray19 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) (short) -1);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray19);
        double[] doubleArray27 = new double[] { (byte) 10 };
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray28);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray28, (double) (byte) 0);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, 0.0d, (int) ' ');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray28);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) '#');
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) (short) 100, (int) (short) 0, 0.0d);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray5, doubleArray19);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) 2, (double) 6);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 1.0, -1.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) 0, 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray5);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, (long) (byte) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0L);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, 3, (int) (short) 10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '#', (int) (short) 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10, -1, 10, 1, 1, 0]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        java.lang.Short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 10, 100]");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) (byte) 10);
        java.lang.Class<?>[] wildcardClassArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray38 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray38);
        short[] shortArray44 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) (byte) 0, 2);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray38, shortArray44);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray38, (short) (byte) 0);
        short[] shortArray55 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray55, (short) (byte) 0, 2);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray55, (short) 100);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray38, shortArray60);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray34, (java.lang.Object) shortArray61);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray61, (short) (byte) 1);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray64);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray64, (short) 10);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains(shortArray67, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[100, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        long[] longArray20 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.clone(longArray20);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray20, (long) (byte) 100);
        java.lang.Long[] longArray24 = org.apache.commons.lang3.ArrayUtils.toObject(longArray20);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray20, 4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.lang.Float[] floatArray4 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray9 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray24 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[][] floatArray30 = new java.lang.Float[][] { floatArray4, floatArray9, floatArray14, floatArray19, floatArray24, floatArray29 };
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[][] objArray33 = new java.lang.Object[][] { objArray31, objArray32 };
        java.lang.Object obj34 = null;
        java.lang.Object[][] objArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray33, obj34);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray33, (java.lang.Object[]) charArray38);
        java.lang.Float[][] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray30, (java.lang.Object) charArray38);
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray43, (byte) 10, 0);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.add(byteArray43, (byte) 1);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (int) (short) 0, (byte) 1);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) 10);
        java.lang.Byte[] byteArray56 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray56);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray48, byteArray57);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray38, (java.lang.Object) byteArray58);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray58, 6, 8);
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray67, (byte) 0);
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray72, (byte) 10, 0);
        byte[] byteArray76 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray67, byteArray72);
        byte[] byteArray77 = null;
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray76, byteArray77);
        byte[] byteArray80 = org.apache.commons.lang3.ArrayUtils.remove(byteArray76, 2);
        byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.clone(byteArray80);
        byte[] byteArray83 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray80, (byte) 1);
        byte[] byteArray85 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray83, (byte) 1);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.contains(byteArray85, (byte) 10);
        byte[] byteArray88 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray58, byteArray85);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 100, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 0, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[100, 100, 1, 0, 100, -1, 0, 100, 100]");
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        short[] shortArray6 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray6);
        short[] shortArray12 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) (byte) 0, 2);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray6, shortArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray12);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray12, 3, (int) '4');
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray20, (short) 100);
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray20);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray23);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray0, (java.lang.Object) shortArray24, (int) (short) 10);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray10);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray10);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray10, 'a');
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, a]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        float[] floatArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) (-1L), 6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 0, (int) (short) -1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0]");
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.lang.Long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 10);
        org.junit.Assert.assertNull(longArray2);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray20, (byte) 10, 0);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 1);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (int) (short) 0, (byte) 1);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray0, (java.lang.Object) (short) 0, (int) ' ');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray12 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(intArray12, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = org.apache.commons.lang3.ArrayUtils.remove(intArray12, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray40, (int) (byte) 1);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray50, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[true, false, true]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toObject(longArray13);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray26, (long) 'a');
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toObject(longArray28);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(longArray29);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        boolean boolean29 = node28.isParamList();
        boolean boolean30 = node28.isString();
        boolean boolean31 = node28.isGetElem();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean2 = node1.isWith();
        boolean boolean3 = node1.isInc();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node1.siblings();
        int int5 = node1.getCharno();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isScript();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node5.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(47, node27, node33);
        java.lang.String str36 = node35.getSourceFileName();
        java.lang.String[] strArray38 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet39);
        boolean boolean42 = node35.isParamList();
        com.google.javascript.rhino.Node node43 = node35.getFirstChild();
        com.google.javascript.rhino.Node node44 = node5.useSourceInfoFromForTree(node35);
        boolean boolean45 = node5.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str7 = node4.getSourceFileName();
        int int8 = node4.getType();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        boolean boolean14 = node13.isIn();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node24.isEquivalentToTyped(node36);
        boolean boolean38 = node24.isNull();
        com.google.javascript.rhino.Node node39 = node13.copyInformationFromForTree(node24);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node13.setStaticSourceFile(staticSourceFile40);
        java.lang.String str45 = node13.toString(true, false, true);
        boolean boolean46 = node13.isDelProp();
        boolean boolean47 = node13.isFalse();
        boolean boolean48 = node13.isAnd();
        node4.addChildrenToFront(node13);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ERROR" + "'", str45, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node31.setStaticSourceFile(staticSourceFile58);
        java.lang.String str63 = node31.toString(true, false, true);
        boolean boolean64 = node31.isNew();
        boolean boolean65 = node31.isSetterDef();
        boolean boolean66 = node21.isEquivalentToTyped(node31);
        com.google.javascript.rhino.Node node68 = node21.getChildAtIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            node68.setVarArgs(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ERROR" + "'", str63, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = node62.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean70 = node5.isCatch();
        boolean boolean71 = node5.isInc();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isCatch();
        boolean boolean19 = node5.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node20 = node5.cloneTree();
        node5.setSourceEncodedPositionForTree(1);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        boolean boolean38 = node35.isLabel();
        java.lang.String str42 = node35.toString(false, false, true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER 4095.0" + "'", str42, "NUMBER 4095.0");
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str7 = node4.getSourceFileName();
        int int8 = node4.getType();
        int int9 = node4.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        boolean boolean15 = node14.isIn();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        boolean boolean38 = node25.isEquivalentToTyped(node37);
        boolean boolean39 = node25.isNull();
        com.google.javascript.rhino.Node node40 = node14.copyInformationFromForTree(node25);
        boolean boolean41 = node25.isSetterDef();
        int int42 = node25.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node25.children();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        node54.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node58 = node25.useSourceInfoFromForTree(node54);
        java.lang.String str59 = node58.toStringTree();
        com.google.javascript.rhino.Node node60 = node58.removeFirstChild();
        com.google.javascript.rhino.Node node61 = node4.useSourceInfoFrom(node58);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ERROR\n" + "'", str59, "ERROR\n");
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        java.lang.String str34 = node15.getSourceFileName();
        boolean boolean35 = node15.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node15.copyInformationFrom(node40);
        boolean boolean42 = node41.isExprResult();
        com.google.javascript.rhino.Node node43 = node41.getLastSibling();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray5, 1, 4095);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(49, nodeArray5, 4, 0);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((-1), nodeArray5);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(37, nodeArray5, (int) (short) 10, (int) (short) 10);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node37.isEquivalentToTyped(node49);
        boolean boolean51 = node37.isNull();
        com.google.javascript.rhino.Node node52 = node26.copyInformationFromForTree(node37);
        boolean boolean53 = node37.isSetterDef();
        int int54 = node37.getLength();
        boolean boolean55 = node37.isDebugger();
        boolean boolean56 = node21.isEquivalentToTyped(node37);
        boolean boolean57 = node21.isNoSideEffectsCall();
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node86 = node80.useSourceInfoIfMissingFrom(node85);
        boolean boolean87 = node74.isEquivalentToTyped(node86);
        boolean boolean88 = node74.isNull();
        com.google.javascript.rhino.Node node89 = node63.copyInformationFromForTree(node74);
        boolean boolean90 = node74.isSetterDef();
        int int91 = node74.getLength();
        boolean boolean92 = node74.isName();
        boolean boolean93 = node74.isFromExterns();
        boolean boolean94 = node74.isDec();
        node21.putProp(39, (java.lang.Object) node74);
        boolean boolean96 = node21.isParamList();
        boolean boolean97 = node21.isContinue();
        com.google.javascript.rhino.Node node98 = node18.copyInformationFromForTree(node21);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100L, 39, 29);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        boolean boolean32 = node28.isSyntheticBlock();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        boolean boolean38 = node37.isIn();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node48.isEquivalentToTyped(node60);
        boolean boolean62 = node48.isNull();
        com.google.javascript.rhino.Node node63 = node37.copyInformationFromForTree(node48);
        boolean boolean64 = node48.isSetterDef();
        int int65 = node48.getLength();
        boolean boolean66 = node48.isName();
        boolean boolean67 = node48.wasEmptyNode();
        com.google.javascript.rhino.Node node68 = node28.clonePropsFrom(node48);
        boolean boolean69 = node68.isSwitch();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node68.children();
        // The following exception was thrown during execution in test generation
        try {
            node68.setSideEffectFlags(47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable70);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 0, 31);
        boolean boolean4 = node3.isBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        boolean boolean39 = node2.isNE();
        boolean boolean40 = node2.isName();
        boolean boolean41 = node2.isQuotedString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node4.isFalse();
        boolean boolean65 = node4.isAnd();
        node4.setSourceEncodedPositionForTree((int) (byte) 0);
        boolean boolean68 = node4.isNot();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isTrue();
        com.google.javascript.rhino.Node node37 = node20.detachFromParent();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray42, 1, 4095);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(49, nodeArray42, 4, 0);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((-1), nodeArray42);
        node52.setSourceEncodedPosition(54);
        node52.detachChildren();
        java.lang.String str56 = node37.checkTreeEquals(node52);
        node37.setSourceFileForTesting("ERROR 0\n");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        boolean boolean31 = node5.isGetElem();
        boolean boolean32 = node5.isOnlyModifiesArgumentsCall();
        java.lang.String str33 = node5.getQualifiedName();
        node5.setLength((-1));
        boolean boolean36 = node5.isThrow();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node88 = node82.useSourceInfoIfMissingFrom(node87);
        boolean boolean89 = node76.isEquivalentToTyped(node88);
        boolean boolean90 = node88.isAssignAdd();
        com.google.javascript.rhino.Node node91 = node88.getParent();
        boolean boolean92 = node88.isInc();
        boolean boolean93 = node88.isSwitch();
        boolean boolean94 = node88.isSyntheticBlock();
        boolean boolean95 = node16.isEquivalentTo(node88);
        node16.setChangeTime((int) (short) 1);
        boolean boolean98 = node16.isIf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        node15.setVarArgs(true);
        int int50 = node15.getChangeTime();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setMutatesGlobalState();
        boolean boolean4 = sideEffectFlags3.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags3.setMutatesGlobalState();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean2 = node1.isWith();
        boolean boolean3 = node1.isInc();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node1.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator5 = nodeIterable4.spliterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(nodeSpliterator5);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node53.setStaticSourceFile(staticSourceFile80);
        com.google.javascript.rhino.Node node82 = node15.clonePropsFrom(node53);
        boolean boolean83 = node82.hasMoreThanOneChild();
        boolean boolean84 = node82.isNot();
        com.google.javascript.rhino.Node node85 = node82.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = node85.isGetElem();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isScript();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node5.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        boolean boolean33 = node32.isVoid();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        boolean boolean56 = node43.isEquivalentToTyped(node55);
        boolean boolean57 = node55.isAssignAdd();
        boolean boolean58 = node55.hasChildren();
        boolean boolean59 = node55.isSetterDef();
        node55.addSuppression("ERROR\n");
        boolean boolean62 = node32.isEquivalentToShallow(node55);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node32.setStaticSourceFile(staticSourceFile63);
        boolean boolean65 = node32.isHook();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node66 = node5.removeChildAfter(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node6);
        com.google.javascript.rhino.Node node35 = node34.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray38, 2, (int) ' ');
        java.lang.String str45 = node44.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node67.isAssignAdd();
        com.google.javascript.rhino.Node node70 = node67.getParent();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(38, node34, node44, node67);
        boolean boolean72 = node44.isFalse();
        com.google.javascript.rhino.InputId inputId73 = null;
        node44.setInputId(inputId73);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder75 = node44.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node21.isNew();
        int int25 = node21.getIntProp(8);
        boolean boolean26 = node21.isQualifiedName();
        boolean boolean27 = node21.isNull();
        boolean boolean28 = node4.hasChild(node21);
        boolean boolean29 = node21.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        boolean boolean54 = node36.mayMutateArguments();
        boolean boolean55 = node36.isName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesThis();
        int int3 = sideEffectFlags0.valueOf();
        int int4 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        boolean boolean37 = node36.isIf();
        int int38 = node33.getIndexOfChild(node36);
        boolean boolean39 = node36.isFor();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        boolean boolean87 = node70.hasOneChild();
        boolean boolean88 = node70.isNull();
        boolean boolean89 = node70.isCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean70 = node69.isComma();
        boolean boolean71 = node69.isCall();
        boolean boolean72 = node69.isGetElem();
        boolean boolean73 = node69.isRegExp();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        node13.putIntProp(0, (int) '4');
        boolean boolean18 = node13.isStringKey();
        com.google.javascript.rhino.InputId inputId19 = node13.getInputId();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId19);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        boolean boolean34 = node5.isAssignAdd();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node5.setJSType(jSType35);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        int int32 = node15.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = null;
        com.google.javascript.rhino.Node node34 = node15.setJSDocInfo(jSDocInfo33);
        boolean boolean35 = node34.isBreak();
        int int36 = node34.getSourceOffset();
        boolean boolean37 = node34.isDo();
        boolean boolean38 = node34.isRegExp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isCall();
        boolean boolean16 = node5.hasOneChild();
        boolean boolean17 = node5.isQualifiedName();
        boolean boolean18 = node5.isOr();
        boolean boolean19 = node5.isCast();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(0);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        boolean boolean16 = node5.isOr();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node23.isFor();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, node23, 0, 0);
        boolean boolean34 = node23.isString();
        boolean boolean35 = node23.isEmpty();
        node5.putProp((int) '#', (java.lang.Object) boolean35);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node42.isFor();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node42, 0, 0);
        boolean boolean53 = node42.isString();
        int int54 = node42.getSourceOffset();
        boolean boolean55 = node42.isVarArgs();
        boolean boolean56 = node42.isDo();
        com.google.javascript.rhino.Node node57 = node42.getNext();
        com.google.javascript.rhino.Node node58 = node5.srcref(node42);
        com.google.javascript.rhino.Node node59 = node5.getParent();
        node59.setVarArgs(true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node16.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder66.append("ERROR");
        fileLevelJsDocBuilder66.append("");
        fileLevelJsDocBuilder66.append("LE 0");
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        boolean boolean34 = node6.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node6.setJSType(jSType35);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node46.isEquivalentToTyped(node58);
        boolean boolean60 = node58.isAssignAdd();
        boolean boolean61 = node58.isSyntheticBlock();
        node58.setSourceEncodedPosition((int) '4');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder64 = node58.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(1, node1, node6, node58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder64);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isInc();
        boolean boolean44 = node13.isCast();
        com.google.javascript.rhino.Node node45 = node13.getNext();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        boolean boolean35 = node15.isBreak();
        boolean boolean36 = node15.isVar();
        boolean boolean37 = node15.isLabelName();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        boolean boolean66 = node53.isEquivalentToTyped(node65);
        boolean boolean67 = node53.isNull();
        com.google.javascript.rhino.Node node68 = node42.copyInformationFromForTree(node53);
        boolean boolean69 = node53.isSetterDef();
        int int70 = node53.getLength();
        boolean boolean71 = node53.isName();
        boolean boolean72 = node53.isFromExterns();
        boolean boolean73 = node53.isDec();
        boolean boolean74 = node53.isVarArgs();
        boolean boolean75 = node53.isReturn();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = node15.removeChildAfter(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node15.isAssign();
        int int17 = node15.getCharno();
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isIf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        int int3 = node2.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node48.isObjectLit();
        boolean boolean50 = node48.isObjectLit();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable51 = node48.getAncestors();
        java.lang.String str52 = node48.getSourceFileName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(ancestorIterable51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 47, 8);
        node3.setLength((int) (short) 1);
        boolean boolean6 = node3.isString();
        boolean boolean7 = node3.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        node45.setSourceEncodedPositionForTree((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = node45.getExistingIntProp(30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 30");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(4, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(55, nodeArray5, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(51, nodeArray5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node16.siblings();
        int int18 = node16.getSideEffectFlags();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        boolean boolean24 = node21.isIf();
        node21.removeProp(12);
        boolean boolean27 = node21.isVarArgs();
        node21.putBooleanProp(23, false);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        boolean boolean37 = node36.isIn();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(47, node36, node42);
        boolean boolean45 = node44.isRegExp();
        boolean boolean46 = node44.isGetElem();
        com.google.javascript.rhino.Node node47 = node21.copyInformationFromForTree(node44);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isInstanceOf();
        java.lang.String str25 = node21.toStringTree();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node41.isNull();
        com.google.javascript.rhino.Node node56 = node30.copyInformationFromForTree(node41);
        node30.detachChildren();
        boolean boolean58 = node30.isName();
        java.lang.Object obj60 = node30.getProp(4);
        com.google.javascript.rhino.Node node61 = node21.srcrefTree(node30);
        node30.addSuppression("hi!");
        boolean boolean64 = node30.isFor();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ERROR\n" + "'", str25, "ERROR\n");
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '4', "NUMBER 4095.0", (int) (short) 100, 39);
        node4.setString("REGEXP ");
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isSyntheticBlock();
        int int33 = node15.getSourcePosition();
        boolean boolean34 = node15.isOr();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isCall();
        boolean boolean16 = node5.hasOneChild();
        boolean boolean17 = node5.isQualifiedName();
        boolean boolean18 = node5.isOr();
        boolean boolean19 = node5.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 57, 39, (int) (byte) 10);
        boolean boolean4 = node3.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) -1, "", 43, 40);
        boolean boolean5 = node4.isRegExp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        boolean boolean50 = node38.isReturn();
        int int51 = node15.getIndexOfChild(node38);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        boolean boolean74 = node61.isEquivalentToTyped(node73);
        boolean boolean75 = node61.isNull();
        boolean boolean76 = node61.isInstanceOf();
        boolean boolean77 = node15.hasChild(node61);
        boolean boolean78 = node61.isAssign();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray4, 1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(49, nodeArray4, 4, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((-1), nodeArray4);
        node14.setSourceEncodedPosition(54);
        node14.detachChildren();
        boolean boolean18 = node14.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        boolean boolean14 = node4.isLocalResultCall();
        boolean boolean15 = node4.mayMutateGlobalStateOrThrow();
        java.lang.String str16 = node4.toStringTree();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ERROR\n" + "'", str16, "ERROR\n");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        boolean boolean38 = node35.isLabel();
        int int39 = node35.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node61.isAssignAdd();
        com.google.javascript.rhino.Node node64 = node61.getParent();
        boolean boolean65 = node61.isInc();
        node61.setVarArgs(true);
        com.google.javascript.rhino.Node node68 = node35.useSourceInfoFrom(node61);
        java.lang.Object obj70 = node61.getProp(8);
        com.google.javascript.rhino.Node node71 = node61.getLastSibling();
        int int72 = node61.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            node61.setDouble((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR [var_args_name: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.hasMoreThanOneChild();
        boolean boolean16 = node5.isNumber();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isInstanceOf();
        boolean boolean19 = node5.isCase();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        boolean boolean26 = node19.isFor();
        boolean boolean27 = node19.isParamList();
        com.google.javascript.rhino.Node node28 = node19.removeFirstChild();
        int int29 = node10.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(47, "");
        int int33 = node32.getLineno();
        com.google.javascript.rhino.Node node34 = node10.copyInformationFromForTree(node32);
        boolean boolean35 = node34.isInc();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "hi!", 1, 52);
        com.google.javascript.rhino.Node node5 = node4.getParent();
        node4.setOptionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: INSTANCEOF hi! 1 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder2.append("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
        fileLevelJsDocBuilder2.append("ERROR [change_time: 55]");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node26.children();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        node55.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node59 = node26.useSourceInfoFromForTree(node55);
        boolean boolean60 = node26.isGetProp();
        java.lang.String str64 = node26.toString(false, true, true);
        boolean boolean65 = node26.isThrow();
        boolean boolean66 = node4.isEquivalentToShallow(node26);
        boolean boolean67 = node26.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ERROR" + "'", str64, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        boolean boolean38 = node25.isEquivalentToTyped(node37);
        boolean boolean39 = node37.isAssignAdd();
        boolean boolean40 = node37.isGetElem();
        node15.addChildrenToFront(node37);
        node15.setChangeTime(0);
        int int44 = node15.getSideEffectFlags();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        node13.putIntProp(0, (int) '4');
        boolean boolean18 = node13.isStringKey();
        boolean boolean19 = node13.isNot();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str10 = node4.toString(true, true, false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node4.siblings();
        node4.setChangeTime((int) ' ');
        int int14 = node4.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR" + "'", str10, "ERROR");
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        com.google.javascript.rhino.Node node34 = node33.cloneNode();
        boolean boolean35 = node34.isScript();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node18.isAssignAdd();
        int int39 = node18.getChangeTime();
        com.google.javascript.rhino.Node node40 = node18.getFirstChild();
        boolean boolean41 = node18.isNE();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 1, 100, 19);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        boolean boolean44 = node26.isName();
        com.google.javascript.rhino.Node node45 = node4.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean46 = node26.isStringKey();
        boolean boolean47 = node26.isTrue();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        boolean boolean53 = node52.isCast();
        com.google.javascript.rhino.Node node54 = node26.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        boolean boolean63 = node62.isIn();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node85 = node79.useSourceInfoIfMissingFrom(node84);
        boolean boolean86 = node73.isEquivalentToTyped(node85);
        boolean boolean87 = node73.isNull();
        com.google.javascript.rhino.Node node88 = node62.copyInformationFromForTree(node73);
        boolean boolean89 = node73.isSetterDef();
        int int90 = node73.getLength();
        boolean boolean91 = node73.isDebugger();
        boolean boolean92 = node57.isEquivalentToTyped(node73);
        boolean boolean93 = node57.isCast();
        com.google.javascript.rhino.Node node94 = node52.useSourceInfoFrom(node57);
        boolean boolean95 = node52.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        boolean boolean50 = node38.isReturn();
        int int51 = node15.getIndexOfChild(node38);
        boolean boolean52 = node15.isLocalResultCall();
        boolean boolean53 = node15.isVar();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        boolean boolean15 = node9.isBlock();
        boolean boolean16 = node9.isInstanceOf();
        boolean boolean17 = node9.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node9.getJSDocInfo();
        node9.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isCatch();
        int int16 = node9.getSideEffectFlags();
        node9.setSourceFileForTesting("FALSE ERROR [change_time: 55]");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node16.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        boolean boolean79 = node72.isFor();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0, node72, 0, 0);
        boolean boolean83 = node72.isString();
        int int84 = node72.getSourceOffset();
        boolean boolean85 = node72.isVarArgs();
        boolean boolean86 = node72.isDo();
        boolean boolean87 = node72.isScript();
        com.google.javascript.rhino.Node node88 = node72.getLastChild();
        com.google.javascript.rhino.Node node89 = node16.useSourceInfoFromForTree(node72);
        boolean boolean90 = node72.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "", (-1), (int) (byte) 10);
        boolean boolean5 = node4.isIf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isSetterDef();
        boolean boolean34 = node15.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node4.isLocalResultCall();
        int int34 = node4.getSourceOffset();
        boolean boolean35 = node4.isNull();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node38.isEquivalentToTyped(node50);
        boolean boolean52 = node38.isNull();
        com.google.javascript.rhino.Node node53 = node27.copyInformationFromForTree(node38);
        boolean boolean54 = node38.isCase();
        int int55 = node38.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = null;
        com.google.javascript.rhino.Node node57 = node38.setJSDocInfo(jSDocInfo56);
        com.google.javascript.rhino.Node node58 = node21.copyInformationFromForTree(node38);
        boolean boolean59 = node58.isOptionalArg();
        com.google.javascript.rhino.Node node60 = node58.getParent();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, node4, (int) ' ', (int) '#');
        boolean boolean8 = node7.isCast();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        boolean boolean21 = node14.isFor();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(0, node14, 0, 0);
        boolean boolean25 = node14.isString();
        int int26 = node14.getSourceOffset();
        boolean boolean27 = node14.isVarArgs();
        boolean boolean28 = node14.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node14.getJSDocInfo();
        boolean boolean30 = node14.isSyntheticBlock();
        int int31 = node14.getSideEffectFlags();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node14.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node34 = node14.getAncestor(0);
        com.google.javascript.rhino.Node node35 = node7.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.InputId inputId36 = node7.getInputId();
        boolean boolean37 = node7.isBlock();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(53, "", 15, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        boolean boolean12 = node4.isGetterDef();
        boolean boolean13 = node4.isArrayLit();
        boolean boolean14 = node4.isWith();
        boolean boolean15 = node4.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, 100, 8);
        boolean boolean4 = node3.mayMutateGlobalStateOrThrow();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node45.isNull();
        com.google.javascript.rhino.Node node60 = node34.copyInformationFromForTree(node45);
        boolean boolean61 = node45.isSetterDef();
        int int62 = node45.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node45.children();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        node74.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node78 = node45.useSourceInfoFromForTree(node74);
        boolean boolean79 = node74.isLabel();
        boolean boolean80 = node29.isEquivalentToTyped(node74);
        boolean boolean81 = node29.isReturn();
        com.google.javascript.rhino.Node node82 = node29.cloneTree();
        node82.setWasEmptyNode(true);
        boolean boolean85 = node82.isStringKey();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        com.google.javascript.rhino.Node node21 = node13.getFirstChild();
        int int22 = node13.getLength();
        com.google.javascript.rhino.InputId inputId23 = node13.getInputId();
        boolean boolean24 = node13.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = node13.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        boolean boolean42 = node40.isVoid();
        boolean boolean43 = node40.isObjectLit();
        boolean boolean44 = node40.isName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        node15.removeProp(16);
        node15.putBooleanProp(16, false);
        int int37 = node15.getLineno();
        com.google.javascript.rhino.Node node38 = node15.cloneNode();
        com.google.javascript.rhino.Node node39 = node15.getLastChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        boolean boolean31 = node21.isIf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        com.google.javascript.rhino.Node node42 = node40.getParent();
        boolean boolean43 = node42.isFalse();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node48.isObjectLit();
        boolean boolean50 = node48.isFalse();
        node48.removeProp(0);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        node15.removeProp(16);
        node15.putBooleanProp(16, false);
        int int37 = node15.getLineno();
        com.google.javascript.rhino.Node node38 = node15.cloneNode();
        node38.setOptionalArg(true);
        boolean boolean41 = node38.isNumber();
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        boolean boolean43 = node42.isNot();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        boolean boolean46 = node15.isName();
        boolean boolean47 = node15.isThis();
        boolean boolean48 = node15.isNot();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        boolean boolean29 = node28.isDelProp();
        boolean boolean30 = node28.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        boolean boolean44 = node26.isName();
        com.google.javascript.rhino.Node node45 = node4.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean46 = node26.isStringKey();
        boolean boolean47 = node26.isTrue();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        boolean boolean53 = node52.isCast();
        com.google.javascript.rhino.Node node54 = node26.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node55 = node26.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isInstanceOf();
        java.lang.String str25 = node21.toStringTree();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node41.isNull();
        com.google.javascript.rhino.Node node56 = node30.copyInformationFromForTree(node41);
        node30.detachChildren();
        boolean boolean58 = node30.isName();
        java.lang.Object obj60 = node30.getProp(4);
        com.google.javascript.rhino.Node node61 = node21.srcrefTree(node30);
        boolean boolean62 = node61.mayMutateGlobalStateOrThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ERROR\n" + "'", str25, "ERROR\n");
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 0, 8);
        boolean boolean4 = node3.isVarArgs();
        boolean boolean5 = node3.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isCast();
        boolean boolean39 = node2.isFunction();
        int int40 = node2.getLength();
        boolean boolean41 = node2.isSetterDef();
        java.lang.String str42 = node2.getSourceFileName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        java.lang.String str23 = node4.checkTreeEquals(node22);
        boolean boolean24 = node22.isVar();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node40.isAssign();
        int int42 = node40.getCharno();
        java.util.Set<java.lang.String> strSet43 = node40.getDirectives();
        boolean boolean44 = node40.isBlock();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isCast();
        com.google.javascript.rhino.InputId inputId51 = node49.getInputId();
        node49.setType((int) 'a');
        java.util.Set<java.lang.String> strSet54 = node49.getDirectives();
        node49.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node67.isEquivalentToTyped(node79);
        boolean boolean81 = node79.isAssignAdd();
        boolean boolean82 = node79.hasChildren();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(32, node79, 47, 32);
        node49.addChildToFront(node85);
        node85.setSourceEncodedPositionForTree(56);
        com.google.javascript.rhino.Node node89 = node40.srcrefTree(node85);
        com.google.javascript.rhino.Node node90 = node22.copyInformationFrom(node85);
        com.google.javascript.rhino.Node node91 = node90.getParent();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(inputId51);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.lang.String str23 = node9.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        boolean boolean59 = node58.isIn();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        boolean boolean65 = node64.isIn();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(47, node58, node64);
        node58.detachChildren();
        boolean boolean68 = node58.hasMoreThanOneChild();
        boolean boolean69 = node58.isNumber();
        com.google.javascript.rhino.Node node70 = node45.srcref(node58);
        com.google.javascript.rhino.Node node71 = node9.clonePropsFrom(node58);
        boolean boolean72 = node9.hasChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.toString();
        boolean boolean18 = node5.mayMutateGlobalStateOrThrow();
        boolean boolean19 = node5.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        boolean boolean31 = node5.isGetElem();
        node5.setLineno(2);
        boolean boolean34 = node5.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        sideEffectFlags1.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setThrows();
        org.junit.Assert.assertNotNull(sideEffectFlags3);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isThis();
        boolean boolean32 = node15.isFor();
        node15.setCharno(47);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node53.setStaticSourceFile(staticSourceFile80);
        com.google.javascript.rhino.Node node82 = node15.clonePropsFrom(node53);
        boolean boolean83 = node82.isNew();
        com.google.javascript.rhino.InputId inputId84 = node82.getInputId();
        boolean boolean85 = node82.isIn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(inputId84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) '4', "NUMBER 4095.0", (int) (short) 100, 39);
        boolean boolean36 = node35.isNew();
        node29.addChildToBack(node35);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node60.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        com.google.javascript.rhino.Node node63 = node60.setJSDocInfo(jSDocInfo62);
        node60.setCharno(23);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        boolean boolean35 = node15.isBreak();
        boolean boolean36 = node15.isLocalResultCall();
        node15.setLineno(0);
        boolean boolean39 = node15.isRegExp();
        node15.setWasEmptyNode(false);
        java.lang.String str42 = node15.toStringTree();
        boolean boolean43 = node15.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ERROR 0\n" + "'", str42, "ERROR 0\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        boolean boolean29 = node28.isDelProp();
        com.google.javascript.rhino.Node node30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = node28.copyInformationFromForTree(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.wasEmptyNode();
        boolean boolean35 = node15.isGetProp();
        boolean boolean36 = node15.isString();
        boolean boolean37 = node15.wasEmptyNode();
        java.lang.String str38 = node15.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        boolean boolean45 = node44.isIn();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node55.isNull();
        com.google.javascript.rhino.Node node70 = node44.copyInformationFromForTree(node55);
        boolean boolean71 = node55.isSetterDef();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(10, node55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = null;
        com.google.javascript.rhino.Node node74 = node55.setJSDocInfo(jSDocInfo73);
        // The following exception was thrown during execution in test generation
        try {
            node15.addChildrenToBack(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        boolean boolean44 = node43.isCast();
        com.google.javascript.rhino.InputId inputId45 = node43.getInputId();
        node43.setType((int) 'a');
        java.util.Set<java.lang.String> strSet48 = node43.getDirectives();
        boolean boolean49 = node43.hasMoreThanOneChild();
        boolean boolean50 = node43.isParamList();
        node2.addChildrenToFront(node43);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node57.isFor();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(0, node57, 0, 0);
        boolean boolean68 = node67.isAssign();
        int int69 = node67.getSideEffectFlags();
        com.google.javascript.rhino.Node node70 = node67.getLastSibling();
        boolean boolean71 = node43.hasChild(node67);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(inputId45);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node54.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node54.isOptionalArg();
        com.google.javascript.rhino.Node node58 = node54.cloneNode();
        boolean boolean59 = node58.isDefaultCase();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        boolean boolean54 = node36.mayMutateArguments();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node36.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node36.isVar();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        node4.setChangeTime((int) (short) 100);
        boolean boolean14 = node4.isNumber();
        node4.setLineno((int) ' ');
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        boolean boolean23 = node22.isCast();
        com.google.javascript.rhino.InputId inputId24 = node22.getInputId();
        node22.setType((int) 'a');
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        boolean boolean28 = node22.isWith();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node33.copyInformationFromForTree(node44);
        boolean boolean60 = node44.isSetterDef();
        int int61 = node44.getLength();
        boolean boolean62 = node44.isName();
        com.google.javascript.rhino.Node node63 = node22.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean64 = node44.isStringKey();
        boolean boolean65 = node44.isTrue();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        boolean boolean71 = node70.isCast();
        com.google.javascript.rhino.Node node72 = node44.useSourceInfoIfMissingFrom(node70);
        boolean boolean73 = node70.isLabelName();
        node4.putProp(49, (java.lang.Object) node70);
        boolean boolean75 = node70.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        node15.removeProp(16);
        node15.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean61 = node15.isEquivalentToTyped(node60);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray85 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray85, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoIfMissingFrom(node88);
        boolean boolean90 = node77.isEquivalentToTyped(node89);
        boolean boolean91 = node77.isNull();
        com.google.javascript.rhino.Node node92 = node66.copyInformationFromForTree(node77);
        node66.detachChildren();
        boolean boolean94 = node66.isFromExterns();
        node66.setSourceFileForTesting("REGEXP ");
        int int97 = node66.getLineno();
        com.google.javascript.rhino.Node node98 = node60.useSourceInfoFromForTree(node66);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node21.isNew();
        int int25 = node21.getIntProp(8);
        boolean boolean26 = node21.isQualifiedName();
        boolean boolean27 = node21.isNull();
        boolean boolean28 = node4.hasChild(node21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = node21.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node65.isThis();
        int int68 = node65.getIntProp(30);
        boolean boolean69 = node65.isRegExp();
        boolean boolean70 = node65.isRegExp();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        boolean boolean87 = node62.isVar();
        boolean boolean88 = node62.isIf();
        boolean boolean89 = node62.isNot();
        boolean boolean90 = node62.isDec();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setMutatesGlobalState();
        boolean boolean4 = sideEffectFlags3.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setThrows();
        int int6 = sideEffectFlags5.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags5.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = sideEffectFlags7.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = sideEffectFlags7.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
        org.junit.Assert.assertNotNull(sideEffectFlags8);
        org.junit.Assert.assertNotNull(sideEffectFlags9);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node node59 = node52.copyInformationFromForTree(node57);
        node59.setVarArgs(true);
        boolean boolean62 = node59.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.setMutatesThis();
        boolean boolean4 = sideEffectFlags2.areAllFlagsSet();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        boolean boolean29 = node22.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.wasEmptyNode();
        boolean boolean35 = node15.isGetProp();
        boolean boolean36 = node15.isString();
        int int37 = node15.getLineno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node5.getAncestors();
        java.lang.String str38 = node5.toString(false, true, false);
        com.google.javascript.rhino.Node node39 = node5.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            node39.setSideEffectFlags(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ERROR" + "'", str38, "ERROR");
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        node15.setVarArgs(false);
        node15.setChangeTime(55);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node60 = node57.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node57.getJsDocBuilderForNode();
        boolean boolean62 = node57.isNot();
        node15.addChildToFront(node57);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(12, "");
        com.google.javascript.rhino.Node node67 = node15.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder68 = node15.getJsDocBuilderForNode();
        boolean boolean69 = node15.isThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        boolean boolean3 = sideEffectFlags2.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags4.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags6.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = sideEffectFlags7.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
        org.junit.Assert.assertNotNull(sideEffectFlags8);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean70 = node69.isExprResult();
        int int71 = node69.getSideEffectFlags();
        boolean boolean72 = node69.isTry();
        boolean boolean73 = node69.isLabel();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node4.getJsDocBuilderForNode();
        boolean boolean15 = node4.isOptionalArg();
        boolean boolean16 = node4.isNew();
        boolean boolean17 = node4.isAssign();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        boolean boolean11 = node4.isNull();
        boolean boolean12 = node4.isCase();
        boolean boolean13 = node4.hasChildren();
        java.lang.Object obj15 = node4.getProp(42);
        boolean boolean16 = node4.isBreak();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node4.children();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable17);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray2, 2, (int) ' ');
        com.google.javascript.rhino.Node node9 = node8.getLastChild();
        boolean boolean10 = node8.isTrue();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        boolean boolean17 = node16.isIn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node27.isNull();
        com.google.javascript.rhino.Node node42 = node16.copyInformationFromForTree(node27);
        node16.detachChildren();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(48, node16);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node44.addChildrenToFront(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node44.siblings();
        com.google.javascript.rhino.Node node49 = node44.removeFirstChild();
        com.google.javascript.rhino.Node node50 = node8.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean51 = node8.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(47, node57, node63);
        java.lang.String str66 = node65.getSourceFileName();
        java.lang.String[] strArray68 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node65.setDirectives((java.util.Set<java.lang.String>) strSet69);
        boolean boolean72 = node65.isParamList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node73 = node8.removeChildAfter(node65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isCase();
        int int47 = node30.getChangeTime();
        com.google.javascript.rhino.Node node48 = node5.clonePropsFrom(node30);
        boolean boolean49 = node48.isBreak();
        boolean boolean50 = node48.hasChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(55, nodeArray4, (int) (byte) 0, (int) (short) 0);
        boolean boolean15 = node14.isExprResult();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node14.getStaticSourceFile();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "", (-1), (int) (byte) 10);
        boolean boolean5 = node4.isTrue();
        node4.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node4.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 1);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.children();
        com.google.javascript.rhino.Node node3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = node1.removeChildAfter(node3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterable2);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = null;
        com.google.javascript.rhino.Node node43 = node10.setJSDocInfo(jSDocInfo42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node53.isNew();
        int int57 = node53.getIntProp(8);
        boolean boolean58 = node53.isQualifiedName();
        boolean boolean59 = node53.isBlock();
        boolean boolean60 = node53.isInstanceOf();
        boolean boolean61 = node43.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray65, 2, (int) ' ');
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(4, nodeArray65);
        node53.addChildrenToFront(node72);
        boolean boolean74 = node53.isNull();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node53.children();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        boolean boolean29 = node28.isParamList();
        boolean boolean30 = node28.isString();
        boolean boolean31 = node28.isHook();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isHook();
        boolean boolean65 = node62.isObjectLit();
        java.lang.String str66 = node62.toString();
        boolean boolean67 = node62.isDefaultCase();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ERROR" + "'", str66, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        boolean boolean68 = node67.isIn();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray86 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray86, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node90 = node84.useSourceInfoIfMissingFrom(node89);
        boolean boolean91 = node78.isEquivalentToTyped(node90);
        boolean boolean92 = node78.isNull();
        com.google.javascript.rhino.Node node93 = node67.copyInformationFromForTree(node78);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile94 = null;
        node67.setStaticSourceFile(staticSourceFile94);
        com.google.javascript.rhino.Node node96 = node29.clonePropsFrom(node67);
        com.google.javascript.rhino.Node node97 = node9.useSourceInfoIfMissingFrom(node29);
        java.lang.String str98 = node97.getQualifiedName();
        boolean boolean99 = node97.isFalse();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        boolean boolean12 = node4.isOnlyModifiesThisCall();
        java.lang.String str13 = node4.toStringTree();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ASSIGN_MOD\n" + "'", str13, "ASSIGN_MOD\n");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(53);
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node node62 = node38.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node5.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        boolean boolean70 = node69.isIn();
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        boolean boolean76 = node75.isIn();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(47, node69, node75);
        node69.detachChildren();
        boolean boolean79 = node69.isAssign();
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray86 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray86, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node90 = node84.useSourceInfoIfMissingFrom(node89);
        boolean boolean91 = node84.isFor();
        int int93 = node84.getIntProp(0);
        boolean boolean94 = node84.isLocalResultCall();
        int int95 = node84.getSourcePosition();
        java.lang.String str96 = node69.checkTreeEquals(node84);
        com.google.javascript.rhino.Node node97 = node84.cloneNode();
        boolean boolean98 = node5.isEquivalentTo(node97);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        java.lang.String str38 = node35.toString();
        node35.setSourceEncodedPositionForTree((int) (short) 100);
        node35.removeProp((int) (short) 10);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 4095.0" + "'", str38, "NUMBER 4095.0");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        boolean boolean25 = node21.isCast();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node21.getAncestors();
        boolean boolean27 = node21.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        boolean boolean33 = node32.isIn();
        boolean boolean34 = node32.isContinue();
        boolean boolean35 = node32.isDelProp();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable36 = node32.getAncestors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node32.getJSDocInfo();
        boolean boolean38 = node32.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            node21.removeChild(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ancestorIterable36);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        boolean boolean13 = node12.isIn();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(47, node6, node12);
        node6.detachChildren();
        boolean boolean16 = node6.isAssign();
        boolean boolean17 = node6.isReturn();
        boolean boolean18 = node6.isAssign();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray22, 2, (int) ' ');
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(4, nodeArray22);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isCast();
        com.google.javascript.rhino.InputId inputId36 = node34.getInputId();
        node34.setType((int) 'a');
        java.util.Set<java.lang.String> strSet39 = node34.getDirectives();
        boolean boolean40 = node34.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(43, node6, node29, node34, 42, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        int int15 = node13.getCharno();
        boolean boolean16 = node13.isBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isSetterDef();
        com.google.javascript.rhino.Node node19 = node13.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        node15.removeProp(16);
        boolean boolean34 = node15.isArrayLit();
        node15.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.InputId inputId37 = null;
        node15.setInputId(inputId37);
        node15.setWasEmptyNode(true);
        int int41 = node15.getLength();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray4, 1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(49, nodeArray4, 4, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((-1), nodeArray4);
        boolean boolean15 = node14.isVoid();
        boolean boolean16 = node14.isCatch();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        boolean boolean35 = node18.isLabel();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node40.isCatch();
        com.google.javascript.rhino.Node node48 = node18.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node54.isFor();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(0, node54, 0, 0);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(30, node18, node64, (int) (short) -1, 16);
        boolean boolean68 = node67.isThis();
        int int70 = node67.getIntProp(30);
        boolean boolean71 = node67.isCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(37, node1, node67, 57, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node23 = node21.getChildAtIndex(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.getFirstChild();
        boolean boolean35 = node33.isNot();
        boolean boolean36 = node33.isTypeOf();
        node33.setOptionalArg(true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(4, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(55, nodeArray5, (int) (byte) 0, (int) (short) 0);
        node15.setSourceFileForTesting("ERROR [change_time: 55]");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100, node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node15.siblings();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(nodeIterable19);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        int int41 = node10.getLength();
        boolean boolean42 = node10.isGetProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        boolean boolean39 = node2.isNE();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node2.getJsDocBuilderForNode();
        boolean boolean41 = node2.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        com.google.javascript.rhino.Node node25 = node22.getParent();
        boolean boolean26 = node22.isInc();
        boolean boolean27 = node22.isSwitch();
        com.google.javascript.rhino.InputId inputId28 = node22.getInputId();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(36, node22);
        java.lang.String[] strArray34 = new java.lang.String[] { "ERROR", "", "REGEXP ", "ERROR 0\n" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = node29.isAssign();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isFor();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isCast();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        node21.setType((int) 'a');
        java.util.Set<java.lang.String> strSet26 = node21.getDirectives();
        boolean boolean27 = node21.isInc();
        com.google.javascript.rhino.Node node28 = node5.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        boolean boolean41 = node34.isFor();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(0, node34, 0, 0);
        boolean boolean45 = node34.isString();
        int int46 = node34.getSourceOffset();
        boolean boolean47 = node34.isVarArgs();
        boolean boolean48 = node34.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable49 = node34.getAncestors();
        boolean boolean50 = node34.isDelProp();
        com.google.javascript.rhino.Node node51 = node5.srcref(node34);
        boolean boolean52 = node51.isLabelName();
        boolean boolean53 = node51.isNew();
        // The following exception was thrown during execution in test generation
        try {
            node51.setSideEffectFlags(57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ancestorIterable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isCatch();
        boolean boolean19 = node5.isOnlyModifiesArgumentsCall();
        boolean boolean20 = node5.isNoSideEffectsCall();
        node5.putBooleanProp((int) '4', true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node5.siblings();
        com.google.javascript.rhino.Node node26 = node5.getAncestor(47);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        com.google.javascript.rhino.Node node25 = node22.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder26 = node22.getJsDocBuilderForNode();
        boolean boolean27 = node22.isNot();
        boolean boolean28 = node22.isExprResult();
        node22.setLineno(30);
        node22.setChangeTime((int) (short) 100);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(42, node22);
        com.google.javascript.rhino.Node node34 = null;
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(31, 56, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            node33.addChildrenAfter(node34, node38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        int int15 = node13.getCharno();
        com.google.javascript.rhino.Node node16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node17 = node13.srcrefTree(node16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(36, nodeArray3);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(2, nodeArray3, (int) (short) -1, 0);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        boolean boolean24 = node21.isIf();
        node21.removeProp(12);
        boolean boolean27 = node21.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            node21.setDouble((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isDelProp();
        boolean boolean38 = node4.isFalse();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node4.setStaticSourceFile(staticSourceFile39);
        java.lang.String str41 = node4.getSourceFileName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        boolean boolean29 = node22.isTrue();
        boolean boolean30 = node22.mayMutateGlobalStateOrThrow();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(47, node40, node46);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node50 = node48.cloneNode();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoFrom(node48);
        int int52 = node34.getSourceOffset();
        boolean boolean53 = node34.isCast();
        int int54 = node34.getChangeTime();
        node34.setVarArgs(true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNew();
        boolean boolean38 = node4.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node40 = node4.getAncestor(19);
        boolean boolean41 = node4.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        boolean boolean26 = node19.isFor();
        boolean boolean27 = node19.isParamList();
        com.google.javascript.rhino.Node node28 = node19.removeFirstChild();
        int int29 = node10.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(47, "");
        int int33 = node32.getLineno();
        com.google.javascript.rhino.Node node34 = node10.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node35 = node32.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, node4, (int) ' ', (int) '#');
        boolean boolean8 = node4.isSyntheticBlock();
        node4.detachChildren();
        boolean boolean10 = node4.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        node15.detachChildren();
        java.lang.String str36 = node15.getSourceFileName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node15.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder37);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        boolean boolean5 = node4.isAnd();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node22.isNull();
        com.google.javascript.rhino.Node node37 = node11.copyInformationFromForTree(node22);
        node11.detachChildren();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(48, node11);
        com.google.javascript.rhino.Node node40 = node39.removeFirstChild();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        boolean boolean43 = node42.isIf();
        int int44 = node39.getIndexOfChild(node42);
        boolean boolean45 = node4.isEquivalentToShallow(node42);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        node20.addChildrenToFront(node35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node35.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        boolean boolean45 = node44.isIn();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(47, node44, node50);
        java.lang.String str53 = node52.getSourceFileName();
        java.lang.String[] strArray55 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean59 = node52.isParamList();
        com.google.javascript.rhino.Node node60 = node52.getFirstChild();
        boolean boolean61 = node52.isGetProp();
        com.google.javascript.rhino.Node node62 = node52.cloneNode();
        com.google.javascript.rhino.Node node63 = node35.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        boolean boolean69 = node68.isIn();
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node80 = node74.useSourceInfoIfMissingFrom(node79);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray87 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray87, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node91 = node85.useSourceInfoIfMissingFrom(node90);
        boolean boolean92 = node79.isEquivalentToTyped(node91);
        boolean boolean93 = node79.isNull();
        com.google.javascript.rhino.Node node94 = node68.copyInformationFromForTree(node79);
        boolean boolean95 = node94.isTypeOf();
        boolean boolean96 = node94.isInc();
        int int97 = node63.getIndexOfChild(node94);
        boolean boolean98 = node94.isQuotedString();
        boolean boolean99 = node94.isNumber();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(nodeArray87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        com.google.javascript.rhino.InputId inputId14 = node5.getInputId();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isCast();
        com.google.javascript.rhino.InputId inputId21 = node19.getInputId();
        node19.setType((int) 'a');
        java.util.Set<java.lang.String> strSet24 = node19.getDirectives();
        boolean boolean25 = node19.isInc();
        com.google.javascript.rhino.Node node26 = node5.srcrefTree(node19);
        node19.setSourceEncodedPositionForTree(19);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        boolean boolean42 = node40.isNumber();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node10.isNew();
        int int14 = node10.getIntProp(8);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        boolean boolean26 = node25.isVoid();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node48.isAssignAdd();
        boolean boolean51 = node48.hasChildren();
        boolean boolean52 = node48.isSetterDef();
        node48.addSuppression("ERROR\n");
        boolean boolean55 = node25.isEquivalentToShallow(node48);
        boolean boolean56 = node25.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        com.google.javascript.rhino.Node node58 = node25.setJSDocInfo(jSDocInfo57);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 100, node10, node25);
        boolean boolean60 = node10.isDec();
        boolean boolean61 = node10.isScript();
        boolean boolean62 = node10.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isOr();
        boolean boolean21 = node5.isSwitch();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        java.lang.String str49 = node48.toStringTree();
        com.google.javascript.rhino.Node node50 = node48.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node50.setType(16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ERROR\n" + "'", str49, "ERROR\n");
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node5.siblings();
        node5.setOptionalArg(false);
        boolean boolean58 = node5.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags3.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags6.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node15.isAssign();
        int int17 = node15.getSideEffectFlags();
        com.google.javascript.rhino.Node node18 = node15.getLastSibling();
        boolean boolean19 = node15.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node15.getJSDocInfo();
        node15.setLength((int) (short) -1);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(jSDocInfo20);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        node20.addChildrenToFront(node35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node35.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        boolean boolean44 = node43.isIn();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        boolean boolean67 = node54.isEquivalentToTyped(node66);
        boolean boolean68 = node54.isNull();
        com.google.javascript.rhino.Node node69 = node43.copyInformationFromForTree(node54);
        boolean boolean70 = node54.isOr();
        node35.addChildrenToBack(node54);
        node35.addSuppression("ASSIGN_MOD\n");
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        boolean boolean50 = node15.isOnlyModifiesArgumentsCall();
        boolean boolean51 = node15.isAssignAdd();
        boolean boolean53 = node15.getBooleanProp(0);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags54 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags55 = sideEffectFlags54.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = sideEffectFlags55.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags57 = sideEffectFlags56.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags58 = sideEffectFlags57.setAllFlags();
        int int59 = sideEffectFlags58.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags60 = sideEffectFlags58.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags61 = sideEffectFlags60.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node15.setSideEffectFlags(sideEffectFlags61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags55);
        org.junit.Assert.assertNotNull(sideEffectFlags56);
        org.junit.Assert.assertNotNull(sideEffectFlags57);
        org.junit.Assert.assertNotNull(sideEffectFlags58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlags60);
        org.junit.Assert.assertNotNull(sideEffectFlags61);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node46.children();
        boolean boolean52 = node46.isAssign();
        int int53 = node46.getType();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(43, nodeArray4, 32, (-1));
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(40, nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(42, 4, 56);
        int int5 = node3.getIntProp((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        node20.addChildrenToFront(node35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node35.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        boolean boolean45 = node44.isIn();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(47, node44, node50);
        java.lang.String str53 = node52.getSourceFileName();
        java.lang.String[] strArray55 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean59 = node52.isParamList();
        com.google.javascript.rhino.Node node60 = node52.getFirstChild();
        boolean boolean61 = node52.isGetProp();
        com.google.javascript.rhino.Node node62 = node52.cloneNode();
        com.google.javascript.rhino.Node node63 = node35.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node62.isAssignAdd();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        boolean boolean32 = node30.isInc();
        boolean boolean33 = node30.isOr();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        node38.detachChildren();
        boolean boolean66 = node38.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node38.setJSType(jSType67);
        com.google.javascript.rhino.Node node69 = node30.copyInformationFrom(node38);
        boolean boolean70 = node69.isCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        node15.setVarArgs(false);
        boolean boolean34 = node15.isTrue();
        boolean boolean35 = node15.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node10.setStaticSourceFile(staticSourceFile41);
        boolean boolean43 = node10.isDefaultCase();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 1);
        boolean boolean46 = node45.isNumber();
        node10.addChildToBack(node45);
        node45.detachChildren();
        boolean boolean49 = node45.isFunction();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        boolean boolean51 = node46.isAdd();
        com.google.javascript.rhino.Node node53 = node46.getAncestor(53);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        boolean boolean66 = node59.isFor();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(0, node59, 0, 0);
        boolean boolean70 = node59.isString();
        int int71 = node59.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoIfMissingFrom(node81);
        com.google.javascript.rhino.Node node83 = node59.copyInformationFrom(node82);
        boolean boolean84 = node59.isHook();
        com.google.javascript.rhino.Node node85 = node59.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node53.addChildrenToFront(node85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node88 = node82.useSourceInfoIfMissingFrom(node87);
        boolean boolean89 = node76.isEquivalentToTyped(node88);
        boolean boolean90 = node88.isAssignAdd();
        com.google.javascript.rhino.Node node91 = node88.getParent();
        boolean boolean92 = node88.isInc();
        boolean boolean93 = node88.isSwitch();
        boolean boolean94 = node88.isSyntheticBlock();
        boolean boolean95 = node16.isEquivalentTo(node88);
        boolean boolean96 = node16.isFor();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        node5.setIsSyntheticBlock(false);
        int int56 = node5.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isThis();
        node13.setType(50);
        boolean boolean46 = node13.isEmpty();
        boolean boolean47 = node13.mayMutateArguments();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        boolean boolean7 = node4.isDelProp();
        node4.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        int int41 = node33.getLength();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node33.setJSType(jSType42);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        java.lang.String str38 = node35.toString();
        node35.setSourceEncodedPositionForTree((int) (short) 100);
        node35.setSourceEncodedPosition(46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node35.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 4095.0" + "'", str38, "NUMBER 4095.0");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        java.lang.Appendable appendable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        boolean boolean29 = node28.isParamList();
        boolean boolean30 = node28.isString();
        boolean boolean31 = node28.mayMutateGlobalStateOrThrow();
        boolean boolean32 = node28.isContinue();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node60, node66);
        boolean boolean69 = node68.isRegExp();
        boolean boolean70 = node68.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node71 = node54.srcref(node68);
        boolean boolean72 = node54.isDelProp();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable73 = node54.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor74 = ancestorIterable73.iterator();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(ancestorIterable73);
        org.junit.Assert.assertNotNull(nodeItor74);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.Node node20 = node5.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node20.putIntProp((int) '#', 19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        int int11 = node4.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        boolean boolean41 = node40.isQualifiedName();
        int int43 = node40.getIntProp((int) (byte) 0);
        node4.addChildToFront(node40);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        node21.setVarArgs(true);
        boolean boolean28 = node21.isVoid();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node33.siblings();
        com.google.javascript.rhino.Node node38 = node33.removeFirstChild();
        java.lang.Appendable appendable39 = null;
        // The following exception was thrown during execution in test generation
        try {
            node38.appendStringTree(appendable39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node60.isEquivalentToTyped(node72);
        boolean boolean74 = node60.isNull();
        com.google.javascript.rhino.Node node75 = node49.copyInformationFromForTree(node60);
        boolean boolean76 = node60.isSetterDef();
        int int77 = node60.getLength();
        boolean boolean78 = node60.isDebugger();
        boolean boolean79 = node44.isEquivalentToTyped(node60);
        boolean boolean80 = node44.isCast();
        node41.addChildrenToBack(node44);
        com.google.javascript.rhino.Node node82 = node44.getLastSibling();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node5.getAncestors();
        boolean boolean21 = node5.isNot();
        com.google.javascript.rhino.InputId inputId22 = node5.getInputId();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = node5.getExistingIntProp((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: -1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("REGEXP ", (int) (byte) 10, 2);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isIn();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        boolean boolean33 = node20.isEquivalentToTyped(node32);
        boolean boolean34 = node20.isNull();
        com.google.javascript.rhino.Node node35 = node9.copyInformationFromForTree(node20);
        node9.detachChildren();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(48, node9);
        boolean boolean38 = node9.isAssignAdd();
        boolean boolean39 = node9.hasChildren();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node9);
        boolean boolean41 = node9.isComma();
        boolean boolean42 = node9.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node5.siblings();
        boolean boolean56 = node5.isTypeOf();
        boolean boolean57 = node5.isString();
        boolean boolean58 = node5.isNull();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray3, 32, (-1));
        boolean boolean13 = node12.isAssignAdd();
        boolean boolean14 = node12.isGetProp();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node31.isEquivalentToTyped(node43);
        boolean boolean45 = node31.isNull();
        com.google.javascript.rhino.Node node46 = node20.copyInformationFromForTree(node31);
        boolean boolean47 = node31.isSetterDef();
        int int48 = node31.getLength();
        boolean boolean49 = node31.isName();
        boolean boolean50 = node31.isFromExterns();
        java.lang.String str51 = node31.toStringTree();
        boolean boolean52 = node31.isQualifiedName();
        boolean boolean53 = node31.isTypeOf();
        com.google.javascript.rhino.Node node54 = node13.useSourceInfoIfMissingFrom(node31);
        boolean boolean55 = node31.isThrow();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ERROR\n" + "'", str51, "ERROR\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node21.getJSDocInfo();
        boolean boolean26 = node21.isTypeOf();
        node21.setWasEmptyNode(true);
        int int29 = node21.getSourceOffset();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node21.siblings();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node21.new FileLevelJsDocBuilder();
        boolean boolean32 = node21.isStringKey();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int12 = node9.getCharno();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        boolean boolean18 = node17.isCast();
        com.google.javascript.rhino.InputId inputId19 = node17.getInputId();
        node17.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node node23 = node9.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node23.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            node23.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder24);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        boolean boolean50 = node15.isOnlyModifiesArgumentsCall();
        boolean boolean51 = node15.isAssignAdd();
        boolean boolean52 = node15.isBlock();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 32, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        node19.putIntProp((int) (byte) 0, 42);
        boolean boolean41 = node19.isDec();
        boolean boolean42 = node19.isVoid();
        node3.addChildToBack(node19);
        boolean boolean44 = node19.isAssign();
        int int45 = node19.getLineno();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str10 = node4.toString(true, true, false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node4.siblings();
        boolean boolean12 = node4.isGetProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR" + "'", str10, "ERROR");
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        node21.addSuppression("hi!");
        boolean boolean33 = node21.isObjectLit();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        boolean boolean39 = node38.isParamList();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        boolean boolean52 = node45.isFor();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(0, node45, 0, 0);
        boolean boolean56 = node45.isReturn();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        boolean boolean69 = node62.isFor();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(0, node62, 0, 0);
        boolean boolean73 = node62.isNew();
        boolean boolean74 = node62.isCall();
        node62.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node77 = node45.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean78 = node62.isDelProp();
        boolean boolean79 = node62.isTry();
        boolean boolean80 = node38.isEquivalentToTyped(node62);
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildToBack(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        boolean boolean38 = node37.isIn();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        boolean boolean44 = node43.isIn();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(47, node37, node43);
        node37.detachChildren();
        boolean boolean47 = node37.isAssign();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        int int61 = node52.getIntProp(0);
        boolean boolean62 = node52.isLocalResultCall();
        int int63 = node52.getSourcePosition();
        java.lang.String str64 = node37.checkTreeEquals(node52);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray89 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray89, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node93 = node87.useSourceInfoIfMissingFrom(node92);
        com.google.javascript.rhino.Node node94 = node70.copyInformationFrom(node93);
        com.google.javascript.rhino.Node node95 = node37.useSourceInfoIfMissingFrom(node94);
        boolean boolean96 = node28.isEquivalentToShallow(node37);
        boolean boolean97 = node28.isScript();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(nodeArray89);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        int int31 = node4.getType();
        boolean boolean32 = node4.isVar();
        boolean boolean33 = node4.isContinue();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node52.isNull();
        com.google.javascript.rhino.Node node67 = node41.copyInformationFromForTree(node52);
        boolean boolean68 = node52.isSetterDef();
        int int69 = node52.getLength();
        boolean boolean70 = node52.isDebugger();
        boolean boolean71 = node36.isEquivalentToTyped(node52);
        boolean boolean72 = node36.isBreak();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) 'a', 56, (int) (byte) 10);
        node36.addChildToFront(node76);
        java.lang.String str78 = node4.checkTreeEquals(node76);
        node76.setSourceFileForTesting("hi!");
        node76.setOptionalArg(false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n" + "'", str78, "Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        boolean boolean15 = node9.isBlock();
        boolean boolean16 = node9.isInstanceOf();
        boolean boolean17 = node9.isDo();
        boolean boolean18 = node9.isWhile();
        boolean boolean19 = node9.isString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("REGEXP \n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isSyntheticBlock();
        java.lang.String str33 = node15.getQualifiedName();
        boolean boolean34 = node15.isLabelName();
        boolean boolean35 = node15.isNot();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node15.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator37 = nodeIterable36.spliterator();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(nodeSpliterator37);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        boolean boolean31 = node5.isGetElem();
        node5.addSuppression("");
        boolean boolean34 = node5.isDebugger();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        boolean boolean34 = node15.isDo();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node15.clonePropsFrom(node44);
        boolean boolean60 = node15.isDefaultCase();
        java.lang.String str61 = node15.getQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        boolean boolean60 = node57.isIn();
        node15.addChildToBack(node57);
        boolean boolean62 = node15.isStringKey();
        boolean boolean63 = node15.isOr();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node73.isNew();
        int int77 = node73.getIntProp(8);
        boolean boolean78 = node73.isRegExp();
        java.lang.String str82 = node73.toString(true, false, true);
        boolean boolean83 = node73.isQualifiedName();
        node73.removeProp(30);
        int int86 = node15.getIndexOfChild(node73);
        boolean boolean87 = node73.isSyntheticBlock();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ERROR" + "'", str82, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.setMutatesThis();
        sideEffectFlags3.clearSideEffectFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isReturn();
        com.google.javascript.rhino.Node node44 = node13.removeChildren();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(47, node50, node56);
        java.lang.String str59 = node58.getSourceFileName();
        java.lang.String[] strArray61 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean65 = node58.isParamList();
        com.google.javascript.rhino.Node node66 = node58.getFirstChild();
        boolean boolean67 = node66.isThis();
        int int68 = node44.getIndexOfChild(node66);
        boolean boolean69 = node66.isHook();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(52, "EQ \n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        java.lang.String str20 = node5.toString();
        node5.setLength((int) ' ');
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ERROR" + "'", str20, "ERROR");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        int int20 = node5.getChildCount();
        boolean boolean21 = node5.hasMoreThanOneChild();
        node5.setLength((int) (short) -1);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray9, 1, 4095);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(49, nodeArray9, 4, 0);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((-1), nodeArray9);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', nodeArray9, 15, 10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(0, nodeArray9);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(12, nodeArray9);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(40, nodeArray9, 48, 40);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(31, nodeArray9, (int) (short) -1, 0);
        org.junit.Assert.assertNotNull(nodeArray9);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isDebugger();
        int int34 = node15.getType();
        boolean boolean36 = node15.getBooleanProp((int) (short) 1);
        com.google.javascript.rhino.Node node37 = node15.getLastChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        boolean boolean38 = node37.isIn();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        boolean boolean44 = node43.isIn();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(47, node37, node43);
        node37.detachChildren();
        boolean boolean47 = node4.isEquivalentTo(node37);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable95 = node70.children();
        boolean boolean96 = node70.isCatch();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(nodeIterable95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasMoreThanOneChild();
        boolean boolean42 = node10.isSyntheticBlock();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        com.google.javascript.rhino.InputId inputId70 = node49.getInputId();
        boolean boolean71 = node49.isOr();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(inputId70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        com.google.javascript.rhino.jstype.JSType jSType87 = node70.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder88 = node70.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node89 = node70.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable90 = node89.children();
        node89.setSourceFileForTesting("ERROR\n");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(nodeIterable90);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("ERROR\n", 46, 40);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        boolean boolean39 = node2.isNE();
        boolean boolean40 = node2.isName();
        boolean boolean41 = node2.isCatch();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 100, 0, 8);
        boolean boolean46 = node45.isVarArgs();
        boolean boolean47 = node45.isRegExp();
        com.google.javascript.rhino.Node node48 = node2.copyInformationFromForTree(node45);
        boolean boolean49 = node48.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("REGEXP ");
        boolean boolean2 = node1.isContinue();
        boolean boolean3 = node1.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        node3.setSourceFileForTesting("ASSIGN_MOD\n");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray2, 2, (int) ' ');
        com.google.javascript.rhino.Node node9 = node8.getLastChild();
        boolean boolean10 = node8.isTrue();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        boolean boolean17 = node16.isIn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node27.isNull();
        com.google.javascript.rhino.Node node42 = node16.copyInformationFromForTree(node27);
        node16.detachChildren();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(48, node16);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node44.addChildrenToFront(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node44.siblings();
        com.google.javascript.rhino.Node node49 = node44.removeFirstChild();
        com.google.javascript.rhino.Node node50 = node8.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean51 = node44.isGetterDef();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        boolean boolean42 = node40.isVoid();
        boolean boolean43 = node40.isObjectLit();
        java.lang.Appendable appendable44 = null;
        // The following exception was thrown during execution in test generation
        try {
            node40.appendStringTree(appendable44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(47, node40, node46);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node50 = node48.cloneNode();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoFrom(node48);
        node48.setSourceFileForTesting("");
        boolean boolean54 = node48.wasEmptyNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        node20.addChildrenToFront(node35);
        boolean boolean37 = node35.isObjectLit();
        boolean boolean38 = node35.isNull();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node35.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder39);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 1, (int) (byte) -1, 30);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isCase();
        int int36 = node19.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = null;
        com.google.javascript.rhino.Node node38 = node19.setJSDocInfo(jSDocInfo37);
        boolean boolean39 = node38.isBreak();
        com.google.javascript.rhino.Node node40 = node3.copyInformationFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        boolean boolean46 = node45.isIn();
        boolean boolean47 = node45.isContinue();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        boolean boolean53 = node52.isIn();
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        boolean boolean76 = node63.isEquivalentToTyped(node75);
        boolean boolean77 = node63.isNull();
        com.google.javascript.rhino.Node node78 = node52.copyInformationFromForTree(node63);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = null;
        node52.setStaticSourceFile(staticSourceFile79);
        java.lang.String str84 = node52.toString(true, false, true);
        boolean boolean85 = node52.isDelProp();
        boolean boolean86 = node52.isFalse();
        boolean boolean87 = node52.isScript();
        com.google.javascript.rhino.Node node88 = node45.copyInformationFromForTree(node52);
        com.google.javascript.rhino.Node node89 = node3.srcref(node88);
        boolean boolean90 = node88.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ERROR" + "'", str84, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 2, (int) (byte) 1, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node60.isEquivalentToTyped(node72);
        boolean boolean74 = node60.isNull();
        com.google.javascript.rhino.Node node75 = node49.copyInformationFromForTree(node60);
        boolean boolean76 = node60.isSetterDef();
        int int77 = node60.getLength();
        boolean boolean78 = node60.isDebugger();
        boolean boolean79 = node44.isEquivalentToTyped(node60);
        boolean boolean80 = node44.isCast();
        node41.addChildrenToBack(node44);
        com.google.javascript.rhino.Node node82 = null;
        // The following exception was thrown during execution in test generation
        try {
            node44.addChildrenToBack(node82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(36, 38, 56);
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        org.junit.Assert.assertNull(jSType4);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.putBooleanProp((int) (short) 100, true);
        boolean boolean10 = node4.isString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setMutatesGlobalState();
        boolean boolean4 = sideEffectFlags3.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setThrows();
        int int6 = sideEffectFlags5.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags5.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = sideEffectFlags7.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = sideEffectFlags8.setReturnsTainted();
        sideEffectFlags9.clearSideEffectFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
        org.junit.Assert.assertNotNull(sideEffectFlags8);
        org.junit.Assert.assertNotNull(sideEffectFlags9);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(15, nodeArray3);
        // The following exception was thrown during execution in test generation
        try {
            node10.setString("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: LE 0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node23 = node21.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        boolean boolean30 = node29.isIn();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node40.isNull();
        com.google.javascript.rhino.Node node55 = node29.copyInformationFromForTree(node40);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        node29.setStaticSourceFile(staticSourceFile56);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        boolean boolean63 = node62.isIn();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node85 = node79.useSourceInfoIfMissingFrom(node84);
        boolean boolean86 = node73.isEquivalentToTyped(node85);
        boolean boolean87 = node73.isNull();
        com.google.javascript.rhino.Node node88 = node62.copyInformationFromForTree(node73);
        boolean boolean89 = node73.isSetterDef();
        int int90 = node73.getLength();
        boolean boolean91 = node73.isName();
        java.lang.String str92 = node73.getSourceFileName();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((-1), node29, node73);
        boolean boolean95 = node93.getBooleanProp((int) '#');
        boolean boolean96 = node93.isHook();
        com.google.javascript.rhino.Node node97 = node23.clonePropsFrom(node93);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = node93.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.hasMoreThanOneChild();
        boolean boolean16 = node5.isNumber();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isInstanceOf();
        node5.detachChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        boolean boolean26 = node21.isTypeOf();
        boolean boolean27 = node21.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        boolean boolean37 = node36.isIf();
        int int38 = node33.getIndexOfChild(node36);
        boolean boolean39 = node33.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isTrue();
        com.google.javascript.rhino.Node node37 = node20.detachFromParent();
        boolean boolean38 = node37.isHook();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        boolean boolean12 = node4.isThis();
        int int13 = node4.getLineno();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node4.getStaticSourceFile();
        boolean boolean15 = node4.isThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node23 = node21.cloneNode();
        boolean boolean24 = node23.isAdd();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(47, node40, node46);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node50 = node48.cloneNode();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoFrom(node48);
        int int52 = node34.getSourceOffset();
        boolean boolean53 = node34.isCast();
        int int54 = node34.getChildCount();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node24.isEquivalentToTyped(node36);
        boolean boolean38 = node36.isAssignAdd();
        int int39 = node36.getChangeTime();
        boolean boolean40 = node36.isIf();
        boolean boolean41 = node36.isTypeOf();
        com.google.javascript.rhino.Node node42 = node5.useSourceInfoIfMissingFromForTree(node36);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isSyntheticBlock();
        boolean boolean33 = node15.isSetterDef();
        boolean boolean34 = node15.isComma();
        int int35 = node15.getSideEffectFlags();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        boolean boolean32 = node28.isSyntheticBlock();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        boolean boolean38 = node37.isIn();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node48.isEquivalentToTyped(node60);
        boolean boolean62 = node48.isNull();
        com.google.javascript.rhino.Node node63 = node37.copyInformationFromForTree(node48);
        boolean boolean64 = node48.isSetterDef();
        int int65 = node48.getLength();
        boolean boolean66 = node48.isName();
        boolean boolean67 = node48.wasEmptyNode();
        com.google.javascript.rhino.Node node68 = node28.clonePropsFrom(node48);
        boolean boolean69 = node48.isAssignAdd();
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node80 = node74.useSourceInfoIfMissingFrom(node79);
        com.google.javascript.rhino.Node node81 = node79.getLastSibling();
        com.google.javascript.rhino.Node node82 = node48.srcrefTree(node79);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node16.mayMutateArguments();
        com.google.javascript.rhino.Node node67 = node16.getLastSibling();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", (int) (byte) 1, 57);
        boolean boolean4 = node3.isNew();
        boolean boolean5 = node3.isGetProp();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        boolean boolean17 = node10.isFor();
        int int19 = node10.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        boolean boolean25 = node24.isIn();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoIfMissingFrom(node46);
        boolean boolean48 = node35.isEquivalentToTyped(node47);
        boolean boolean49 = node35.isNull();
        com.google.javascript.rhino.Node node50 = node24.copyInformationFromForTree(node35);
        boolean boolean51 = node35.isSetterDef();
        int int52 = node35.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node35.children();
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        node64.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node68 = node35.useSourceInfoFromForTree(node64);
        boolean boolean69 = node10.isEquivalentTo(node68);
        boolean boolean70 = node68.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoIfMissingFrom(node81);
        boolean boolean83 = node76.isFor();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(0, node76, 0, 0);
        boolean boolean87 = node76.isString();
        int int88 = node76.getSourceOffset();
        boolean boolean89 = node76.isVarArgs();
        int int90 = node76.getChildCount();
        boolean boolean91 = node76.isLabel();
        boolean boolean92 = node68.isEquivalentToShallow(node76);
        boolean boolean93 = node68.isVar();
        boolean boolean94 = node68.isIf();
        boolean boolean95 = node68.isNot();
        com.google.javascript.rhino.Node node96 = node3.copyInformationFrom(node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable97 = node96.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(nodeIterable97);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node83 = node77.useSourceInfoIfMissingFrom(node82);
        boolean boolean84 = node71.isEquivalentToTyped(node83);
        java.util.Set<java.lang.String> strSet85 = node83.getDirectives();
        boolean boolean86 = node83.isIf();
        int int87 = node83.getSourceOffset();
        boolean boolean88 = node83.isThis();
        node60.putProp(23, (java.lang.Object) boolean88);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isCatch();
        boolean boolean19 = node5.isOnlyModifiesArgumentsCall();
        boolean boolean20 = node5.isNoSideEffectsCall();
        node5.putBooleanProp((int) '4', true);
        java.lang.Appendable appendable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            node5.appendStringTree(appendable24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 1, 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isCast();
        com.google.javascript.rhino.InputId inputId10 = node8.getInputId();
        node8.setType((int) 'a');
        java.util.Set<java.lang.String> strSet13 = node8.getDirectives();
        boolean boolean14 = node8.isInc();
        boolean boolean15 = node8.isSetterDef();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFromForTree(node8);
        java.lang.Appendable appendable17 = null;
        // The following exception was thrown during execution in test generation
        try {
            node16.appendStringTree(appendable17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        boolean boolean25 = node21.isNew();
        boolean boolean26 = node21.isParamList();
        boolean boolean27 = node21.isReturn();
        com.google.javascript.rhino.Node node28 = node21.getFirstChild();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node33.isFor();
        int int42 = node33.getIntProp(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node33.getJsDocBuilderForNode();
        boolean boolean44 = node33.isAdd();
        boolean boolean45 = node33.isDec();
        node21.addChildrenToFront(node33);
        boolean boolean47 = node33.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = node33.getParent();
        com.google.javascript.rhino.Node node49 = node33.detachFromParent();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        java.lang.String str18 = node9.toString(true, false, true);
        com.google.javascript.rhino.InputId inputId19 = null;
        node9.setInputId(inputId19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("REGEXP ", (int) (byte) 10, (int) (byte) 100);
        node24.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node27 = node9.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("REGEXP ");
        boolean boolean30 = node29.isVar();
        boolean boolean31 = node9.isEquivalentToShallow(node29);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ERROR" + "'", str18, "ERROR");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 15);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node4.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator8 = nodeIterable7.spliterator();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        int int11 = node4.getSourcePosition();
        boolean boolean12 = node4.isExprResult();
        boolean boolean13 = node4.isTry();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node46.children();
        int int52 = node46.getLength();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isCast();
        boolean boolean39 = node2.isHook();
        boolean boolean40 = node2.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        java.lang.String str34 = node15.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node40.isFor();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(0, node40, 0, 0);
        boolean boolean51 = node40.isString();
        int int52 = node40.getSourceOffset();
        boolean boolean53 = node40.isVarArgs();
        boolean boolean54 = node40.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node40.getJSDocInfo();
        boolean boolean56 = node40.isSyntheticBlock();
        boolean boolean57 = node15.isEquivalentToShallow(node40);
        com.google.javascript.rhino.Node node58 = node15.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = node58.getNext();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(node58);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node5.isFunction();
        boolean boolean15 = node5.isCatch();
        boolean boolean16 = node5.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        boolean boolean15 = node9.isBlock();
        boolean boolean16 = node9.isInstanceOf();
        boolean boolean17 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node33.isNull();
        com.google.javascript.rhino.Node node48 = node22.copyInformationFromForTree(node33);
        node22.detachChildren();
        boolean boolean50 = node22.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node22.setJSType(jSType51);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node80 = node74.useSourceInfoIfMissingFrom(node79);
        boolean boolean81 = node68.isEquivalentToTyped(node80);
        boolean boolean82 = node68.isNull();
        com.google.javascript.rhino.Node node83 = node57.copyInformationFromForTree(node68);
        boolean boolean84 = node68.isSetterDef();
        int int85 = node68.getLength();
        boolean boolean86 = node68.isName();
        node68.putIntProp((int) (byte) 0, 42);
        boolean boolean90 = node68.isVar();
        com.google.javascript.rhino.Node node91 = node22.copyInformationFromForTree(node68);
        com.google.javascript.rhino.Node node92 = node9.srcrefTree(node68);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 15, (int) (byte) -1);
        java.lang.String str4 = node3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "INSTANCEOF" + "'", str4, "INSTANCEOF");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("REGEXP ");
        boolean boolean2 = node1.wasEmptyNode();
        boolean boolean3 = node1.isSwitch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node10.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node24 = node18.useSourceInfoIfMissingFrom(node23);
        node10.addChildToFront(node23);
        node23.setVarArgs(true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        boolean boolean42 = node40.isVoid();
        boolean boolean43 = node40.isObjectLit();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        boolean boolean56 = node49.isFor();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node49, 0, 0);
        boolean boolean60 = node49.isString();
        int int61 = node49.getSourceOffset();
        boolean boolean62 = node49.isVarArgs();
        int int63 = node49.getChildCount();
        boolean boolean64 = node49.isNot();
        com.google.javascript.rhino.Node node65 = node40.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node node66 = node40.detachFromParent();
        boolean boolean67 = node40.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node6);
        com.google.javascript.rhino.Node node35 = node34.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray38, 2, (int) ' ');
        java.lang.String str45 = node44.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node67.isAssignAdd();
        com.google.javascript.rhino.Node node70 = node67.getParent();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(38, node34, node44, node67);
        boolean boolean72 = node34.isNew();
        boolean boolean73 = node34.isAdd();
        boolean boolean74 = node34.isAssign();
        int int75 = node34.getChildCount();
        boolean boolean76 = node34.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        boolean boolean34 = node33.isCast();
        com.google.javascript.rhino.InputId inputId35 = node33.getInputId();
        node33.setType((int) 'a');
        java.util.Set<java.lang.String> strSet38 = node33.getDirectives();
        boolean boolean39 = node33.hasMoreThanOneChild();
        boolean boolean40 = node33.isDec();
        boolean boolean41 = node33.isNE();
        com.google.javascript.rhino.Node node42 = node22.copyInformationFromForTree(node33);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags4.setMutatesThis();
        boolean boolean6 = sideEffectFlags5.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        boolean boolean29 = node28.isDelProp();
        boolean boolean30 = node28.isScript();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isCase();
        int int47 = node30.getChangeTime();
        com.google.javascript.rhino.Node node48 = node5.clonePropsFrom(node30);
        boolean boolean49 = node5.isCast();
        boolean boolean50 = node5.wasEmptyNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        boolean boolean34 = node33.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        boolean boolean66 = node53.isEquivalentToTyped(node65);
        boolean boolean67 = node53.isNull();
        com.google.javascript.rhino.Node node68 = node42.copyInformationFromForTree(node53);
        boolean boolean69 = node53.isSetterDef();
        int int70 = node53.getLength();
        boolean boolean71 = node53.isDebugger();
        boolean boolean72 = node37.isEquivalentToTyped(node53);
        boolean boolean73 = node37.isNoSideEffectsCall();
        boolean boolean74 = node37.isGetElem();
        boolean boolean75 = node37.isDefaultCase();
        node37.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node78 = node33.useSourceInfoIfMissingFrom(node37);
        // The following exception was thrown during execution in test generation
        try {
            node37.setSideEffectFlags(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got REGEXP");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 15, (int) (byte) -1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = node3.getJSDocInfo();
        org.junit.Assert.assertNull(jSDocInfo4);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder2.append("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
        fileLevelJsDocBuilder2.append("INSTANCEOF [is_namespace: 1]");
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node4.getJsDocBuilderForNode();
        boolean boolean15 = node4.isAdd();
        boolean boolean16 = node4.isDec();
        boolean boolean17 = node4.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags3.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags3.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = sideEffectFlags3.setThrows();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
        org.junit.Assert.assertNotNull(sideEffectFlags8);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        boolean boolean12 = node4.isGetterDef();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        node18.detachChildren();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(48, node18);
        com.google.javascript.rhino.Node node47 = node46.removeFirstChild();
        com.google.javascript.rhino.InputId inputId48 = node46.getInputId();
        node46.putBooleanProp((int) (byte) 1, false);
        node4.addChildrenToFront(node46);
        node46.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(inputId48);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        int int3 = node2.getLineno();
        node2.setQuotedString();
        boolean boolean5 = node2.isString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node23 = node21.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node21.getJsDocBuilderForNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node21.children();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder24);
        org.junit.Assert.assertNotNull(nodeIterable25);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        com.google.javascript.rhino.Node node87 = node70.getLastSibling();
        boolean boolean88 = node87.isWith();
        boolean boolean89 = node87.isBlock();
        int int90 = node87.getChildCount();
        boolean boolean91 = node87.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = node6.useSourceInfoIfMissingFrom(node11);
        boolean boolean13 = node6.isFor();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node6, 0, 0);
        boolean boolean17 = node6.isString();
        int int18 = node6.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        com.google.javascript.rhino.Node node30 = node6.copyInformationFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        boolean boolean36 = node35.isIn();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node46.isEquivalentToTyped(node58);
        boolean boolean60 = node46.isNull();
        com.google.javascript.rhino.Node node61 = node35.copyInformationFromForTree(node46);
        boolean boolean62 = node46.isSetterDef();
        int int63 = node46.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node46.children();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        node75.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node79 = node46.useSourceInfoFromForTree(node75);
        boolean boolean80 = node75.isLabel();
        boolean boolean81 = node30.isEquivalentToTyped(node75);
        boolean boolean82 = node30.isReturn();
        int int83 = node30.getSourceOffset();
        boolean boolean84 = node30.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder85 = node30.new FileLevelJsDocBuilder();
        boolean boolean86 = node30.isCast();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(52, node30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node5.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator21 = ancestorIterable20.spliterator();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNotNull(nodeSpliterator21);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node52.isNull();
        com.google.javascript.rhino.Node node67 = node41.copyInformationFromForTree(node52);
        boolean boolean68 = node52.isSetterDef();
        int int69 = node52.getLength();
        boolean boolean70 = node52.isName();
        boolean boolean71 = node52.isFalse();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoIfMissingFrom(node81);
        boolean boolean83 = node82.isUnscopedQualifiedName();
        node52.addChildrenToFront(node82);
        node34.addChildToBack(node52);
        com.google.javascript.rhino.Node node87 = node52.getAncestor((int) (byte) 1);
        boolean boolean88 = node52.isFor();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        node28.setOptionalArg(true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        boolean boolean15 = node9.isNull();
        boolean boolean16 = node9.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node9.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '#', "hi!", 8, (int) (byte) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = node4.getJSDocInfo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSDocInfo5);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        boolean boolean34 = node5.isAssignAdd();
        boolean boolean35 = node5.hasChildren();
        boolean boolean37 = node5.getBooleanProp(53);
        boolean boolean38 = node5.isGetProp();
        int int39 = node5.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.clearAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "ERROR");
        java.lang.String str3 = node2.getString();
        boolean boolean4 = node2.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ERROR" + "'", str3, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str7 = node4.getSourceFileName();
        boolean boolean8 = node4.isString();
        boolean boolean9 = node4.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, node4, (int) ' ', (int) '#');
        boolean boolean8 = node7.isCast();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        boolean boolean21 = node14.isFor();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(0, node14, 0, 0);
        boolean boolean25 = node14.isString();
        int int26 = node14.getSourceOffset();
        boolean boolean27 = node14.isVarArgs();
        boolean boolean28 = node14.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node14.getJSDocInfo();
        boolean boolean30 = node14.isSyntheticBlock();
        int int31 = node14.getSideEffectFlags();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node14.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node34 = node14.getAncestor(0);
        com.google.javascript.rhino.Node node35 = node7.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoIfMissingFrom(node46);
        boolean boolean48 = node41.isFor();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(0, node41, 0, 0);
        boolean boolean52 = node41.isString();
        boolean boolean53 = node41.isReturn();
        boolean boolean54 = node41.hasChildren();
        int int55 = node34.getIndexOfChild(node41);
        boolean boolean56 = node41.isNoSideEffectsCall();
        boolean boolean57 = node41.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node5.isFunction();
        boolean boolean15 = node5.isString();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        node5.setIsSyntheticBlock(false);
        boolean boolean56 = node5.hasMoreThanOneChild();
        boolean boolean57 = node5.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 42);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("REGEXP ");
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        node1.addChildToBack(node3);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(jSType4);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(8, node11, 4, 32);
        com.google.javascript.rhino.Node node18 = node11.getLastSibling();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isThis();
        node13.setType(50);
        boolean boolean46 = node13.isEmpty();
        node13.setChangeTime(24);
        boolean boolean49 = node13.isTrue();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 1);
        node1.putIntProp((int) 'a', 57);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isFor();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isCast();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        node21.setType((int) 'a');
        java.util.Set<java.lang.String> strSet26 = node21.getDirectives();
        boolean boolean27 = node21.isInc();
        com.google.javascript.rhino.Node node28 = node5.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        boolean boolean41 = node34.isFor();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(0, node34, 0, 0);
        boolean boolean45 = node34.isString();
        int int46 = node34.getSourceOffset();
        boolean boolean47 = node34.isVarArgs();
        boolean boolean48 = node34.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable49 = node34.getAncestors();
        boolean boolean50 = node34.isDelProp();
        com.google.javascript.rhino.Node node51 = node5.srcref(node34);
        boolean boolean52 = node51.isLabelName();
        boolean boolean53 = node51.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ancestorIterable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray3, 32, (-1));
        boolean boolean13 = node12.isHook();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray3, 32, (-1));
        boolean boolean13 = node12.isCall();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        boolean boolean47 = node29.isName();
        java.lang.String str48 = node29.getSourceFileName();
        boolean boolean49 = node29.isFromExterns();
        boolean boolean50 = node12.isEquivalentToShallow(node29);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node56.isFor();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(0, node56, 0, 0);
        boolean boolean67 = node66.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = null;
        com.google.javascript.rhino.Node node69 = node66.setJSDocInfo(jSDocInfo68);
        com.google.javascript.rhino.Node node70 = node12.useSourceInfoFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        boolean boolean77 = node76.isIn();
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        boolean boolean83 = node82.isIn();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(47, node76, node82);
        node76.detachChildren();
        boolean boolean86 = node76.hasMoreThanOneChild();
        boolean boolean87 = node76.isNumber();
        boolean boolean88 = node76.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            node70.addChildToFront(node76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        boolean boolean16 = node5.isReturn();
        boolean boolean17 = node5.isAssign();
        java.util.Set<java.lang.String> strSet18 = node5.getDirectives();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node5.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isThis();
        node13.setType(50);
        boolean boolean46 = node13.isEmpty();
        node13.setChangeTime(24);
        boolean boolean49 = node13.hasOneChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isDelProp();
        boolean boolean38 = node4.isVarArgs();
        boolean boolean39 = node4.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            node4.setString("LE 0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node41.isNull();
        com.google.javascript.rhino.Node node56 = node30.copyInformationFromForTree(node41);
        boolean boolean57 = node41.isCase();
        int int58 = node41.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = null;
        com.google.javascript.rhino.Node node60 = node41.setJSDocInfo(jSDocInfo59);
        com.google.javascript.rhino.Node node61 = node21.clonePropsFrom(node60);
        boolean boolean62 = node60.isIf();
        boolean boolean63 = node60.hasChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node5.siblings();
        node5.setOptionalArg(false);
        node5.setSourceEncodedPositionForTree(100);
        boolean boolean60 = node5.hasMoreThanOneChild();
        java.lang.String str61 = node5.toString();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ERROR 0" + "'", str61, "ERROR 0");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        node21.addSuppression("hi!");
        node21.setChangeTime((int) ' ');
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = node1.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(inputId2);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 32, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        node19.putIntProp((int) (byte) 0, 42);
        boolean boolean41 = node19.isDec();
        boolean boolean42 = node19.isVoid();
        node3.addChildToBack(node19);
        boolean boolean44 = node19.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node50.children();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        node79.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node83 = node50.useSourceInfoFromForTree(node79);
        boolean boolean84 = node79.isLabel();
        com.google.javascript.rhino.Node node85 = node4.copyInformationFrom(node79);
        int int87 = node4.getIntProp((int) (short) 0);
        com.google.javascript.rhino.Node node88 = node4.getLastChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNull(node88);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isCall();
        boolean boolean16 = node5.hasOneChild();
        boolean boolean17 = node5.isQualifiedName();
        boolean boolean18 = node5.isOr();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 57, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node32.isEquivalentToTyped(node44);
        java.util.Set<java.lang.String> strSet46 = node44.getDirectives();
        com.google.javascript.rhino.Node node47 = node44.removeChildren();
        boolean boolean48 = node44.isNew();
        node44.setWasEmptyNode(true);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        boolean boolean56 = node55.isIn();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        boolean boolean79 = node66.isEquivalentToTyped(node78);
        boolean boolean80 = node66.isNull();
        com.google.javascript.rhino.Node node81 = node55.copyInformationFromForTree(node66);
        boolean boolean82 = node66.isSetterDef();
        int int83 = node66.getLength();
        boolean boolean84 = node66.isName();
        boolean boolean85 = node66.isFromExterns();
        boolean boolean86 = node66.isDec();
        boolean boolean87 = node66.isAdd();
        int int88 = node66.getSourcePosition();
        com.google.javascript.rhino.Node node89 = node44.useSourceInfoFromForTree(node66);
        // The following exception was thrown during execution in test generation
        try {
            node5.replaceChild(node22, node66);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        boolean boolean26 = node19.isFor();
        boolean boolean27 = node19.isParamList();
        com.google.javascript.rhino.Node node28 = node19.removeFirstChild();
        int int29 = node10.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(47, "");
        int int33 = node32.getLineno();
        com.google.javascript.rhino.Node node34 = node10.copyInformationFromForTree(node32);
        com.google.javascript.rhino.InputId inputId35 = node10.getInputId();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(inputId35);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray8, 1, 4095);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(49, nodeArray8, 4, 0);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((-1), nodeArray8);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) ' ', nodeArray8, 15, 10);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(0, nodeArray8);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(12, nodeArray8);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(8, nodeArray8, 32, (int) (short) -1);
        boolean boolean27 = node26.isOptionalArg();
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        int int21 = node13.getCharno();
        com.google.javascript.rhino.Node node22 = node13.cloneTree();
        boolean boolean23 = node13.isCase();
        boolean boolean24 = node13.isOptionalArg();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.lang.String str23 = node9.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        boolean boolean59 = node58.isIn();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        boolean boolean65 = node64.isIn();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(47, node58, node64);
        node58.detachChildren();
        boolean boolean68 = node58.hasMoreThanOneChild();
        boolean boolean69 = node58.isNumber();
        com.google.javascript.rhino.Node node70 = node45.srcref(node58);
        com.google.javascript.rhino.Node node71 = node9.clonePropsFrom(node58);
        boolean boolean72 = node71.isInc();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node71.siblings();
        boolean boolean74 = node71.isNE();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterable73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", 1, 0);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isCast();
        com.google.javascript.rhino.InputId inputId11 = node9.getInputId();
        node9.setType((int) 'a');
        java.util.Set<java.lang.String> strSet14 = node9.getDirectives();
        boolean boolean15 = node9.isInc();
        boolean boolean16 = node9.isSetterDef();
        com.google.javascript.rhino.Node node17 = node4.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node39.isAssignAdd();
        com.google.javascript.rhino.Node node42 = node39.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node39.getJsDocBuilderForNode();
        java.lang.String str44 = node39.toString();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node50.isFor();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(0, node50, 0, 0);
        boolean boolean61 = node50.isString();
        int int62 = node50.getSourceOffset();
        boolean boolean63 = node50.isVarArgs();
        boolean boolean64 = node50.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node50.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) 'a', node4, node39, node50, 15, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ERROR" + "'", str44, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        boolean boolean44 = node26.isName();
        com.google.javascript.rhino.Node node45 = node4.useSourceInfoIfMissingFromForTree(node26);
        node4.setSourceEncodedPositionForTree(53);
        boolean boolean48 = node4.isArrayLit();
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node54.isFor();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(0, node54, 0, 0);
        boolean boolean65 = node54.isString();
        int int66 = node54.getSourceOffset();
        boolean boolean67 = node54.isVarArgs();
        boolean boolean68 = node54.isFromExterns();
        int int69 = node54.getLength();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildToFront(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node30.isString();
        int int42 = node30.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node54 = node30.copyInformationFrom(node53);
        java.lang.String str55 = node54.toStringTree();
        com.google.javascript.rhino.Node node56 = node21.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node57 = node56.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR\n" + "'", str55, "ERROR\n");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        boolean boolean29 = node13.isCast();
        boolean boolean30 = node13.isComma();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        boolean boolean11 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, 32, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node31.isEquivalentToTyped(node43);
        boolean boolean45 = node31.isNull();
        com.google.javascript.rhino.Node node46 = node20.copyInformationFromForTree(node31);
        boolean boolean47 = node31.isSetterDef();
        int int48 = node31.getLength();
        boolean boolean49 = node31.isName();
        node31.putIntProp((int) (byte) 0, 42);
        boolean boolean53 = node31.isDec();
        boolean boolean54 = node31.isVoid();
        node15.addChildToBack(node31);
        com.google.javascript.rhino.Node node56 = node4.copyInformationFromForTree(node31);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        boolean boolean39 = node2.isNE();
        boolean boolean40 = node2.isName();
        boolean boolean41 = node2.isCatch();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 100, 0, 8);
        boolean boolean46 = node45.isVarArgs();
        boolean boolean47 = node45.isRegExp();
        com.google.javascript.rhino.Node node48 = node2.copyInformationFromForTree(node45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node49 = node48.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "hi!", 1, 52);
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = null;
        com.google.javascript.rhino.Node node6 = node4.setJSDocInfo(jSDocInfo5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node6.siblings();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(nodeIterable7);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        boolean boolean34 = node15.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node15.getJSDocInfo();
        boolean boolean36 = node15.isQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("ASSIGN_MOD\n", (int) ' ', 24);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node21.getJSDocInfo();
        boolean boolean26 = node21.isTypeOf();
        node21.setWasEmptyNode(true);
        boolean boolean29 = node21.isLocalResultCall();
        int int30 = node21.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags1.setReturnsTainted();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node22.isFor();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, node22, 0, 0);
        boolean boolean33 = node22.isNew();
        boolean boolean34 = node22.isCall();
        node22.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node37 = node5.useSourceInfoIfMissingFromForTree(node22);
        node37.setLength(19);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node44.isCatch();
        boolean boolean52 = node44.isGetterDef();
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        boolean boolean59 = node58.isIn();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        boolean boolean82 = node69.isEquivalentToTyped(node81);
        boolean boolean83 = node69.isNull();
        com.google.javascript.rhino.Node node84 = node58.copyInformationFromForTree(node69);
        node58.detachChildren();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(48, node58);
        com.google.javascript.rhino.Node node87 = node86.removeFirstChild();
        com.google.javascript.rhino.InputId inputId88 = node86.getInputId();
        node86.putBooleanProp((int) (byte) 1, false);
        node44.addChildrenToFront(node86);
        com.google.javascript.rhino.Node node93 = node37.copyInformationFrom(node44);
        boolean boolean94 = node44.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(inputId88);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        com.google.javascript.rhino.Node node19 = node5.setJSDocInfo(jSDocInfo18);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("REGEXP ", 16, 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        int int20 = node5.getChildCount();
        boolean boolean21 = node5.hasMoreThanOneChild();
        node5.removeProp(8);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(49, "hi!", 51, (int) '#');
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isIn();
        boolean boolean11 = node9.isContinue();
        boolean boolean12 = node9.isIn();
        com.google.javascript.rhino.Node node13 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean14 = node13.isGetProp();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = node13.getExistingIntProp((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 97");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node13.srcref(node19);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray26, 2, (int) ' ');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(15, nodeArray26);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(46, nodeArray26, (int) (short) 0, 4095);
        boolean boolean37 = node36.isWith();
        boolean boolean38 = node36.isGetProp();
        node13.putProp(38, (java.lang.Object) node36);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        boolean boolean35 = node15.isDec();
        boolean boolean36 = node15.isVarArgs();
        boolean boolean37 = node15.isReturn();
        com.google.javascript.rhino.Node node38 = node15.cloneNode();
        boolean boolean39 = node38.isScript();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        int int33 = node16.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node16.children();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        node45.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node49 = node16.useSourceInfoFromForTree(node45);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, node45, 0, 55);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node52.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder53);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        node21.setVarArgs(true);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = node21.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR [var_args_name: 1] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isNot();
        boolean boolean17 = node5.isFalse();
        boolean boolean18 = node5.isParamList();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node33.siblings();
        com.google.javascript.rhino.Node node38 = node33.removeFirstChild();
        boolean boolean39 = node33.isCase();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        boolean boolean32 = node31.isFunction();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, 15, 47);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        boolean boolean35 = node15.isDec();
        boolean boolean36 = node15.isAdd();
        boolean boolean37 = node15.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 4);
        boolean boolean2 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node3 = node1.getLastSibling();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getSourceOffset();
        node21.setSourceFileForTesting("");
        boolean boolean27 = node21.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 1);
        boolean boolean2 = node1.isSwitch();
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node13 = node7.useSourceInfoIfMissingFrom(node12);
        boolean boolean14 = node7.isFor();
        int int16 = node7.getIntProp(0);
        boolean boolean17 = node7.isLocalResultCall();
        int int18 = node7.getSourcePosition();
        node7.setIsSyntheticBlock(false);
        boolean boolean21 = node7.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node7.siblings();
        boolean boolean23 = node7.isNew();
        node1.addChildToBack(node7);
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node26 = node7.removeChildAfter(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        int int23 = node9.getLineno();
        boolean boolean24 = node9.isParamList();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node60.isWith();
        boolean boolean62 = node60.isParamList();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node72.isEquivalentToTyped(node84);
        boolean boolean86 = node72.isNull();
        java.lang.String str87 = node72.getSourceFileName();
        boolean boolean88 = node72.isFor();
        com.google.javascript.rhino.Node node89 = node60.useSourceInfoIfMissingFromForTree(node72);
        boolean boolean90 = node60.isAnd();
        boolean boolean91 = node60.isDec();
        boolean boolean92 = node60.isThrow();
        boolean boolean93 = node60.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        com.google.javascript.rhino.Node node21 = node13.getFirstChild();
        com.google.javascript.rhino.Node node22 = node13.getFirstChild();
        boolean boolean23 = node22.isWhile();
        int int24 = node22.getSourcePosition();
        node22.setOptionalArg(true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node45.isNull();
        com.google.javascript.rhino.Node node60 = node34.copyInformationFromForTree(node45);
        boolean boolean61 = node45.isSetterDef();
        int int62 = node45.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node45.children();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        node74.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node78 = node45.useSourceInfoFromForTree(node74);
        boolean boolean79 = node74.isLabel();
        boolean boolean80 = node29.isEquivalentToTyped(node74);
        boolean boolean81 = node29.isReturn();
        int int82 = node29.getSourceOffset();
        boolean boolean84 = node29.getBooleanProp(56);
        boolean boolean85 = node29.isAnd();
        node29.putBooleanProp((int) (short) 10, true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        boolean boolean25 = node9.isThrow();
        com.google.javascript.rhino.Node node26 = node9.getLastSibling();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        boolean boolean55 = node5.isBreak();
        node5.setChangeTime(39);
        int int58 = node5.getType();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isFor();
        java.util.Set<java.lang.String> strSet17 = node5.getDirectives();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setThrows();
        sideEffectFlags3.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags3.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(8);
        com.google.javascript.rhino.Node node13 = node4.useSourceInfoFromForTree(node12);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node5.setJSType(jSType14);
        node5.detachChildren();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node32.isEquivalentToTyped(node44);
        boolean boolean46 = node32.isNull();
        com.google.javascript.rhino.Node node47 = node21.copyInformationFromForTree(node32);
        boolean boolean48 = node32.isSetterDef();
        int int49 = node32.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node32.children();
        boolean boolean51 = node32.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = node32.getJSDocInfo();
        boolean boolean53 = node32.isGetProp();
        // The following exception was thrown during execution in test generation
        try {
            node5.removeChild(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        boolean boolean48 = node45.isDelProp();
        boolean boolean49 = node45.isNot();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node22.isFor();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, node22, 0, 0);
        boolean boolean33 = node22.isNew();
        boolean boolean34 = node22.isCall();
        node22.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node37 = node5.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean38 = node22.isDelProp();
        boolean boolean39 = node22.isTry();
        boolean boolean40 = node22.isGetterDef();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node52.isNull();
        com.google.javascript.rhino.Node node67 = node41.copyInformationFromForTree(node52);
        boolean boolean68 = node52.isSetterDef();
        int int69 = node52.getLength();
        boolean boolean70 = node52.isName();
        boolean boolean71 = node52.isFalse();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoIfMissingFrom(node81);
        boolean boolean83 = node82.isUnscopedQualifiedName();
        node52.addChildrenToFront(node82);
        node34.addChildToBack(node52);
        boolean boolean86 = node34.isThis();
        boolean boolean87 = node34.isInc();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isCatch();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        java.lang.String str24 = node5.checkTreeEquals(node23);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(24, node23);
        boolean boolean26 = node23.isCatch();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        java.lang.String str38 = node35.toString();
        node35.setSourceEncodedPositionForTree((int) (short) 100);
        node35.setSourceEncodedPosition(46);
        boolean boolean43 = node35.isDebugger();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node60.isEquivalentToTyped(node72);
        boolean boolean74 = node60.isNull();
        com.google.javascript.rhino.Node node75 = node49.copyInformationFromForTree(node60);
        node49.detachChildren();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(48, node49);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node77.addChildrenToFront(node79);
        node77.removeProp((int) '4');
        com.google.javascript.rhino.Node node83 = node35.copyInformationFromForTree(node77);
        node83.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 4095.0" + "'", str38, "NUMBER 4095.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isScript();
        com.google.javascript.rhino.Node node21 = node5.getLastChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        int int39 = node27.getSourceOffset();
        boolean boolean40 = node27.isVarArgs();
        boolean boolean41 = node27.isDo();
        int int42 = node5.getIndexOfChild(node27);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node48.isFor();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(0, node48, 0, 0);
        boolean boolean59 = node58.isAssign();
        int int60 = node58.getCharno();
        java.util.Set<java.lang.String> strSet61 = node58.getDirectives();
        boolean boolean62 = node58.isBlock();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node63 = node27.removeChildAfter(node58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray3, 1, 4095);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray3, 4, 0);
        int int13 = node12.getSourceOffset();
        node12.setVarArgs(false);
        boolean boolean16 = node12.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        node33.putIntProp(29, 0);
        node33.setSourceEncodedPosition(10);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        boolean boolean44 = node43.isIn();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        boolean boolean67 = node54.isEquivalentToTyped(node66);
        boolean boolean68 = node54.isNull();
        com.google.javascript.rhino.Node node69 = node43.copyInformationFromForTree(node54);
        boolean boolean70 = node54.isSetterDef();
        int int71 = node54.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node54.children();
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node83 = node77.useSourceInfoIfMissingFrom(node82);
        node83.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node87 = node54.useSourceInfoFromForTree(node83);
        boolean boolean88 = node54.isGetProp();
        node54.setLength(54);
        com.google.javascript.rhino.Node node91 = node33.useSourceInfoFrom(node54);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node13 = node7.useSourceInfoIfMissingFrom(node12);
        boolean boolean14 = node7.isFor();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0, node7, 0, 0);
        boolean boolean18 = node17.isAssign();
        int int19 = node17.getCharno();
        java.util.Set<java.lang.String> strSet20 = node17.getDirectives();
        boolean boolean21 = node17.isBlock();
        int int22 = node17.getLength();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node33.isNull();
        java.lang.String str48 = node33.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node54.isFor();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(0, node54, 0, 0);
        boolean boolean65 = node54.isString();
        boolean boolean66 = node54.isEmpty();
        boolean boolean67 = node54.isCatch();
        boolean boolean68 = node54.isOnlyModifiesArgumentsCall();
        boolean boolean69 = node54.isNoSideEffectsCall();
        node54.putBooleanProp((int) '4', true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node54.siblings();
        boolean boolean74 = node54.isLabelName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100, node1, node17, node33, node54, 0, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 53, 0);
        com.google.javascript.rhino.Node node5 = node3.getAncestor(2);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        java.lang.String str34 = node15.getSourceFileName();
        boolean boolean35 = node15.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        boolean boolean42 = node40.isContinue();
        boolean boolean43 = node40.isDelProp();
        node15.addChildrenToFront(node40);
        com.google.javascript.rhino.Node node45 = node40.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = node45.isName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '4', 12, (int) (short) -1);
        boolean boolean4 = node3.isExprResult();
        boolean boolean5 = node3.isCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = node22.isLabelName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        com.google.javascript.rhino.Node node41 = node33.getParent();
        int int42 = node33.getCharno();
        boolean boolean43 = node33.isStringKey();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        boolean boolean65 = node62.isFor();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node71.isFor();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(0, node71, 0, 0);
        boolean boolean82 = node81.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        com.google.javascript.rhino.Node node84 = node81.setJSDocInfo(jSDocInfo83);
        boolean boolean85 = node62.isEquivalentToShallow(node81);
        boolean boolean86 = node81.isSetterDef();
        boolean boolean87 = node81.hasMoreThanOneChild();
        boolean boolean88 = node81.isRegExp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        boolean boolean60 = node57.isIn();
        node15.addChildToBack(node57);
        boolean boolean62 = node15.isStringKey();
        int int63 = node15.getType();
        java.lang.String str64 = node15.getQualifiedName();
        node15.setVarArgs(false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) '4', "ERROR");
        boolean boolean3 = node2.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.setAllFlags();
        sideEffectFlags2.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags2.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        com.google.javascript.rhino.Node node21 = node5.getAncestor(8);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray25, 2, (int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(15, nodeArray25);
        node5.addChildToFront(node32);
        node5.setType(32);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray25);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node33.getAncestors();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(ancestorIterable41);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        boolean boolean34 = node33.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        boolean boolean66 = node53.isEquivalentToTyped(node65);
        boolean boolean67 = node53.isNull();
        com.google.javascript.rhino.Node node68 = node42.copyInformationFromForTree(node53);
        boolean boolean69 = node53.isSetterDef();
        int int70 = node53.getLength();
        boolean boolean71 = node53.isDebugger();
        boolean boolean72 = node37.isEquivalentToTyped(node53);
        boolean boolean73 = node37.isNoSideEffectsCall();
        boolean boolean74 = node37.isGetElem();
        boolean boolean75 = node37.isDefaultCase();
        node37.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node78 = node33.useSourceInfoIfMissingFrom(node37);
        boolean boolean79 = node78.isAdd();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(47, node40, node46);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node50 = node48.cloneNode();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoFrom(node48);
        int int52 = node34.getSourceOffset();
        boolean boolean53 = node34.isContinue();
        int int54 = node34.getChangeTime();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isFalse();
        com.google.javascript.rhino.Node node27 = node21.removeChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        java.lang.String str37 = node5.toString(true, false, true);
        boolean boolean38 = node5.isNew();
        boolean boolean39 = node5.isSetterDef();
        boolean boolean40 = node5.isObjectLit();
        int int41 = node5.getChangeTime();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        boolean boolean48 = node46.isContinue();
        java.lang.String str49 = node46.getSourceFileName();
        int int50 = node46.getType();
        java.lang.Object obj52 = node46.getProp(10);
        boolean boolean53 = node46.isQualifiedName();
        boolean boolean54 = node46.isObjectLit();
        node46.removeProp(24);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        boolean boolean62 = node61.isIn();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node72.isEquivalentToTyped(node84);
        boolean boolean86 = node72.isNull();
        com.google.javascript.rhino.Node node87 = node61.copyInformationFromForTree(node72);
        boolean boolean88 = node72.isSetterDef();
        int int89 = node72.getLength();
        boolean boolean90 = node72.isName();
        boolean boolean91 = node72.wasEmptyNode();
        node72.setSourceEncodedPositionForTree(54);
        boolean boolean94 = node72.isIn();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) (short) -1, node5, node46, node72, 47, 56);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ERROR" + "'", str37, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        boolean boolean34 = node15.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node15.getJSDocInfo();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node51.isEquivalentToTyped(node63);
        boolean boolean65 = node51.isNull();
        com.google.javascript.rhino.Node node66 = node40.copyInformationFromForTree(node51);
        boolean boolean67 = node51.isSetterDef();
        int int68 = node51.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node51.children();
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node80 = node74.useSourceInfoIfMissingFrom(node79);
        node80.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node84 = node51.useSourceInfoFromForTree(node80);
        boolean boolean85 = node51.isGetProp();
        node51.setLength(54);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node88 = node15.removeChildAfter(node51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        int int22 = node5.getSourcePosition();
        node5.setLength(38);
        // The following exception was thrown during execution in test generation
        try {
            node5.setDouble((double) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR [length: 38] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        com.google.javascript.rhino.Node node95 = node70.getLastChild();
        boolean boolean96 = node70.isOptionalArg();
        java.lang.String str97 = node70.toString();
        boolean boolean98 = node70.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ERROR" + "'", str97, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node38.isEquivalentToTyped(node50);
        boolean boolean52 = node50.isAssignAdd();
        boolean boolean53 = node50.isInstanceOf();
        java.lang.String str54 = node50.toStringTree();
        boolean boolean55 = node22.hasChild(node50);
        boolean boolean56 = node22.isSetterDef();
        boolean boolean57 = node22.isScript();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ERROR\n" + "'", str54, "ERROR\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 16, 36);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        node45.setSourceEncodedPositionForTree((int) (short) 0);
        boolean boolean51 = node45.getBooleanProp((int) (short) 100);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 1);
        boolean boolean2 = node1.isSwitch();
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node13 = node7.useSourceInfoIfMissingFrom(node12);
        boolean boolean14 = node7.isFor();
        int int16 = node7.getIntProp(0);
        boolean boolean17 = node7.isLocalResultCall();
        int int18 = node7.getSourcePosition();
        node7.setIsSyntheticBlock(false);
        boolean boolean21 = node7.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node7.siblings();
        boolean boolean23 = node7.isNew();
        node1.addChildToBack(node7);
        boolean boolean25 = node7.isCast();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) 'a', 56, (int) (byte) 10);
        node2.addChildToFront(node42);
        boolean boolean44 = node42.isVar();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        boolean boolean67 = node54.isEquivalentToTyped(node66);
        boolean boolean68 = node66.isAssignAdd();
        boolean boolean69 = node66.hasChildren();
        boolean boolean70 = node66.isSetterDef();
        boolean boolean71 = node66.isComma();
        node42.addChildrenToBack(node66);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        boolean boolean51 = node9.isIf();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node67.isEquivalentToTyped(node79);
        boolean boolean81 = node67.isNull();
        com.google.javascript.rhino.Node node82 = node56.copyInformationFromForTree(node67);
        boolean boolean83 = node67.isCase();
        node67.removeProp(16);
        node67.putBooleanProp(16, false);
        int int89 = node67.getLineno();
        com.google.javascript.rhino.Node node90 = node67.cloneNode();
        node9.addChildrenToBack(node90);
        com.google.javascript.rhino.Node node92 = node90.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(node92);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        boolean boolean35 = node34.isCast();
        boolean boolean36 = node34.isReturn();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        com.google.javascript.rhino.Node node70 = node49.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(node70);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isCast();
        com.google.javascript.rhino.InputId inputId7 = node5.getInputId();
        node5.setType((int) 'a');
        java.util.Set<java.lang.String> strSet10 = node5.getDirectives();
        boolean boolean11 = node5.isWith();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        boolean boolean17 = node16.isIn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node27.isNull();
        com.google.javascript.rhino.Node node42 = node16.copyInformationFromForTree(node27);
        boolean boolean43 = node27.isSetterDef();
        int int44 = node27.getLength();
        boolean boolean45 = node27.isName();
        com.google.javascript.rhino.Node node46 = node5.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean47 = node27.isStringKey();
        boolean boolean48 = node27.isTrue();
        boolean boolean49 = node27.isReturn();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node60.isEquivalentToTyped(node72);
        boolean boolean74 = node72.isAssignAdd();
        boolean boolean75 = node72.hasChildren();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(32, node72, 47, 32);
        node72.removeProp(4);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("hi!", 12, 30);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(30, node27, node72, node84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(55, nodeArray4, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        boolean boolean34 = node20.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        com.google.javascript.rhino.Node node36 = node20.setJSDocInfo(jSDocInfo35);
        int int37 = node20.getSourcePosition();
        com.google.javascript.rhino.Node node38 = node14.useSourceInfoFrom(node20);
        com.google.javascript.rhino.InputId inputId39 = null;
        node14.setInputId(inputId39);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        boolean boolean44 = node26.isName();
        com.google.javascript.rhino.Node node45 = node4.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean46 = node26.isStringKey();
        boolean boolean47 = node26.isTrue();
        java.lang.Class<?> wildcardClass48 = node26.getClass();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        boolean boolean53 = node52.isGetterDef();
        boolean boolean54 = node52.isNot();
        boolean boolean55 = node52.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node53.setStaticSourceFile(staticSourceFile80);
        com.google.javascript.rhino.Node node82 = node15.clonePropsFrom(node53);
        boolean boolean83 = node82.hasMoreThanOneChild();
        boolean boolean84 = node82.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = null;
        node82.setStaticSourceFile(staticSourceFile85);
        boolean boolean87 = node82.isFunction();
        boolean boolean88 = node82.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        boolean boolean38 = node37.isIn();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node48.isEquivalentToTyped(node60);
        boolean boolean62 = node48.isNull();
        com.google.javascript.rhino.Node node63 = node37.copyInformationFromForTree(node48);
        boolean boolean64 = node48.isSetterDef();
        int int65 = node48.getLength();
        boolean boolean66 = node48.isName();
        java.lang.String str67 = node48.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node73.isFor();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(0, node73, 0, 0);
        boolean boolean84 = node73.isString();
        int int85 = node73.getSourceOffset();
        boolean boolean86 = node73.isVarArgs();
        boolean boolean87 = node73.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node73.getJSDocInfo();
        boolean boolean89 = node73.isSyntheticBlock();
        boolean boolean90 = node48.isEquivalentToShallow(node73);
        com.google.javascript.rhino.Node node91 = node4.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable92 = node4.getAncestors();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(ancestorIterable92);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        java.lang.String str23 = node4.checkTreeEquals(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        boolean boolean53 = node45.isAssign();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFromForTree(node45);
        int int55 = node54.getSourcePosition();
        boolean boolean56 = node54.isIn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isStringKey();
        boolean boolean25 = node21.isContinue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        boolean boolean34 = node20.isVoid();
        boolean boolean35 = node20.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isCast();
        com.google.javascript.rhino.InputId inputId41 = node39.getInputId();
        node39.setType((int) 'a');
        java.util.Set<java.lang.String> strSet44 = node39.getDirectives();
        node39.setChangeTime(4);
        com.google.javascript.rhino.Node node47 = node15.srcref(node39);
        boolean boolean48 = node39.isNE();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        boolean boolean44 = node26.isName();
        com.google.javascript.rhino.Node node45 = node4.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean46 = node26.isStringKey();
        boolean boolean47 = node26.isTrue();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        boolean boolean53 = node52.isCast();
        com.google.javascript.rhino.Node node54 = node26.useSourceInfoIfMissingFrom(node52);
        boolean boolean55 = node52.isScript();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node52.children();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        node20.addChildrenToFront(node35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node35.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        boolean boolean45 = node44.isIn();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(47, node44, node50);
        java.lang.String str53 = node52.getSourceFileName();
        java.lang.String[] strArray55 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean59 = node52.isParamList();
        com.google.javascript.rhino.Node node60 = node52.getFirstChild();
        boolean boolean61 = node52.isGetProp();
        com.google.javascript.rhino.Node node62 = node52.cloneNode();
        com.google.javascript.rhino.Node node63 = node35.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node35.isSwitch();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        node13.putIntProp(0, (int) '4');
        boolean boolean18 = node13.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        boolean boolean34 = node33.isTrue();
        java.lang.String str35 = node33.getSourceFileName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        java.lang.Object obj34 = node4.getProp(4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node4.getStaticSourceFile();
        boolean boolean36 = node4.isIf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node21.isNew();
        int int25 = node21.getIntProp(8);
        boolean boolean26 = node21.isQualifiedName();
        boolean boolean27 = node21.isNull();
        boolean boolean28 = node4.hasChild(node21);
        int int29 = node4.getSourceOffset();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node4.getJsDocBuilderForNode();
        fileLevelJsDocBuilder30.append("ERROR 0");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        boolean boolean29 = node28.isQualifiedName();
        boolean boolean30 = node28.isCast();
        com.google.javascript.rhino.Node node31 = node28.cloneNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node31.siblings();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeIterable32);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isDelProp();
        boolean boolean38 = node4.isFalse();
        boolean boolean39 = node4.wasEmptyNode();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(47, node34, node40);
        node34.detachChildren();
        boolean boolean44 = node34.hasMoreThanOneChild();
        boolean boolean45 = node34.isNumber();
        com.google.javascript.rhino.Node node46 = node21.srcref(node34);
        java.lang.String str47 = node34.toStringTree();
        java.lang.String str48 = node34.getQualifiedName();
        boolean boolean49 = node34.isParamList();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ERROR\n" + "'", str47, "ERROR\n");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean2 = node1.isWith();
        boolean boolean3 = node1.isInc();
        int int4 = node1.getLineno();
        boolean boolean5 = node1.isNoSideEffectsCall();
        int int6 = node1.getChangeTime();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        boolean boolean31 = node28.hasChildren();
        boolean boolean32 = node28.isSetterDef();
        node28.addSuppression("ERROR\n");
        boolean boolean35 = node28.isStringKey();
        com.google.javascript.rhino.Node node36 = node28.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        boolean boolean49 = node48.isIn();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(47, node42, node48);
        java.lang.String str51 = node50.getSourceFileName();
        java.lang.String[] strArray53 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet54);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet54);
        node1.addChildToBack(node36);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) 'a', 56, (int) (byte) 10);
        node2.addChildToFront(node42);
        node42.setLength((int) (byte) 100);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        boolean boolean74 = node61.isEquivalentToTyped(node73);
        boolean boolean75 = node61.isNull();
        com.google.javascript.rhino.Node node76 = node50.copyInformationFromForTree(node61);
        boolean boolean77 = node61.isSetterDef();
        int int78 = node61.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node61.children();
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray86 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray86, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node90 = node84.useSourceInfoIfMissingFrom(node89);
        node90.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node94 = node61.useSourceInfoFromForTree(node90);
        java.lang.String str95 = node94.toStringTree();
        com.google.javascript.rhino.Node node96 = node42.useSourceInfoIfMissingFromForTree(node94);
        boolean boolean98 = node94.getBooleanProp(47);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ERROR\n" + "'", str95, "ERROR\n");
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.isName();
        boolean boolean16 = node13.isTry();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.setThrows();
        boolean boolean4 = sideEffectFlags3.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int12 = node9.getCharno();
        boolean boolean13 = node9.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isFor();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isCast();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        node21.setType((int) 'a');
        java.util.Set<java.lang.String> strSet26 = node21.getDirectives();
        boolean boolean27 = node21.isInc();
        com.google.javascript.rhino.Node node28 = node5.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        boolean boolean41 = node34.isFor();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(0, node34, 0, 0);
        boolean boolean45 = node34.isString();
        int int46 = node34.getSourceOffset();
        boolean boolean47 = node34.isVarArgs();
        boolean boolean48 = node34.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable49 = node34.getAncestors();
        boolean boolean50 = node34.isDelProp();
        com.google.javascript.rhino.Node node51 = node5.srcref(node34);
        java.lang.String str52 = node5.getSourceFileName();
        com.google.javascript.rhino.Node node53 = node5.cloneNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ancestorIterable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        int int16 = node15.getCharno();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        boolean boolean21 = node5.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setMutatesArguments();
        boolean boolean4 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        com.google.javascript.rhino.Node node36 = node20.removeChildren();
        boolean boolean37 = node20.isBreak();
        boolean boolean38 = node20.isDefaultCase();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNew();
        boolean boolean38 = node4.isOnlyModifiesThisCall();
        node4.setCharno(16);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        boolean boolean53 = node52.isIn();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(47, node46, node52);
        node46.detachChildren();
        boolean boolean56 = node46.isAssign();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node61.isFor();
        int int70 = node61.getIntProp(0);
        boolean boolean71 = node61.isLocalResultCall();
        int int72 = node61.getSourcePosition();
        java.lang.String str73 = node46.checkTreeEquals(node61);
        com.google.javascript.rhino.Node node74 = node61.cloneNode();
        com.google.javascript.rhino.Node node75 = node74.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = node4.getChildBefore(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        boolean boolean25 = node9.isFor();
        com.google.javascript.rhino.Node node26 = node9.cloneTree();
        boolean boolean27 = node26.isArrayLit();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(47, node34, node40);
        node34.detachChildren();
        boolean boolean44 = node34.hasMoreThanOneChild();
        boolean boolean45 = node34.isNumber();
        com.google.javascript.rhino.Node node46 = node21.srcref(node34);
        java.lang.String str47 = node34.toStringTree();
        node34.detachChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ERROR\n" + "'", str47, "ERROR\n");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = null;
        com.google.javascript.rhino.Node node43 = node10.setJSDocInfo(jSDocInfo42);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = node43.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node30.isString();
        int int42 = node30.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node54 = node30.copyInformationFrom(node53);
        java.lang.String str55 = node54.toStringTree();
        com.google.javascript.rhino.Node node56 = node21.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("REGEXP ", (int) (byte) 10, 2);
        com.google.javascript.rhino.Node node61 = node56.copyInformationFromForTree(node60);
        // The following exception was thrown during execution in test generation
        try {
            node56.setDouble((double) 49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR 10 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR\n" + "'", str55, "ERROR\n");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        java.lang.String str17 = node9.toString(true, false, true);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node9.setJSType(jSType18);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        node5.setLength(38);
        node5.setSourceEncodedPositionForTree((int) '#');
        boolean boolean20 = node5.isFor();
        boolean boolean21 = node5.isWith();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(15, nodeArray3);
        com.google.javascript.rhino.Node node11 = node10.getLastSibling();
        node10.setIsSyntheticBlock(true);
        boolean boolean14 = node10.isComma();
        boolean boolean15 = node10.isInstanceOf();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isReturn();
        com.google.javascript.rhino.Node node44 = node13.removeChildren();
        node44.setSourceEncodedPositionForTree(1);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node53.isAssignAdd();
        boolean boolean56 = node53.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        boolean boolean69 = node62.isFor();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(0, node62, 0, 0);
        boolean boolean73 = node62.isString();
        int int74 = node62.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node85 = node79.useSourceInfoIfMissingFrom(node84);
        com.google.javascript.rhino.Node node86 = node62.copyInformationFrom(node85);
        java.lang.String str87 = node86.toStringTree();
        com.google.javascript.rhino.Node node88 = node53.useSourceInfoIfMissingFromForTree(node86);
        boolean boolean89 = node86.isBlock();
        com.google.javascript.rhino.Node node90 = node4.srcrefTree(node86);
        boolean boolean91 = node4.wasEmptyNode();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ERROR\n" + "'", str87, "ERROR\n");
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        node15.putIntProp((int) (byte) 0, 42);
        boolean boolean37 = node15.isDec();
        boolean boolean38 = node15.isTrue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(38, 42, 30);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor5 = ancestorIterable4.iterator();
        org.junit.Assert.assertNotNull(ancestorIterable4);
        org.junit.Assert.assertNotNull(nodeItor5);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        node33.setSourceEncodedPositionForTree((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = node33.removeFirstChild();
        boolean boolean38 = node33.getBooleanProp(36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node33.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isScript();
        com.google.javascript.rhino.Node node21 = node5.getLastChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        int int39 = node27.getSourceOffset();
        boolean boolean40 = node27.isVarArgs();
        boolean boolean41 = node27.isDo();
        int int42 = node5.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        boolean boolean53 = node52.isIn();
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        boolean boolean76 = node63.isEquivalentToTyped(node75);
        boolean boolean77 = node63.isNull();
        com.google.javascript.rhino.Node node78 = node52.copyInformationFromForTree(node63);
        boolean boolean79 = node63.isCase();
        node63.removeProp(16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node63.siblings();
        node47.addChildToBack(node63);
        com.google.javascript.rhino.Node node84 = node5.copyInformationFrom(node47);
        java.lang.Object obj86 = node47.getProp((int) (byte) 10);
        boolean boolean87 = node47.isVoid();
        boolean boolean88 = node47.isTrue();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 36);
        com.google.javascript.rhino.Node node3 = node2.cloneTree();
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node15 = node9.useSourceInfoIfMissingFrom(node14);
        boolean boolean16 = node9.isFor();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(0, node9, 0, 0);
        boolean boolean20 = node9.isString();
        int int21 = node9.getSourceOffset();
        boolean boolean22 = node9.isVarArgs();
        int int23 = node9.getChildCount();
        boolean boolean24 = node9.isNot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', node2, node9, 2, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        node40.setOptionalArg(true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 0, 8);
        boolean boolean4 = node3.isVarArgs();
        boolean boolean5 = node3.isWhile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node60.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = null;
        com.google.javascript.rhino.Node node63 = node60.setJSDocInfo(jSDocInfo62);
        boolean boolean64 = node63.isNumber();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        boolean boolean3 = node2.isFromExterns();
        com.google.javascript.rhino.Node node4 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildToFront(node4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        boolean boolean32 = node30.isInc();
        boolean boolean33 = node30.isOr();
        boolean boolean34 = node30.isCall();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        int int66 = node39.getType();
        boolean boolean67 = node39.hasOneChild();
        node30.addChildToFront(node39);
        boolean boolean69 = node30.isAdd();
        int int70 = node30.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray2, 2, (int) ' ');
        com.google.javascript.rhino.Node node9 = node8.getLastChild();
        boolean boolean10 = node8.isTrue();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        boolean boolean17 = node16.isIn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node27.isNull();
        com.google.javascript.rhino.Node node42 = node16.copyInformationFromForTree(node27);
        node16.detachChildren();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(48, node16);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node44.addChildrenToFront(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node44.siblings();
        com.google.javascript.rhino.Node node49 = node44.removeFirstChild();
        com.google.javascript.rhino.Node node50 = node8.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean51 = node50.isFalse();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) 'a', 56, (int) (byte) 10);
        node2.addChildToFront(node42);
        int int45 = node42.getIntProp(49);
        node42.setVarArgs(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 4095.0", 0, (int) (short) 0);
        com.google.javascript.rhino.InputId inputId4 = node3.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(inputId4);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNew();
        boolean boolean38 = node4.isDebugger();
        boolean boolean39 = node4.isScript();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node30.isString();
        int int42 = node30.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node54 = node30.copyInformationFrom(node53);
        java.lang.String str55 = node54.toStringTree();
        com.google.javascript.rhino.Node node56 = node21.useSourceInfoIfMissingFromForTree(node54);
        node21.setSourceEncodedPositionForTree((int) 'a');
        node21.setSourceEncodedPositionForTree((int) (short) -1);
        boolean boolean61 = node21.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR\n" + "'", str55, "ERROR\n");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node15 = node10.getLastSibling();
        com.google.javascript.rhino.Node node17 = node15.getAncestor(2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = node17.isGetterDef();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.clearAllFlags();
        int int3 = sideEffectFlags0.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags0.clearAllFlags();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        java.lang.String str35 = node15.toStringTree();
        boolean boolean36 = node15.isTypeOf();
        boolean boolean37 = node15.isStringKey();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ERROR\n" + "'", str35, "ERROR\n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node38.isEquivalentToTyped(node50);
        boolean boolean52 = node38.isNull();
        com.google.javascript.rhino.Node node53 = node27.copyInformationFromForTree(node38);
        boolean boolean54 = node38.isCase();
        int int55 = node38.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = null;
        com.google.javascript.rhino.Node node57 = node38.setJSDocInfo(jSDocInfo56);
        com.google.javascript.rhino.Node node58 = node21.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node58.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setMutatesGlobalState();
        boolean boolean4 = sideEffectFlags3.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags3.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags3.clearAllFlags();
        sideEffectFlags7.clearSideEffectFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        boolean boolean34 = node15.isDo();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node15.clonePropsFrom(node44);
        node15.addSuppression("ERROR 0");
        node15.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(47, node34, node40);
        node34.detachChildren();
        boolean boolean44 = node34.hasMoreThanOneChild();
        boolean boolean45 = node34.isNumber();
        com.google.javascript.rhino.Node node46 = node21.srcref(node34);
        boolean boolean47 = node46.isSwitch();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        boolean boolean34 = node20.isVoid();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node40.isFor();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(0, node40, 0, 0);
        boolean boolean51 = node40.isString();
        int int52 = node40.getSourceOffset();
        boolean boolean53 = node40.isVarArgs();
        boolean boolean54 = node40.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node40.getJSDocInfo();
        boolean boolean56 = node40.isSyntheticBlock();
        int int57 = node40.getSideEffectFlags();
        node40.addSuppression("hi!");
        // The following exception was thrown during execution in test generation
        try {
            node20.addChildToBack(node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.toString();
        boolean boolean18 = node5.mayMutateGlobalStateOrThrow();
        node5.detachChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isCall();
        boolean boolean16 = node5.isNew();
        int int17 = node5.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(47, node51, node57);
        node51.detachChildren();
        boolean boolean61 = node51.isAssign();
        boolean boolean62 = node51.isReturn();
        boolean boolean63 = node51.isAssign();
        java.util.Set<java.lang.String> strSet64 = node51.getDirectives();
        com.google.javascript.rhino.Node node65 = node37.useSourceInfoFromForTree(node51);
        com.google.javascript.rhino.Node node66 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node67 = node65.clonePropsFrom(node66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        java.lang.String str56 = node37.checkTreeEquals(node55);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(24, node55);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        boolean boolean70 = node69.isIn();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(47, node63, node69);
        java.lang.String str72 = node71.getSourceFileName();
        boolean boolean73 = node71.hasOneChild();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node78 = node71.srcref(node77);
        // The following exception was thrown during execution in test generation
        try {
            node31.addChildrenAfter(node57, node78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        boolean boolean15 = node14.isVarArgs();
        boolean boolean16 = node14.isCase();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags4.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.setThrows();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        boolean boolean51 = node9.isIf();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node67.isEquivalentToTyped(node79);
        boolean boolean81 = node67.isNull();
        com.google.javascript.rhino.Node node82 = node56.copyInformationFromForTree(node67);
        boolean boolean83 = node67.isCase();
        node67.removeProp(16);
        node67.putBooleanProp(16, false);
        int int89 = node67.getLineno();
        com.google.javascript.rhino.Node node90 = node67.cloneNode();
        node9.addChildrenToBack(node90);
        boolean boolean92 = node9.isQualifiedName();
        boolean boolean93 = node9.isQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray2, 2, (int) ' ');
        com.google.javascript.rhino.Node node9 = node8.getLastChild();
        boolean boolean10 = node8.isTrue();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        boolean boolean17 = node16.isIn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node27.isNull();
        com.google.javascript.rhino.Node node42 = node16.copyInformationFromForTree(node27);
        node16.detachChildren();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(48, node16);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node44.addChildrenToFront(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node44.siblings();
        com.google.javascript.rhino.Node node49 = node44.removeFirstChild();
        com.google.javascript.rhino.Node node50 = node8.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean51 = node44.isDebugger();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        boolean boolean55 = node54.isFunction();
        boolean boolean56 = node54.isThis();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node66.isNew();
        int int70 = node66.getIntProp(8);
        java.lang.String str74 = node66.toString(true, false, true);
        boolean boolean75 = node66.isDelProp();
        node54.addChildToBack(node66);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ERROR" + "'", str74, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        boolean boolean7 = node4.isDelProp();
        boolean boolean8 = node4.isArrayLit();
        int int9 = node4.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100, 30, 23);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node15 = node9.useSourceInfoIfMissingFrom(node14);
        boolean boolean16 = node9.isFor();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(0, node9, 0, 0);
        boolean boolean20 = node9.isString();
        boolean boolean21 = node9.mayMutateArguments();
        com.google.javascript.rhino.Node node22 = node9.detachFromParent();
        node3.addChildToBack(node9);
        boolean boolean24 = node3.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        boolean boolean38 = node35.isLabel();
        int int39 = node35.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node61.isAssignAdd();
        com.google.javascript.rhino.Node node64 = node61.getParent();
        boolean boolean65 = node61.isInc();
        node61.setVarArgs(true);
        com.google.javascript.rhino.Node node68 = node35.useSourceInfoFrom(node61);
        java.lang.Object obj70 = node61.getProp(8);
        com.google.javascript.rhino.Node node71 = node61.getLastSibling();
        boolean boolean72 = node61.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        boolean boolean25 = node9.isThrow();
        com.google.javascript.rhino.Node node26 = node9.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = node26.isCast();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        int int24 = node9.getSourceOffset();
        boolean boolean25 = node9.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("REGEXP ");
        boolean boolean2 = node1.isStringKey();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        node80.setLineno((int) (short) 1);
        boolean boolean97 = node80.isOr();
        boolean boolean98 = node80.isTrue();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
        int int2 = sideEffectFlags1.valueOf();
        int int3 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        boolean boolean34 = node15.isVoid();
        boolean boolean35 = node15.isAssignAdd();
        boolean boolean37 = node15.getBooleanProp(53);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node22.isFor();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, node22, 0, 0);
        boolean boolean33 = node22.isNew();
        boolean boolean34 = node22.isCall();
        node22.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node37 = node5.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean38 = node22.isDelProp();
        boolean boolean39 = node22.isTry();
        boolean boolean40 = node22.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        node15.setVarArgs(true);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        boolean boolean55 = node54.isIn();
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node65.isEquivalentToTyped(node77);
        boolean boolean79 = node65.isNull();
        com.google.javascript.rhino.Node node80 = node54.copyInformationFromForTree(node65);
        boolean boolean81 = node65.isCase();
        int int83 = node65.getIntProp(0);
        com.google.javascript.rhino.Node node84 = node15.copyInformationFromForTree(node65);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        boolean boolean7 = node4.isDelProp();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node4.getAncestors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node4.getJSDocInfo();
        boolean boolean10 = node4.isThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        boolean boolean33 = node5.isLabel();
        node5.setSourceFileForTesting("");
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isDelProp();
        boolean boolean38 = node4.isVarArgs();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray42, 2, (int) ' ');
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(15, nodeArray42);
        com.google.javascript.rhino.Node node50 = node49.getLastSibling();
        boolean boolean51 = node49.isThrow();
        com.google.javascript.rhino.Node node52 = node4.copyInformationFromForTree(node49);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isEmpty();
        node5.setVarArgs(false);
        com.google.javascript.rhino.InputId inputId20 = null;
        node5.setInputId(inputId20);
        node5.removeProp((int) ' ');
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node((int) (byte) 1);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.children();
        boolean boolean4 = node2.isTry();
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node15 = node9.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node14.isEquivalentToTyped(node26);
        boolean boolean28 = node14.isNull();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        boolean boolean52 = node39.isEquivalentToTyped(node51);
        boolean boolean53 = node51.isAssignAdd();
        boolean boolean54 = node51.isSyntheticBlock();
        node14.putProp((-1), (java.lang.Object) node51);
        boolean boolean56 = node51.isAdd();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(49, node2, node51, 53, (int) (short) 0);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node5.setJSType(jSType14);
        node5.detachChildren();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node22.isFor();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, node22, 0, 0);
        boolean boolean33 = node22.isString();
        int int34 = node22.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node node46 = node22.copyInformationFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node62.isEquivalentToTyped(node74);
        boolean boolean76 = node62.isNull();
        com.google.javascript.rhino.Node node77 = node51.copyInformationFromForTree(node62);
        boolean boolean78 = node62.isSetterDef();
        int int79 = node62.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node62.children();
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray87 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray87, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node91 = node85.useSourceInfoIfMissingFrom(node90);
        node91.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node95 = node62.useSourceInfoFromForTree(node91);
        boolean boolean96 = node91.isLabel();
        boolean boolean97 = node46.isEquivalentToTyped(node91);
        boolean boolean98 = node91.isLabelName();
        node5.addChildrenToBack(node91);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(nodeIterable80);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(nodeArray87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node31.setStaticSourceFile(staticSourceFile58);
        java.lang.String str63 = node31.toString(true, false, true);
        boolean boolean64 = node31.isNew();
        boolean boolean65 = node31.isSetterDef();
        boolean boolean66 = node21.isEquivalentToTyped(node31);
        com.google.javascript.rhino.Node node68 = node21.getChildAtIndex(0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        node21.setStaticSourceFile(staticSourceFile69);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ERROR" + "'", str63, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node41.isNull();
        com.google.javascript.rhino.Node node56 = node30.copyInformationFromForTree(node41);
        boolean boolean57 = node41.isSetterDef();
        int int58 = node41.getLength();
        boolean boolean59 = node41.isName();
        boolean boolean60 = node41.isFalse();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) '#', node22, node41);
        node22.removeProp(47);
        boolean boolean64 = node22.isVar();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node21.isNew();
        int int25 = node21.getIntProp(8);
        boolean boolean26 = node21.isQualifiedName();
        boolean boolean27 = node21.isNull();
        boolean boolean28 = node4.hasChild(node21);
        boolean boolean29 = node21.isFunction();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, node4, (int) ' ', (int) '#');
        boolean boolean8 = node7.isCast();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        boolean boolean21 = node14.isFor();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(0, node14, 0, 0);
        boolean boolean25 = node14.isString();
        int int26 = node14.getSourceOffset();
        boolean boolean27 = node14.isVarArgs();
        boolean boolean28 = node14.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node14.getJSDocInfo();
        boolean boolean30 = node14.isSyntheticBlock();
        int int31 = node14.getSideEffectFlags();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node14.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node34 = node14.getAncestor(0);
        com.google.javascript.rhino.Node node35 = node7.useSourceInfoIfMissingFrom(node34);
        boolean boolean36 = node34.isDelProp();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isSetterDef();
        node4.putIntProp(51, 12);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ASSIGN_MOD [source_file: 12] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = null;
        com.google.javascript.rhino.Node node43 = node10.setJSDocInfo(jSDocInfo42);
        com.google.javascript.rhino.Node node44 = node10.cloneNode();
        boolean boolean45 = node10.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.setMutatesGlobalState();
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags4.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags4.clearAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node60, node66);
        boolean boolean69 = node68.isRegExp();
        boolean boolean70 = node68.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node71 = node54.srcref(node68);
        boolean boolean72 = node71.isDec();
        boolean boolean73 = node71.isNull();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }
}


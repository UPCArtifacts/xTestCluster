import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        java.lang.String str18 = node9.toString(true, false, true);
        boolean boolean19 = node9.isQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node20 = node9.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ERROR" + "'", str18, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isSyntheticBlock();
        node21.setSourceEncodedPosition((int) '4');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node21.getJsDocBuilderForNode();
        node21.setSourceEncodedPositionForTree((int) (short) 0);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        node15.removeProp(16);
        node15.putBooleanProp(16, false);
        int int37 = node15.getLineno();
        com.google.javascript.rhino.Node node38 = node15.cloneNode();
        com.google.javascript.rhino.Node node39 = node15.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean2 = node1.isWith();
        boolean boolean3 = node1.isInc();
        int int4 = node1.getLineno();
        boolean boolean5 = node1.isNoSideEffectsCall();
        int int6 = node1.getChangeTime();
        com.google.javascript.rhino.InputId inputId7 = node1.getInputId();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(inputId7);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setThrows();
        int int5 = sideEffectFlags4.valueOf();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        int int32 = node15.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = null;
        com.google.javascript.rhino.Node node34 = node15.setJSDocInfo(jSDocInfo33);
        boolean boolean35 = node34.isBreak();
        int int36 = node34.getSourceOffset();
        boolean boolean37 = node34.isDo();
        java.lang.String str38 = node34.toStringTree();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ERROR\n" + "'", str38, "ERROR\n");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        com.google.javascript.rhino.Node node34 = node33.cloneNode();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable35 = node34.getAncestors();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(ancestorIterable35);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 0, 8);
        boolean boolean4 = node3.isCatch();
        boolean boolean5 = node3.isInc();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        boolean boolean26 = node21.isNot();
        java.lang.String str27 = node21.getQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        java.lang.Object obj34 = node4.getProp(4);
        int int35 = node4.getType();
        boolean boolean36 = node4.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node38.new FileLevelJsDocBuilder();
        boolean boolean40 = node38.isString();
        boolean boolean41 = node4.isEquivalentToTyped(node38);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        com.google.javascript.rhino.Node node21 = node13.getFirstChild();
        boolean boolean22 = node21.isThis();
        boolean boolean23 = node21.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        boolean boolean34 = node5.isAssignAdd();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node56.isAssignAdd();
        boolean boolean59 = node56.hasChildren();
        boolean boolean60 = node56.isSetterDef();
        node56.addSuppression("ERROR\n");
        node56.setLength(52);
        boolean boolean65 = node5.isEquivalentTo(node56);
        boolean boolean66 = node5.isIn();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags2);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isCatch();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags16 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags17 = sideEffectFlags16.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = sideEffectFlags17.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = sideEffectFlags18.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node9.setSideEffectFlags(sideEffectFlags18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags17);
        org.junit.Assert.assertNotNull(sideEffectFlags18);
        org.junit.Assert.assertNotNull(sideEffectFlags19);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        boolean boolean8 = node6.isContinue();
        java.lang.String str12 = node6.toString(true, true, false);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(4095, node6, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node26.isVoid();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node37.isEquivalentToTyped(node49);
        boolean boolean51 = node49.isAssignAdd();
        boolean boolean52 = node49.hasChildren();
        boolean boolean53 = node49.isSetterDef();
        node49.addSuppression("ERROR\n");
        boolean boolean56 = node26.isEquivalentToShallow(node49);
        boolean boolean57 = node49.isScript();
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        boolean boolean70 = node69.isIn();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(47, node63, node69);
        java.lang.String str72 = node71.getSourceFileName();
        node71.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        boolean boolean80 = node79.isIn();
        boolean boolean81 = node79.isContinue();
        java.lang.String str85 = node79.toString(true, true, false);
        com.google.javascript.rhino.Node node86 = node71.clonePropsFrom(node79);
        boolean boolean87 = node86.isParamList();
        boolean boolean88 = node86.isString();
        com.google.javascript.rhino.Node node89 = node86.getLastChild();
        com.google.javascript.rhino.Node node90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(10, node6, node49, node86, node90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ERROR" + "'", str12, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ERROR" + "'", str85, "ERROR");
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isCast();
        com.google.javascript.rhino.InputId inputId11 = node9.getInputId();
        node9.setType((int) 'a');
        java.util.Set<java.lang.String> strSet14 = node9.getDirectives();
        boolean boolean15 = node9.isWith();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node31.isEquivalentToTyped(node43);
        boolean boolean45 = node31.isNull();
        com.google.javascript.rhino.Node node46 = node20.copyInformationFromForTree(node31);
        boolean boolean47 = node31.isSetterDef();
        int int48 = node31.getLength();
        boolean boolean49 = node31.isName();
        com.google.javascript.rhino.Node node50 = node9.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean51 = node31.isStringKey();
        node4.addChildrenToFront(node31);
        java.lang.Object obj54 = node31.getProp((int) (short) 10);
        boolean boolean55 = node31.isQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node5.getJSDocInfo();
        boolean boolean21 = node5.isFalse();
        int int22 = node5.getSourceOffset();
        boolean boolean23 = node5.isIf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.setThrows();
        int int7 = sideEffectFlags6.valueOf();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "hi!", 1, 52);
        boolean boolean5 = node4.isScript();
        boolean boolean6 = node4.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        boolean boolean27 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node28 = node21.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isCast();
        com.google.javascript.rhino.InputId inputId11 = node9.getInputId();
        node9.setType((int) 'a');
        java.util.Set<java.lang.String> strSet14 = node9.getDirectives();
        boolean boolean15 = node9.isWith();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node31.isEquivalentToTyped(node43);
        boolean boolean45 = node31.isNull();
        com.google.javascript.rhino.Node node46 = node20.copyInformationFromForTree(node31);
        boolean boolean47 = node31.isSetterDef();
        int int48 = node31.getLength();
        boolean boolean49 = node31.isName();
        com.google.javascript.rhino.Node node50 = node9.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean51 = node31.isStringKey();
        node4.addChildrenToFront(node31);
        boolean boolean53 = node4.isIn();
        boolean boolean54 = node4.isCast();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        boolean boolean16 = node5.isOr();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node23.isFor();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, node23, 0, 0);
        boolean boolean34 = node23.isString();
        boolean boolean35 = node23.isEmpty();
        node5.putProp((int) '#', (java.lang.Object) boolean35);
        java.lang.String str37 = node5.getSourceFileName();
        com.google.javascript.rhino.Node node38 = node5.cloneNode();
        int int39 = node38.getSourceOffset();
        node38.removeProp(12);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray6, 1, 4095);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(49, nodeArray6, 4, 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((-1), nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) ' ', nodeArray6, 15, 10);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, nodeArray6);
        boolean boolean21 = node20.isCast();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isFunction();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        boolean boolean13 = node12.isIn();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(47, node6, node12);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(51, node14);
        boolean boolean17 = node14.isThis();
        com.google.javascript.rhino.Node node18 = node14.cloneNode();
        boolean boolean19 = node18.isGetterDef();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.wasEmptyNode();
        com.google.javascript.rhino.jstype.JSType jSType35 = node15.getJSType();
        // The following exception was thrown during execution in test generation
        try {
            node15.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSType35);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean71 = node69.getBooleanProp((int) '#');
        int int72 = node69.getChangeTime();
        int int73 = node69.getCharno();
        boolean boolean74 = node69.isOptionalArg();
        boolean boolean75 = node69.isFor();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        boolean boolean54 = node36.mayMutateArguments();
        java.lang.String str55 = node36.toStringTree();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR\n" + "'", str55, "ERROR\n");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node4.siblings();
        boolean boolean8 = node4.mayMutateArguments();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = node5.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        boolean boolean42 = node40.isVoid();
        boolean boolean43 = node40.isObjectLit();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        boolean boolean51 = node49.isContinue();
        java.lang.String str55 = node49.toString(true, true, false);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node49, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node86 = node80.useSourceInfoIfMissingFrom(node85);
        boolean boolean87 = node74.isEquivalentToTyped(node86);
        boolean boolean88 = node74.isNull();
        com.google.javascript.rhino.Node node89 = node63.copyInformationFromForTree(node74);
        boolean boolean90 = node74.isCase();
        int int91 = node74.getChangeTime();
        com.google.javascript.rhino.Node node92 = node49.clonePropsFrom(node74);
        node74.setType((-1));
        int int95 = node74.getSourceOffset();
        com.google.javascript.rhino.Node node96 = node40.srcrefTree(node74);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR" + "'", str55, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node4.getAncestors();
        boolean boolean12 = node4.isAnd();
        node4.setLineno(24);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ancestorIterable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isSyntheticBlock();
        java.lang.String str33 = node15.getQualifiedName();
        boolean boolean34 = node15.isLabelName();
        boolean boolean35 = node15.isNumber();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        node9.setWasEmptyNode(true);
        node9.setLineno(40);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        // The following exception was thrown during execution in test generation
        try {
            node21.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        // The following exception was thrown during execution in test generation
        try {
            node13.setDouble((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: REGEXP [directives: [ERROR]] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        java.lang.String str23 = node4.checkTreeEquals(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        boolean boolean53 = node45.isAssign();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFromForTree(node45);
        boolean boolean55 = node4.isGetElem();
        boolean boolean56 = node4.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        boolean boolean7 = node4.isSyntheticBlock();
        boolean boolean8 = node4.isCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        node9.setSourceFileForTesting("ERROR [change_time: 55]");
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isCase();
        boolean boolean59 = node42.isSyntheticBlock();
        java.lang.String str60 = node42.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node9.removeChild(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        boolean boolean31 = node5.isGetElem();
        boolean boolean32 = node5.isOnlyModifiesArgumentsCall();
        com.google.javascript.rhino.Node node33 = node5.getLastSibling();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setMutatesGlobalState();
        boolean boolean4 = sideEffectFlags3.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        boolean boolean12 = node4.isGetterDef();
        boolean boolean13 = node4.isArrayLit();
        boolean boolean14 = node4.isWith();
        com.google.javascript.rhino.Node node15 = node4.cloneNode();
        node15.setSourceEncodedPositionForTree((int) '4');
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.jstype.JSType jSType12 = node10.getJSType();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node24 = node18.useSourceInfoIfMissingFrom(node23);
        boolean boolean25 = node18.isFor();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node18, 0, 0);
        boolean boolean29 = node18.isReturn();
        boolean boolean30 = node18.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        com.google.javascript.rhino.Node node55 = node52.getParent();
        boolean boolean56 = node52.isInc();
        boolean boolean57 = node52.isSwitch();
        node18.addChildToFront(node52);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        boolean boolean82 = node69.isEquivalentToTyped(node81);
        boolean boolean83 = node81.isAssignAdd();
        boolean boolean84 = node81.hasChildren();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(32, node81, 47, 32);
        node81.putBooleanProp(32, false);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) 'a', node10, node52, node81, 0, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        boolean boolean87 = node62.isVar();
        boolean boolean88 = node62.isIf();
        boolean boolean89 = node62.isVar();
        boolean boolean90 = node62.isUnscopedQualifiedName();
        boolean boolean91 = node62.isQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node33.siblings();
        com.google.javascript.rhino.Node node38 = node33.removeFirstChild();
        boolean boolean39 = node33.isVoid();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node23 = node21.cloneNode();
        boolean boolean24 = node23.isNull();
        boolean boolean25 = node23.isIf();
        node23.setSourceFileForTesting("ERROR");
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        node15.setVarArgs(false);
        node15.setChangeTime(55);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node60 = node57.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node57.getJsDocBuilderForNode();
        boolean boolean62 = node57.isNot();
        node15.addChildToFront(node57);
        boolean boolean64 = node15.isNew();
        boolean boolean65 = node15.isTry();
        boolean boolean66 = node15.isOptionalArg();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        boolean boolean25 = node9.isFor();
        boolean boolean26 = node9.isVarArgs();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        node42.setVarArgs(false);
        boolean boolean61 = node42.isTrue();
        node9.addChildrenToFront(node42);
        boolean boolean63 = node42.mayMutateArguments();
        com.google.javascript.rhino.Node node64 = node42.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(node64);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("REGEXP ", (int) (byte) 10, 2);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isIn();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        boolean boolean33 = node20.isEquivalentToTyped(node32);
        boolean boolean34 = node20.isNull();
        com.google.javascript.rhino.Node node35 = node9.copyInformationFromForTree(node20);
        node9.detachChildren();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(48, node9);
        boolean boolean38 = node9.isAssignAdd();
        boolean boolean39 = node9.hasChildren();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node9);
        boolean boolean41 = node3.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        boolean boolean34 = node15.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node15.getJSDocInfo();
        boolean boolean36 = node15.isGetProp();
        boolean boolean37 = node15.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node52.isNull();
        com.google.javascript.rhino.Node node67 = node41.copyInformationFromForTree(node52);
        boolean boolean68 = node52.isSetterDef();
        int int69 = node52.getLength();
        boolean boolean70 = node52.isName();
        boolean boolean71 = node52.isFalse();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoIfMissingFrom(node81);
        boolean boolean83 = node82.isUnscopedQualifiedName();
        node52.addChildrenToFront(node82);
        node34.addChildToBack(node52);
        com.google.javascript.rhino.Node node87 = node52.getAncestor((int) (byte) 1);
        boolean boolean88 = node52.isFunction();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        boolean boolean42 = node40.isVoid();
        boolean boolean43 = node40.isObjectLit();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        boolean boolean56 = node49.isFor();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node49, 0, 0);
        boolean boolean60 = node49.isString();
        int int61 = node49.getSourceOffset();
        boolean boolean62 = node49.isVarArgs();
        int int63 = node49.getChildCount();
        boolean boolean64 = node49.isNot();
        com.google.javascript.rhino.Node node65 = node40.useSourceInfoFrom(node49);
        node49.setChangeTime(23);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        com.google.javascript.rhino.jstype.JSType jSType87 = node70.getJSType();
        int int89 = node70.getIntProp(38);
        boolean boolean90 = node70.isAnd();
        node70.putIntProp(10, 0);
        boolean boolean94 = node70.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isCatch();
        boolean boolean16 = node9.isCatch();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("REGEXP ");
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        boolean boolean12 = node4.isParamList();
        com.google.javascript.rhino.Node node13 = node4.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node24 = node18.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        boolean boolean36 = node23.isEquivalentToTyped(node35);
        boolean boolean37 = node35.isAssignAdd();
        int int38 = node35.getChangeTime();
        boolean boolean39 = node35.isIf();
        boolean boolean40 = node35.isHook();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node41 = node4.getChildBefore(node35);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.hasMoreThanOneChild();
        node5.removeProp(2);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = node5.getExistingIntProp(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 36");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(4095);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(29);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        node33.setOptionalArg(false);
        node33.setSourceFileForTesting("NUMBER 4095.0");
        boolean boolean45 = node33.isExprResult();
        boolean boolean46 = node33.isGetterDef();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node11 = node4.getNext();
        int int12 = node4.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        boolean boolean33 = node5.isDec();
        boolean boolean34 = node5.isVar();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = node5.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        boolean boolean46 = node15.isName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node15.children();
        com.google.javascript.rhino.Node node48 = node15.removeChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNull(node48);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isReturn();
        boolean boolean18 = node5.isScript();
        com.google.javascript.rhino.Node node20 = node5.getAncestor(10);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        com.google.javascript.rhino.Node node42 = node40.getParent();
        // The following exception was thrown during execution in test generation
        try {
            node42.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        int int22 = node21.getSourcePosition();
        java.lang.String str23 = node21.getSourceFileName();
        boolean boolean24 = node21.isDo();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        node15.putIntProp((int) (byte) 0, 42);
        boolean boolean37 = node15.isDec();
        node15.putIntProp(53, (int) (short) 1);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100, 30, 23);
        node3.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isNoSideEffectsCall();
        int int40 = node2.getIntProp(2);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        boolean boolean46 = node45.isIn();
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        boolean boolean69 = node56.isEquivalentToTyped(node68);
        boolean boolean70 = node56.isNull();
        com.google.javascript.rhino.Node node71 = node45.copyInformationFromForTree(node56);
        boolean boolean72 = node71.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType73 = node71.getJSType();
        boolean boolean74 = node71.isIf();
        com.google.javascript.rhino.Node node75 = node2.useSourceInfoIfMissingFromForTree(node71);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray5, 1, 4095);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(49, nodeArray5, 4, 0);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((-1), nodeArray5);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(47, nodeArray5, 23, 15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("hi!", 1, 0);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        boolean boolean28 = node27.isCast();
        com.google.javascript.rhino.InputId inputId29 = node27.getInputId();
        node27.setType((int) 'a');
        java.util.Set<java.lang.String> strSet32 = node27.getDirectives();
        boolean boolean33 = node27.isInc();
        boolean boolean34 = node27.isSetterDef();
        com.google.javascript.rhino.Node node35 = node22.copyInformationFromForTree(node27);
        node27.detachChildren();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isCast();
        com.google.javascript.rhino.InputId inputId43 = node41.getInputId();
        node41.setType((int) 'a');
        java.util.Set<java.lang.String> strSet46 = node41.getDirectives();
        boolean boolean47 = node41.isInc();
        node41.putBooleanProp(55, true);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        boolean boolean56 = node55.isCast();
        com.google.javascript.rhino.InputId inputId57 = node55.getInputId();
        node55.setType((int) 'a');
        java.util.Set<java.lang.String> strSet60 = node55.getDirectives();
        boolean boolean61 = node55.isWith();
        boolean boolean62 = node55.isAssignAdd();
        boolean boolean63 = node55.isTrue();
        node41.addChildToFront(node55);
        // The following exception was thrown during execution in test generation
        try {
            node18.addChildAfter(node27, node55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(inputId43);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node42 = node41.getLastChild();
        boolean boolean43 = node30.isEquivalentToTyped(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node41.siblings();
        int int45 = node41.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node18.isAssignAdd();
        boolean boolean39 = node18.isNot();
        node18.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        boolean boolean30 = node5.isHook();
        int int31 = node5.getChildCount();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(51, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node53.isAssignAdd();
        boolean boolean56 = node53.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        boolean boolean69 = node62.isFor();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(0, node62, 0, 0);
        boolean boolean73 = node62.isString();
        int int74 = node62.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node85 = node79.useSourceInfoIfMissingFrom(node84);
        com.google.javascript.rhino.Node node86 = node62.copyInformationFrom(node85);
        java.lang.String str87 = node86.toStringTree();
        com.google.javascript.rhino.Node node88 = node53.useSourceInfoIfMissingFromForTree(node86);
        boolean boolean89 = node86.isBlock();
        com.google.javascript.rhino.Node node90 = node4.srcrefTree(node86);
        boolean boolean91 = node90.isName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ERROR\n" + "'", str87, "ERROR\n");
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isSyntheticBlock();
        java.lang.String str33 = node15.getQualifiedName();
        boolean boolean34 = node15.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable35 = node15.getAncestors();
        boolean boolean36 = node15.isThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ancestorIterable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        boolean boolean3 = node2.isVar();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isCall();
        java.lang.String str16 = node5.getSourceFileName();
        com.google.javascript.rhino.InputId inputId17 = node5.getInputId();
        node5.putBooleanProp((int) (short) 0, false);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(inputId17);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(31);
        com.google.javascript.rhino.Node node2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node3 = node1.clonePropsFrom(node2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        boolean boolean27 = node21.isIn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        boolean boolean38 = node37.isIn();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node48.isEquivalentToTyped(node60);
        boolean boolean62 = node48.isNull();
        com.google.javascript.rhino.Node node63 = node37.copyInformationFromForTree(node48);
        boolean boolean64 = node48.isSetterDef();
        int int65 = node48.getLength();
        boolean boolean66 = node48.isName();
        java.lang.String str67 = node48.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node73.isFor();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(0, node73, 0, 0);
        boolean boolean84 = node73.isString();
        int int85 = node73.getSourceOffset();
        boolean boolean86 = node73.isVarArgs();
        boolean boolean87 = node73.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node73.getJSDocInfo();
        boolean boolean89 = node73.isSyntheticBlock();
        boolean boolean90 = node48.isEquivalentToShallow(node73);
        com.google.javascript.rhino.Node node91 = node4.useSourceInfoIfMissingFrom(node48);
        boolean boolean92 = node4.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        int int14 = node5.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isSetterDef();
        int int47 = node30.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node30.children();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        node59.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node63 = node30.useSourceInfoFromForTree(node59);
        boolean boolean64 = node5.isEquivalentTo(node63);
        boolean boolean65 = node63.isOptionalArg();
        boolean boolean66 = node63.isFor();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        boolean boolean79 = node72.isFor();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0, node72, 0, 0);
        boolean boolean83 = node82.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = null;
        com.google.javascript.rhino.Node node85 = node82.setJSDocInfo(jSDocInfo84);
        boolean boolean86 = node63.isEquivalentToShallow(node82);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(40, node63, 53, 52);
        com.google.javascript.rhino.InputId inputId90 = null;
        node63.setInputId(inputId90);
        boolean boolean92 = node63.isCatch();
        boolean boolean93 = node63.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = null;
        com.google.javascript.rhino.Node node35 = node15.setJSDocInfo(jSDocInfo34);
        boolean boolean36 = node35.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        boolean boolean35 = node15.isBreak();
        boolean boolean36 = node15.isLocalResultCall();
        node15.setLineno(0);
        boolean boolean39 = node15.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        node21.setVarArgs(true);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        boolean boolean36 = node35.isIn();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node46.isEquivalentToTyped(node58);
        boolean boolean60 = node46.isNull();
        com.google.javascript.rhino.Node node61 = node35.copyInformationFromForTree(node46);
        boolean boolean62 = node46.isSetterDef();
        int int63 = node46.getLength();
        boolean boolean64 = node46.isDebugger();
        boolean boolean65 = node30.isEquivalentToTyped(node46);
        boolean boolean66 = node30.isNoSideEffectsCall();
        java.lang.Object obj68 = node30.getProp(8);
        boolean boolean69 = node21.isEquivalentTo(node30);
        boolean boolean70 = node21.isVar();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node21.getJSDocInfo();
        boolean boolean26 = node21.isTypeOf();
        boolean boolean27 = node21.isNull();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        int int70 = node69.getSourcePosition();
        boolean boolean71 = node69.isFor();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 1, (int) (byte) -1, 30);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isCase();
        int int36 = node19.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = null;
        com.google.javascript.rhino.Node node38 = node19.setJSDocInfo(jSDocInfo37);
        boolean boolean39 = node38.isBreak();
        com.google.javascript.rhino.Node node40 = node3.copyInformationFrom(node38);
        boolean boolean41 = node38.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isCast();
        com.google.javascript.rhino.InputId inputId41 = node39.getInputId();
        node39.setType((int) 'a');
        java.util.Set<java.lang.String> strSet44 = node39.getDirectives();
        node39.setChangeTime(4);
        com.google.javascript.rhino.Node node47 = node15.srcref(node39);
        boolean boolean48 = node47.isComma();
        boolean boolean49 = node47.isIf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node41.isNE();
        boolean boolean43 = node41.isTry();
        int int45 = node41.getIntProp((int) (short) 100);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray7, 2, (int) ' ');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4, nodeArray7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(39, nodeArray7, (int) (byte) 10, 56);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        java.lang.String str35 = node15.toStringTree();
        boolean boolean36 = node15.isQualifiedName();
        boolean boolean37 = node15.isThis();
        com.google.javascript.rhino.Node node38 = node15.getParent();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ERROR\n" + "'", str35, "ERROR\n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node6);
        com.google.javascript.rhino.Node node35 = node34.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray38, 2, (int) ' ');
        java.lang.String str45 = node44.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node67.isAssignAdd();
        com.google.javascript.rhino.Node node70 = node67.getParent();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(38, node34, node44, node67);
        boolean boolean72 = node34.isNew();
        boolean boolean73 = node34.isAdd();
        boolean boolean74 = node34.isAssign();
        // The following exception was thrown during execution in test generation
        try {
            node34.setDouble((double) 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        boolean boolean41 = node39.isContinue();
        java.lang.String str45 = node39.toString(true, true, false);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(4095, node39, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        boolean boolean80 = node64.isCase();
        int int81 = node64.getChangeTime();
        com.google.javascript.rhino.Node node82 = node39.clonePropsFrom(node64);
        boolean boolean83 = node82.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            node33.addChildrenToFront(node82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ERROR" + "'", str45, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node5.getAncestors();
        boolean boolean35 = node5.isNull();
        boolean boolean36 = node5.isGetElem();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        boolean boolean39 = node2.isNE();
        boolean boolean40 = node2.isName();
        boolean boolean41 = node2.isCatch();
        boolean boolean42 = node2.isSwitch();
        java.lang.String str43 = node2.toStringTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "REGEXP \n" + "'", str43, "REGEXP \n");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isInstanceOf();
        java.lang.String str25 = node21.toStringTree();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node41.isNull();
        com.google.javascript.rhino.Node node56 = node30.copyInformationFromForTree(node41);
        node30.detachChildren();
        boolean boolean58 = node30.isName();
        java.lang.Object obj60 = node30.getProp(4);
        com.google.javascript.rhino.Node node61 = node21.srcrefTree(node30);
        boolean boolean62 = node61.isOnlyModifiesArgumentsCall();
        int int63 = node61.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ERROR\n" + "'", str25, "ERROR\n");
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 47, 8);
        boolean boolean4 = node3.mayMutateGlobalStateOrThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node5.getJSDocInfo();
        node5.setLength(32);
        node5.putIntProp((int) (byte) 10, (int) (byte) 0);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        node10.setType(16);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(55, nodeArray4, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node14.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder15.append("EQ \n");
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        boolean boolean20 = node5.isFalse();
        boolean boolean21 = node5.isLocalResultCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node10.setLineno(8);
        boolean boolean13 = node10.isGetProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        // The following exception was thrown during execution in test generation
        try {
            node5.setDouble((double) 23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        node15.removeProp(16);
        boolean boolean34 = node15.isArrayLit();
        node15.detachChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.InputId inputId14 = null;
        node4.setInputId(inputId14);
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        boolean boolean23 = node22.isCast();
        com.google.javascript.rhino.InputId inputId24 = node22.getInputId();
        node22.setType((int) 'a');
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        boolean boolean28 = node22.isInc();
        boolean boolean29 = node22.isScript();
        boolean boolean30 = node22.isLabelName();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) '4', node22);
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildrenAfter(node16, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        boolean boolean38 = node25.isEquivalentToTyped(node37);
        boolean boolean39 = node37.isAssignAdd();
        boolean boolean40 = node37.isInstanceOf();
        java.lang.String str41 = node37.toStringTree();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        boolean boolean70 = node57.isEquivalentToTyped(node69);
        boolean boolean71 = node57.isNull();
        com.google.javascript.rhino.Node node72 = node46.copyInformationFromForTree(node57);
        node46.detachChildren();
        boolean boolean74 = node46.isName();
        java.lang.Object obj76 = node46.getProp(4);
        com.google.javascript.rhino.Node node77 = node37.srcrefTree(node46);
        boolean boolean78 = node46.isDec();
        com.google.javascript.rhino.Node node79 = null;
        // The following exception was thrown during execution in test generation
        try {
            node13.replaceChild(node46, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ERROR\n" + "'", str41, "ERROR\n");
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        boolean boolean42 = node40.isVoid();
        boolean boolean43 = node40.isObjectLit();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        boolean boolean56 = node49.isFor();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node49, 0, 0);
        boolean boolean60 = node49.isString();
        int int61 = node49.getSourceOffset();
        boolean boolean62 = node49.isVarArgs();
        int int63 = node49.getChildCount();
        boolean boolean64 = node49.isNot();
        com.google.javascript.rhino.Node node65 = node40.useSourceInfoFrom(node49);
        boolean boolean66 = node49.isIf();
        boolean boolean67 = node49.isTrue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        boolean boolean12 = node10.isName();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        node22.putIntProp(2, 10);
        boolean boolean27 = node22.isNull();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node33.isFor();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node33, 0, 0);
        boolean boolean44 = node33.isString();
        int int45 = node33.getSourceOffset();
        boolean boolean46 = node33.isVarArgs();
        com.google.javascript.rhino.Node node47 = node22.copyInformationFromForTree(node33);
        node47.setWasEmptyNode(false);
        boolean boolean50 = node47.isCatch();
        com.google.javascript.rhino.Node node51 = node10.srcref(node47);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node67.isEquivalentToTyped(node79);
        boolean boolean81 = node67.isNull();
        com.google.javascript.rhino.Node node82 = node56.copyInformationFromForTree(node67);
        boolean boolean83 = node67.isCase();
        int int84 = node67.getChangeTime();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node85 = node10.removeChildAfter(node67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isLabelName();
        boolean boolean44 = node13.isInc();
        boolean boolean45 = node13.isAssign();
        boolean boolean46 = node13.isSetterDef();
        int int47 = node13.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        boolean boolean15 = node9.isBlock();
        int int16 = node9.getCharno();
        boolean boolean17 = node9.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = node9.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        node5.setIsSyntheticBlock(false);
        boolean boolean56 = node5.hasMoreThanOneChild();
        boolean boolean57 = node5.isSwitch();
        boolean boolean58 = node5.isAssign();
        node5.setCharno(15);
        boolean boolean61 = node5.isArrayLit();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(56);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setAllFlags();
        int int5 = sideEffectFlags4.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags4.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags4.setAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        boolean boolean13 = node12.isIn();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(47, node6, node12);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(51, node14);
        boolean boolean17 = node14.isLocalResultCall();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node46.children();
        boolean boolean52 = node46.isAssign();
        boolean boolean53 = node46.isVar();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4, nodeArray4);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = node12.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(40);
        boolean boolean2 = node1.isWith();
        // The following exception was thrown during execution in test generation
        try {
            node1.setString("ERROR [is_namespace: false]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: String node not created with Node.newString");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray6, 1, 4095);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(49, nodeArray6, 4, 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((-1), nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) ' ', nodeArray6, 15, 10);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(38, nodeArray6);
        boolean boolean21 = node20.isInc();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setCharno(47);
        int int9 = node4.getLength();
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.removeChild(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        node18.detachChildren();
        boolean boolean39 = node18.hasChildren();
        boolean boolean40 = node18.isDelProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "", (-1), (int) (byte) 10);
        boolean boolean5 = node4.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node4.setJSType(jSType33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        boolean boolean68 = node50.isName();
        node50.putIntProp((int) (byte) 0, 42);
        boolean boolean72 = node50.isVar();
        com.google.javascript.rhino.Node node73 = node4.copyInformationFromForTree(node50);
        boolean boolean74 = node50.isLabel();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        node4.setChangeTime((int) (short) 100);
        boolean boolean14 = node4.hasMoreThanOneChild();
        java.lang.Object obj16 = node4.getProp(48);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node5.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor21 = ancestorIterable20.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor22 = ancestorIterable20.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor23 = ancestorIterable20.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator24 = ancestorIterable20.spliterator();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNotNull(nodeItor21);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNotNull(nodeItor23);
        org.junit.Assert.assertNotNull(nodeSpliterator24);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        int int34 = node15.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str10 = node4.toString(true, true, false);
        node4.setType(0);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        boolean boolean18 = node17.isCast();
        com.google.javascript.rhino.InputId inputId19 = node17.getInputId();
        boolean boolean20 = node17.isEmpty();
        node4.addChildrenToFront(node17);
        boolean boolean22 = node17.isIf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR" + "'", str10, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        boolean boolean7 = node4.isEmpty();
        node4.putIntProp(0, 2);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        int int32 = node15.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = null;
        com.google.javascript.rhino.Node node34 = node15.setJSDocInfo(jSDocInfo33);
        boolean boolean35 = node34.isOptionalArg();
        boolean boolean36 = node34.isAssign();
        node34.putBooleanProp((-1), true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node13.srcref(node19);
        boolean boolean21 = node19.isCatch();
        boolean boolean22 = node19.isNE();
        boolean boolean23 = node19.isHook();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        boolean boolean21 = node5.isIn();
        boolean boolean22 = node5.isThis();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        com.google.javascript.rhino.InputId inputId14 = node5.getInputId();
        node5.detachChildren();
        boolean boolean16 = node5.isAdd();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        node15.removeProp(16);
        node15.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node15.getAncestors();
        boolean boolean60 = node15.isLabel();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        boolean boolean54 = node15.isThrow();
        java.lang.String str55 = node15.toString();
        java.util.Set<java.lang.String> strSet56 = node15.getDirectives();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR" + "'", str55, "ERROR");
        org.junit.Assert.assertNull(strSet56);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(47, node34, node40);
        node34.detachChildren();
        boolean boolean44 = node34.hasMoreThanOneChild();
        boolean boolean45 = node34.isNumber();
        com.google.javascript.rhino.Node node46 = node21.srcref(node34);
        java.lang.String str47 = node34.toStringTree();
        boolean boolean48 = node34.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ERROR\n" + "'", str47, "ERROR\n");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        node15.setVarArgs(false);
        node15.setChangeTime(55);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node60 = node57.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node57.getJsDocBuilderForNode();
        boolean boolean62 = node57.isNot();
        node15.addChildToFront(node57);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(12, "");
        com.google.javascript.rhino.Node node67 = node15.useSourceInfoIfMissingFrom(node66);
        java.lang.String str68 = node66.toStringTree();
        boolean boolean69 = node66.isThis();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "EQ \n" + "'", str68, "EQ \n");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4, 56, 31);
        boolean boolean4 = node3.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isLabelName();
        int int44 = node13.getLength();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "ERROR 0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        com.google.javascript.rhino.Node node21 = node5.getAncestor(8);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray25, 2, (int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(15, nodeArray25);
        node5.addChildToFront(node32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node5.setJSType(jSType34);
        boolean boolean36 = node5.isDebugger();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        boolean boolean13 = node12.isIn();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(47, node6, node12);
        java.lang.String str15 = node14.getSourceFileName();
        java.lang.String[] strArray17 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet18);
        boolean boolean21 = node14.isParamList();
        com.google.javascript.rhino.Node node22 = node14.getFirstChild();
        boolean boolean23 = node14.isGetProp();
        boolean boolean24 = node14.isThrow();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        boolean boolean32 = node30.isContinue();
        java.lang.String str36 = node30.toString(true, true, false);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(4095, node30, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        boolean boolean45 = node44.isIn();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node55.isNull();
        com.google.javascript.rhino.Node node70 = node44.copyInformationFromForTree(node55);
        boolean boolean71 = node55.isCase();
        int int72 = node55.getChangeTime();
        com.google.javascript.rhino.Node node73 = node30.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node83.isNew();
        int int87 = node83.getIntProp(8);
        boolean boolean88 = node83.isRegExp();
        java.lang.String str92 = node83.toString(true, false, true);
        com.google.javascript.rhino.InputId inputId93 = null;
        node83.setInputId(inputId93);
        boolean boolean95 = node83.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node(54, node14, node73, node83, 42, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ERROR" + "'", str92, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node5.getAncestors();
        boolean boolean35 = node5.isNull();
        com.google.javascript.rhino.Node node36 = node5.removeChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 0, 31);
        com.google.javascript.rhino.Node node4 = node3.getNext();
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "hi!");
        boolean boolean3 = node2.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        int int24 = node9.getSourceOffset();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = node9.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        boolean boolean15 = node9.isNull();
        node9.setOptionalArg(true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        boolean boolean25 = node9.isThrow();
        com.google.javascript.rhino.Node node26 = node9.getNext();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(48, "REGEXP", 19, 55);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        java.lang.Object obj33 = node4.getProp((-1));
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(56);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        node9.setWasEmptyNode(true);
        boolean boolean25 = node9.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 30);
        boolean boolean2 = node1.isWith();
        node1.setOptionalArg(false);
        boolean boolean5 = node1.isStringKey();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node62.isEquivalentToTyped(node74);
        java.util.Set<java.lang.String> strSet76 = node74.getDirectives();
        boolean boolean77 = node74.isOnlyModifiesThisCall();
        boolean boolean78 = node74.isBreak();
        com.google.javascript.rhino.Node node79 = node52.useSourceInfoIfMissingFromForTree(node74);
        boolean boolean80 = node79.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        boolean boolean22 = node5.isThis();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "NUMBER 4095.0", 0, 51);
        node4.addSuppression("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isCase();
        int int59 = node42.getChangeTime();
        node21.addChildrenToBack(node42);
        boolean boolean61 = node42.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        boolean boolean29 = node28.isQualifiedName();
        boolean boolean30 = node28.isCast();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node42 = node28.useSourceInfoFrom(node40);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.lang.String str23 = node9.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        boolean boolean59 = node58.isIn();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        boolean boolean65 = node64.isIn();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(47, node58, node64);
        node58.detachChildren();
        boolean boolean68 = node58.hasMoreThanOneChild();
        boolean boolean69 = node58.isNumber();
        com.google.javascript.rhino.Node node70 = node45.srcref(node58);
        com.google.javascript.rhino.Node node71 = node9.clonePropsFrom(node58);
        boolean boolean72 = node58.isNull();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        boolean boolean26 = node21.isTypeOf();
        node21.removeProp(30);
        com.google.javascript.rhino.Node node29 = node21.cloneTree();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node23 = node21.cloneNode();
        node23.setLineno(0);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isCast();
        com.google.javascript.rhino.InputId inputId7 = node5.getInputId();
        node5.setType((int) 'a');
        java.util.Set<java.lang.String> strSet10 = node5.getDirectives();
        boolean boolean11 = node5.isWith();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        boolean boolean17 = node16.isIn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node27.isNull();
        com.google.javascript.rhino.Node node42 = node16.copyInformationFromForTree(node27);
        boolean boolean43 = node27.isSetterDef();
        int int44 = node27.getLength();
        boolean boolean45 = node27.isName();
        com.google.javascript.rhino.Node node46 = node5.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean47 = node27.isStringKey();
        boolean boolean48 = node27.isTrue();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isCast();
        com.google.javascript.rhino.Node node55 = node27.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node65.isEquivalentToTyped(node77);
        boolean boolean79 = node65.isNull();
        java.lang.String str80 = node65.getSourceFileName();
        node65.setSourceFileForTesting("ERROR [change_time: 55]");
        boolean boolean83 = node65.isEmpty();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(38, node53, node65, (int) 'a', (int) (short) -1);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        boolean boolean17 = node5.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        boolean boolean5 = node4.isParamList();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        boolean boolean18 = node11.isFor();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(0, node11, 0, 0);
        boolean boolean22 = node11.isReturn();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node28.isFor();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(0, node28, 0, 0);
        boolean boolean39 = node28.isNew();
        boolean boolean40 = node28.isCall();
        node28.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node43 = node11.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean44 = node28.isDelProp();
        boolean boolean45 = node28.isTry();
        boolean boolean46 = node4.isEquivalentToTyped(node28);
        com.google.javascript.rhino.InputId inputId47 = null;
        node28.setInputId(inputId47);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder49 = node28.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder49);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        boolean boolean34 = node15.isVoid();
        com.google.javascript.rhino.InputId inputId35 = node15.getInputId();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        int int12 = node4.getLineno();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node22.isNull();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        boolean boolean60 = node47.isEquivalentToTyped(node59);
        boolean boolean61 = node59.isAssignAdd();
        boolean boolean62 = node59.isSyntheticBlock();
        node22.putProp((-1), (java.lang.Object) node59);
        boolean boolean64 = node59.wasEmptyNode();
        boolean boolean65 = node59.isFromExterns();
        boolean boolean66 = node4.isEquivalentToTyped(node59);
        com.google.javascript.rhino.jstype.JSType jSType67 = node4.getJSType();
        boolean boolean68 = node4.isQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        node29.setLength(47);
        boolean boolean32 = node29.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isDelProp();
        boolean boolean39 = node4.getBooleanProp(47);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        boolean boolean87 = node62.isVar();
        boolean boolean88 = node62.isIf();
        boolean boolean89 = node62.isVar();
        boolean boolean90 = node62.isUnscopedQualifiedName();
        boolean boolean91 = node62.isNull();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node5.getAncestors();
        boolean boolean21 = node5.isNot();
        boolean boolean22 = node5.isOr();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isNew();
        boolean boolean17 = node5.isComma();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isGetElem();
        node21.setSourceEncodedPositionForTree(50);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) 'a', 56, (int) (byte) 10);
        com.google.javascript.rhino.Node node31 = node21.srcrefTree(node30);
        boolean boolean32 = node30.isCast();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        node1.setSourceFileForTesting("REGEXP ");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node13 = node5.getAncestor((int) 'a');
        node5.setSourceEncodedPosition(31);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(46, node5, 43, (int) '4');
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node41.isAssignAdd();
        com.google.javascript.rhino.Node node44 = node41.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node41.getJsDocBuilderForNode();
        boolean boolean46 = node41.isNot();
        boolean boolean47 = node41.isExprResult();
        node41.setLineno(30);
        node41.setChangeTime((int) (short) 100);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(42, node41);
        int int53 = node18.getIndexOfChild(node41);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isSyntheticBlock();
        int int19 = node5.getType();
        int int20 = node5.getChangeTime();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 12, (int) 'a');
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        com.google.javascript.rhino.Node node5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.removeChild(node5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isCatch();
        boolean boolean19 = node5.isOnlyModifiesArgumentsCall();
        boolean boolean20 = node5.isNoSideEffectsCall();
        boolean boolean21 = node5.hasChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray4, 1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(49, nodeArray4, 4, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((-1), nodeArray4);
        node14.removeProp(49);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node52.isNull();
        com.google.javascript.rhino.Node node67 = node41.copyInformationFromForTree(node52);
        boolean boolean68 = node52.isSetterDef();
        int int69 = node52.getLength();
        boolean boolean70 = node52.isName();
        boolean boolean71 = node52.isFalse();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoIfMissingFrom(node81);
        boolean boolean83 = node82.isUnscopedQualifiedName();
        node52.addChildrenToFront(node82);
        node34.addChildToBack(node52);
        com.google.javascript.rhino.Node node87 = node52.getAncestor((int) (byte) 1);
        com.google.javascript.rhino.jstype.JSType jSType88 = node52.getJSType();
        boolean boolean89 = node52.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(30);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        org.junit.Assert.assertNotNull(sideEffectFlags2);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        boolean boolean17 = node13.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            node13.setDouble((double) 57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: REGEXP 0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        node28.putIntProp(4, 0);
        boolean boolean32 = node28.isLabel();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node6.setStaticSourceFile(staticSourceFile33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        boolean boolean68 = node50.isName();
        java.lang.String str69 = node50.getSourceFileName();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((-1), node6, node50);
        boolean boolean71 = node50.isSetterDef();
        boolean boolean72 = node50.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(23, node50, 48, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node5.siblings();
        boolean boolean56 = node5.isDebugger();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        boolean boolean46 = node15.isName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node15.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator48 = nodeIterable47.spliterator();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeSpliterator48);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        boolean boolean31 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags35 = new com.google.javascript.rhino.Node.SideEffectFlags(2);
        // The following exception was thrown during execution in test generation
        try {
            node5.setSideEffectFlags(sideEffectFlags35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags38 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags39 = sideEffectFlags38.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags40 = sideEffectFlags39.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags41 = sideEffectFlags40.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(sideEffectFlags41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got REGEXP");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags39);
        org.junit.Assert.assertNotNull(sideEffectFlags40);
        org.junit.Assert.assertNotNull(sideEffectFlags41);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        boolean boolean26 = node21.isTypeOf();
        boolean boolean27 = node21.isGetElem();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node28 = node21.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        node49.putBooleanProp(43, false);
        // The following exception was thrown during execution in test generation
        try {
            node49.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setAllFlags();
        int int5 = sideEffectFlags4.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags4.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags6.setMutatesGlobalState();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isSyntheticBlock();
        node21.setSourceEncodedPosition((int) '4');
        node21.detachChildren();
        int int28 = node21.getLineno();
        node21.setCharno(4095);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray3, 32, (-1));
        boolean boolean13 = node12.isAssignAdd();
        com.google.javascript.rhino.Node node14 = node12.getParent();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(47, node40, node46);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node50 = node48.cloneNode();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoFrom(node48);
        node48.setSourceFileForTesting("");
        boolean boolean54 = node48.isNew();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isSyntheticBlock();
        com.google.javascript.rhino.Node node33 = node15.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = node33.isNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isTrue();
        com.google.javascript.rhino.Node node37 = node20.detachFromParent();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        boolean boolean60 = node47.isEquivalentToTyped(node59);
        boolean boolean61 = node59.isAssignAdd();
        boolean boolean62 = node59.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node68.isFor();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node68, 0, 0);
        boolean boolean79 = node68.isString();
        int int80 = node68.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray87 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray87, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node91 = node85.useSourceInfoIfMissingFrom(node90);
        com.google.javascript.rhino.Node node92 = node68.copyInformationFrom(node91);
        java.lang.String str93 = node92.toStringTree();
        com.google.javascript.rhino.Node node94 = node59.useSourceInfoIfMissingFromForTree(node92);
        boolean boolean95 = node37.hasChild(node92);
        boolean boolean96 = node37.isVoid();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(nodeArray87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ERROR\n" + "'", str93, "ERROR\n");
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isSyntheticBlock();
        boolean boolean25 = node21.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node38.isEquivalentToTyped(node50);
        boolean boolean52 = node50.isAssignAdd();
        int int53 = node50.getChangeTime();
        boolean boolean54 = node50.isIf();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        boolean boolean60 = node59.isCast();
        com.google.javascript.rhino.InputId inputId61 = node59.getInputId();
        node59.setCharno(47);
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildrenAfter(node50, node59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(inputId61);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        java.lang.String str23 = node4.checkTreeEquals(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        boolean boolean53 = node45.isAssign();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFromForTree(node45);
        boolean boolean55 = node4.isGetElem();
        boolean boolean56 = node4.isSwitch();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isSetterDef();
        boolean boolean13 = node4.getBooleanProp((int) (short) 0);
        java.lang.String str14 = node4.toStringTree();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ASSIGN_MOD\n" + "'", str14, "ASSIGN_MOD\n");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        java.lang.String str17 = node5.toString();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node33.isNull();
        com.google.javascript.rhino.Node node48 = node22.copyInformationFromForTree(node33);
        boolean boolean49 = node33.isCase();
        node33.removeProp(16);
        node33.putBooleanProp(16, false);
        int int55 = node33.getLineno();
        node5.addChildrenToFront(node33);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        boolean boolean7 = node4.isTypeOf();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node29.isAssignAdd();
        boolean boolean32 = node29.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node node62 = node38.copyInformationFrom(node61);
        java.lang.String str63 = node62.toStringTree();
        com.google.javascript.rhino.Node node64 = node29.useSourceInfoIfMissingFromForTree(node62);
        node29.setSourceEncodedPositionForTree((int) 'a');
        node4.addChildToBack(node29);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ERROR\n" + "'", str63, "ERROR\n");
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node38.isEquivalentToTyped(node50);
        boolean boolean52 = node38.isNull();
        com.google.javascript.rhino.Node node53 = node27.copyInformationFromForTree(node38);
        boolean boolean54 = node38.isCase();
        int int55 = node38.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = null;
        com.google.javascript.rhino.Node node57 = node38.setJSDocInfo(jSDocInfo56);
        com.google.javascript.rhino.Node node58 = node21.copyInformationFromForTree(node38);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = node21.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = node21.getExistingIntProp((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 32");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSDocInfo59);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node16.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        boolean boolean79 = node72.isFor();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0, node72, 0, 0);
        boolean boolean83 = node72.isString();
        int int84 = node72.getSourceOffset();
        boolean boolean85 = node72.isVarArgs();
        boolean boolean86 = node72.isDo();
        boolean boolean87 = node72.isScript();
        com.google.javascript.rhino.Node node88 = node72.getLastChild();
        com.google.javascript.rhino.Node node89 = node16.useSourceInfoFromForTree(node72);
        boolean boolean90 = node72.isFromExterns();
        boolean boolean91 = node72.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        int int22 = node5.getSourcePosition();
        node5.setLength(38);
        node5.putBooleanProp((int) (byte) 1, true);
        boolean boolean28 = node5.isBreak();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray4, 1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(49, nodeArray4, 4, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((-1), nodeArray4);
        boolean boolean15 = node14.isVoid();
        boolean boolean16 = node14.isCast();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.toString();
        boolean boolean18 = node5.isDebugger();
        boolean boolean19 = node5.isTrue();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        boolean boolean16 = node15.isGetElem();
        java.util.Set<java.lang.String> strSet17 = node15.getDirectives();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean2 = node1.isWith();
        boolean boolean3 = node1.isInc();
        int int4 = node1.getLineno();
        boolean boolean5 = node1.isNoSideEffectsCall();
        int int6 = node1.getChangeTime();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node53.isAssignAdd();
        boolean boolean56 = node53.isSyntheticBlock();
        node16.putProp((-1), (java.lang.Object) node53);
        boolean boolean58 = node53.isAdd();
        node1.addChildToBack(node53);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isThis();
        java.lang.String str47 = node13.toString(false, false, true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "REGEXP" + "'", str47, "REGEXP");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node60.isWith();
        boolean boolean62 = node60.isParamList();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node72.isEquivalentToTyped(node84);
        boolean boolean86 = node72.isNull();
        java.lang.String str87 = node72.getSourceFileName();
        boolean boolean88 = node72.isFor();
        com.google.javascript.rhino.Node node89 = node60.useSourceInfoIfMissingFromForTree(node72);
        boolean boolean90 = node60.isAnd();
        boolean boolean91 = node60.isDec();
        com.google.javascript.rhino.Node node93 = node60.getChildAtIndex((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable94 = node93.children();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(node93);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node10.setStaticSourceFile(staticSourceFile41);
        boolean boolean43 = node10.isDefaultCase();
        boolean boolean44 = node10.isOr();
        boolean boolean45 = node10.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isNew();
        boolean boolean17 = node5.isCall();
        java.lang.String str18 = node5.getSourceFileName();
        node5.putBooleanProp(100, true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(49, "hi!", 51, (int) '#');
        int int5 = node4.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        int int14 = node5.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isSetterDef();
        int int47 = node30.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node30.children();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        node59.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node63 = node30.useSourceInfoFromForTree(node59);
        boolean boolean64 = node5.isEquivalentTo(node63);
        boolean boolean65 = node63.isOptionalArg();
        boolean boolean66 = node63.isFor();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        boolean boolean79 = node72.isFor();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0, node72, 0, 0);
        boolean boolean83 = node82.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = null;
        com.google.javascript.rhino.Node node85 = node82.setJSDocInfo(jSDocInfo84);
        boolean boolean86 = node63.isEquivalentToShallow(node82);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(40, node63, 53, 52);
        com.google.javascript.rhino.InputId inputId90 = null;
        node63.setInputId(inputId90);
        boolean boolean92 = node63.isCatch();
        boolean boolean93 = node63.isNot();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isNoSideEffectsCall();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        boolean boolean45 = node44.isIn();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node55.isNull();
        com.google.javascript.rhino.Node node70 = node44.copyInformationFromForTree(node55);
        boolean boolean71 = node55.isSetterDef();
        int int72 = node55.getLength();
        boolean boolean73 = node55.isName();
        boolean boolean74 = node55.isFromExterns();
        boolean boolean75 = node55.isDec();
        node2.putProp(39, (java.lang.Object) node55);
        boolean boolean77 = node2.isParamList();
        boolean boolean78 = node2.isContinue();
        boolean boolean79 = node2.isGetterDef();
        node2.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType32 = node30.getJSType();
        com.google.javascript.rhino.Node node33 = node30.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = node33.getSideEffectFlags();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(49, "");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        boolean boolean25 = node21.isSetterDef();
        node21.addSuppression("ERROR\n");
        boolean boolean28 = node21.isStringKey();
        com.google.javascript.rhino.Node node29 = node21.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        boolean boolean36 = node35.isIn();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(47, node35, node41);
        java.lang.String str44 = node43.getSourceFileName();
        java.lang.String[] strArray46 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet47);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet47);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node29.children();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node29.setJSType(jSType52);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterable51);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node6);
        com.google.javascript.rhino.Node node35 = node34.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray38, 2, (int) ' ');
        java.lang.String str45 = node44.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node67.isAssignAdd();
        com.google.javascript.rhino.Node node70 = node67.getParent();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(38, node34, node44, node67);
        boolean boolean72 = node44.isThis();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray7, 1, 4095);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, nodeArray7, 4, 0);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((-1), nodeArray7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(47, nodeArray7, 23, 15);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(29, nodeArray7);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(40, nodeArray7);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node22.siblings();
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeIterable23);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        boolean boolean21 = node13.isComma();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        boolean boolean57 = node56.isIn();
        boolean boolean58 = node56.isContinue();
        java.lang.String str62 = node56.toString(true, true, false);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node56, 8, (-1));
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        com.google.javascript.rhino.Node node67 = node9.srcrefTree(node66);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ERROR" + "'", str62, "ERROR");
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isDebugger();
        int int34 = node15.getType();
        boolean boolean36 = node15.getBooleanProp((int) (short) 1);
        boolean boolean37 = node15.wasEmptyNode();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean70 = node5.isNew();
        boolean boolean71 = node5.isReturn();
        boolean boolean72 = node5.hasChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        com.google.javascript.rhino.Node node11 = node4.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        boolean boolean25 = node9.isThrow();
        node9.setWasEmptyNode(false);
        boolean boolean28 = node9.mayMutateArguments();
        boolean boolean29 = node9.isCase();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        com.google.javascript.rhino.InputId inputId42 = node40.getInputId();
        int int43 = node40.getType();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        node15.detachChildren();
        java.lang.String str36 = node15.getSourceFileName();
        boolean boolean37 = node15.isVar();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.lang.String str23 = node9.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        boolean boolean59 = node58.isIn();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        boolean boolean65 = node64.isIn();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(47, node58, node64);
        node58.detachChildren();
        boolean boolean68 = node58.hasMoreThanOneChild();
        boolean boolean69 = node58.isNumber();
        com.google.javascript.rhino.Node node70 = node45.srcref(node58);
        com.google.javascript.rhino.Node node71 = node9.clonePropsFrom(node58);
        boolean boolean72 = node71.isInc();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node71.siblings();
        boolean boolean74 = node71.isAssignAdd();
        boolean boolean76 = node71.getBooleanProp(8);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterable73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        boolean boolean26 = node21.isTypeOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags27 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean28 = sideEffectFlags27.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags29 = sideEffectFlags27.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags30 = sideEffectFlags27.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags31 = sideEffectFlags30.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node21.setSideEffectFlags(sideEffectFlags30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags29);
        org.junit.Assert.assertNotNull(sideEffectFlags30);
        org.junit.Assert.assertNotNull(sideEffectFlags31);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        boolean boolean25 = node21.isSetterDef();
        boolean boolean26 = node21.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node14 = node8.useSourceInfoIfMissingFrom(node13);
        boolean boolean15 = node8.isFor();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(0, node8, 0, 0);
        boolean boolean19 = node8.isFor();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        boolean boolean25 = node24.isCast();
        com.google.javascript.rhino.InputId inputId26 = node24.getInputId();
        node24.setType((int) 'a');
        java.util.Set<java.lang.String> strSet29 = node24.getDirectives();
        boolean boolean30 = node24.isInc();
        com.google.javascript.rhino.Node node31 = node8.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isFor();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(0, node37, 0, 0);
        boolean boolean48 = node37.isString();
        int int49 = node37.getSourceOffset();
        boolean boolean50 = node37.isVarArgs();
        boolean boolean51 = node37.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable52 = node37.getAncestors();
        boolean boolean53 = node37.isDelProp();
        com.google.javascript.rhino.Node node54 = node8.srcref(node37);
        java.lang.String str55 = node8.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        boolean boolean62 = node61.isIn();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        boolean boolean68 = node67.isIn();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(47, node61, node67);
        boolean boolean70 = node69.isRegExp();
        node69.putIntProp(0, (int) '4');
        boolean boolean74 = node69.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 10, node2, node8, node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(ancestorIterable52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.isInstanceOf();
        java.lang.String str25 = node9.toStringTree();
        int int26 = node9.getSideEffectFlags();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ERROR\n" + "'", str25, "ERROR\n");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.wasEmptyNode();
        node15.setLength((int) 'a');
        com.google.javascript.rhino.Node node37 = node15.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node37.setString("ERROR");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder14.append("NUMBER 4095.0");
        fileLevelJsDocBuilder14.append("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node4.isFalse();
        boolean boolean65 = node4.isCall();
        boolean boolean66 = node4.isGetProp();
        int int67 = node4.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isOr();
        boolean boolean21 = node5.isNew();
        com.google.javascript.rhino.Node node22 = node5.getFirstChild();
        boolean boolean23 = node5.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        node20.addChildrenToFront(node35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node35.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        boolean boolean45 = node44.isIn();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(47, node44, node50);
        java.lang.String str53 = node52.getSourceFileName();
        java.lang.String[] strArray55 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean59 = node52.isParamList();
        com.google.javascript.rhino.Node node60 = node52.getFirstChild();
        boolean boolean61 = node52.isGetProp();
        com.google.javascript.rhino.Node node62 = node52.cloneNode();
        com.google.javascript.rhino.Node node63 = node35.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node62.isBreak();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        boolean boolean38 = node35.isLabel();
        int int39 = node35.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node61.isAssignAdd();
        com.google.javascript.rhino.Node node64 = node61.getParent();
        boolean boolean65 = node61.isInc();
        node61.setVarArgs(true);
        com.google.javascript.rhino.Node node68 = node35.useSourceInfoFrom(node61);
        node61.setChangeTime(53);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isGetElem();
        boolean boolean25 = node21.isObjectLit();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node57.isTypeOf();
        boolean boolean59 = node57.isInc();
        boolean boolean60 = node57.isOr();
        boolean boolean61 = node57.isCall();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray85 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray85, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoIfMissingFrom(node88);
        boolean boolean90 = node77.isEquivalentToTyped(node89);
        boolean boolean91 = node77.isNull();
        com.google.javascript.rhino.Node node92 = node66.copyInformationFromForTree(node77);
        int int93 = node66.getType();
        boolean boolean94 = node66.hasOneChild();
        node57.addChildToFront(node66);
        boolean boolean96 = node57.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType97 = node57.getJSType();
        node21.putProp(32, (java.lang.Object) node57);
        boolean boolean99 = node57.isOr();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(47, (int) (short) 100, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double4 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: REGEXP 100 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isLabelName();
        boolean boolean44 = node13.isInc();
        node13.putIntProp(42, 43);
        boolean boolean48 = node13.isLabelName();
        node13.removeProp(54);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isTrue();
        boolean boolean37 = node20.isName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node50.children();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        node79.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node83 = node50.useSourceInfoFromForTree(node79);
        boolean boolean84 = node79.isLabel();
        com.google.javascript.rhino.Node node85 = node4.copyInformationFrom(node79);
        boolean boolean86 = node85.isFor();
        com.google.javascript.rhino.Node node87 = node85.removeFirstChild();
        boolean boolean88 = node85.isNull();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean70 = node69.isComma();
        boolean boolean71 = node69.isArrayLit();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 32, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        node19.putIntProp((int) (byte) 0, 42);
        boolean boolean41 = node19.isDec();
        boolean boolean42 = node19.isVoid();
        node3.addChildToBack(node19);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        boolean boolean49 = node48.isIn();
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node71 = node65.useSourceInfoIfMissingFrom(node70);
        boolean boolean72 = node59.isEquivalentToTyped(node71);
        boolean boolean73 = node59.isNull();
        com.google.javascript.rhino.Node node74 = node48.copyInformationFromForTree(node59);
        int int75 = node48.getType();
        boolean boolean76 = node48.isVar();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        boolean boolean82 = node81.isIn();
        boolean boolean83 = node81.isContinue();
        java.lang.String str84 = node81.getSourceFileName();
        int int85 = node81.getType();
        java.lang.Object obj87 = node81.getProp(10);
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildrenAfter(node48, node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        com.google.javascript.rhino.Node node21 = node13.getFirstChild();
        com.google.javascript.rhino.Node node22 = node13.getFirstChild();
        boolean boolean23 = node22.isWhile();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        boolean boolean15 = node13.isGetElem();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node21.isFor();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(0, node21, 0, 0);
        boolean boolean32 = node21.isString();
        int int33 = node21.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node node45 = node21.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node46 = node21.removeChildren();
        boolean boolean47 = node21.isGetElem();
        boolean boolean48 = node21.isNot();
        com.google.javascript.rhino.Node node49 = node13.srcrefTree(node21);
        boolean boolean50 = node21.isQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isCast();
        com.google.javascript.rhino.InputId inputId41 = node39.getInputId();
        node39.setType((int) 'a');
        java.util.Set<java.lang.String> strSet44 = node39.getDirectives();
        node39.setChangeTime(4);
        com.google.javascript.rhino.Node node47 = node15.srcref(node39);
        boolean boolean48 = node47.isComma();
        boolean boolean49 = node47.mayMutateArguments();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node33.copyInformationFromForTree(node44);
        boolean boolean60 = node44.isSetterDef();
        int int61 = node44.getLength();
        boolean boolean62 = node44.isName();
        boolean boolean63 = node44.isFalse();
        java.lang.String[] strArray65 = new java.lang.String[] { "ERROR\n" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet66);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet66);
        boolean boolean70 = node13.mayMutateGlobalStateOrThrow();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isThis();
        node13.setType(50);
        com.google.javascript.rhino.Node node46 = node13.removeFirstChild();
        boolean boolean47 = node46.isNot();
        boolean boolean48 = node46.isOptionalArg();
        boolean boolean49 = node46.isSwitch();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        com.google.javascript.rhino.Node node21 = node5.getAncestor(8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = node21.isReturn();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100L, 23, (int) (short) 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setAllFlags();
        int int5 = sideEffectFlags4.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags4.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags4.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getLineno();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray3, 1, 4095);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray3, 4, 0);
        int int13 = node12.getSourceOffset();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0);
        boolean boolean16 = node12.isEquivalentToTyped(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node12.children();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable17);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isTrue();
        com.google.javascript.rhino.Node node37 = node20.detachFromParent();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        boolean boolean60 = node47.isEquivalentToTyped(node59);
        boolean boolean61 = node59.isAssignAdd();
        boolean boolean62 = node59.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node68.isFor();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node68, 0, 0);
        boolean boolean79 = node68.isString();
        int int80 = node68.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray87 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray87, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node91 = node85.useSourceInfoIfMissingFrom(node90);
        com.google.javascript.rhino.Node node92 = node68.copyInformationFrom(node91);
        java.lang.String str93 = node92.toStringTree();
        com.google.javascript.rhino.Node node94 = node59.useSourceInfoIfMissingFromForTree(node92);
        boolean boolean95 = node37.hasChild(node92);
        int int96 = node37.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(nodeArray87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ERROR\n" + "'", str93, "ERROR\n");
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNew();
        boolean boolean38 = node4.isCall();
        // The following exception was thrown during execution in test generation
        try {
            node4.setString("REGEXP");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isScript();
        com.google.javascript.rhino.Node node21 = node5.getLastChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        int int39 = node27.getSourceOffset();
        boolean boolean40 = node27.isVarArgs();
        boolean boolean41 = node27.isDo();
        int int42 = node5.getIndexOfChild(node27);
        node27.setOptionalArg(false);
        boolean boolean45 = node27.isOr();
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(47, node51, node57);
        node51.detachChildren();
        boolean boolean61 = node51.isAssign();
        boolean boolean62 = node51.isReturn();
        boolean boolean63 = node51.isAssign();
        java.util.Set<java.lang.String> strSet64 = node51.getDirectives();
        java.lang.String str65 = node51.getQualifiedName();
        com.google.javascript.rhino.Node node66 = node27.copyInformationFromForTree(node51);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setSourceEncodedPositionForTree(36);
        com.google.javascript.rhino.Node node37 = node34.removeFirstChild();
        com.google.javascript.rhino.Node node38 = node34.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = node38.isSyntheticBlock();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        node33.setSourceEncodedPositionForTree((int) (byte) -1);
        boolean boolean36 = node33.isNull();
        boolean boolean37 = node33.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags2.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node node18 = node5.detachFromParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node5.getJsDocBuilderForNode();
        java.lang.String str20 = node5.toStringTree();
        boolean boolean21 = node5.isFunction();
        node5.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ERROR\n" + "'", str20, "ERROR\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray4, 1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(49, nodeArray4, 4, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((-1), nodeArray4);
        node14.setSourceEncodedPosition(54);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node14.setJSType(jSType17);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        boolean boolean20 = node5.isLabel();
        java.lang.String str21 = node5.toStringTree();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ERROR\n" + "'", str21, "ERROR\n");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        boolean boolean12 = node4.isThis();
        int int13 = node4.getLineno();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node4.getStaticSourceFile();
        node4.setSourceEncodedPositionForTree(0);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(staticSourceFile14);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node21.isNew();
        int int25 = node21.getIntProp(8);
        boolean boolean26 = node21.isQualifiedName();
        boolean boolean27 = node21.isNull();
        boolean boolean28 = node4.hasChild(node21);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        boolean boolean41 = node34.isFor();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(0, node34, 0, 0);
        boolean boolean45 = node34.isString();
        int int46 = node34.getSourceOffset();
        boolean boolean47 = node34.isVarArgs();
        boolean boolean48 = node34.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = null;
        com.google.javascript.rhino.Node node50 = node34.setJSDocInfo(jSDocInfo49);
        com.google.javascript.rhino.Node node51 = node50.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node67.isEquivalentToTyped(node79);
        boolean boolean81 = node67.isNull();
        com.google.javascript.rhino.Node node82 = node56.copyInformationFromForTree(node67);
        boolean boolean83 = node67.isCase();
        int int84 = node67.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = null;
        com.google.javascript.rhino.Node node86 = node67.setJSDocInfo(jSDocInfo85);
        com.google.javascript.rhino.Node node87 = node50.copyInformationFromForTree(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node50.getJSDocInfo();
        com.google.javascript.rhino.Node node89 = node4.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node90 = node4.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(node90);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(12, "");
        boolean boolean3 = node2.isCast();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        node13.addSuppression("hi!");
        boolean boolean19 = node13.isAnd();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        boolean boolean27 = node26.isIn();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        boolean boolean33 = node32.isIn();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(47, node26, node32);
        java.lang.String str35 = node34.getSourceFileName();
        java.lang.String[] strArray37 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet38);
        boolean boolean41 = node34.isReturn();
        boolean boolean42 = node34.isNull();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node48.isFor();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(0, node48, 0, 0);
        boolean boolean59 = node48.isString();
        boolean boolean60 = node48.isEmpty();
        boolean boolean61 = node48.isCatch();
        com.google.javascript.rhino.Node node62 = node34.srcrefTree(node48);
        com.google.javascript.rhino.Node node63 = node62.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node13.addChildrenAfter(node20, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node62.isTypeOf();
        boolean boolean67 = node62.isAssign();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("ERROR\n");
        java.lang.String str70 = node69.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = node62.getChildBefore(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node21.isFor();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(0, node21, 0, 0);
        boolean boolean32 = node21.isString();
        boolean boolean33 = node21.isEmpty();
        boolean boolean34 = node21.isCatch();
        boolean boolean35 = node21.isOnlyModifiesArgumentsCall();
        boolean boolean36 = node21.isNoSideEffectsCall();
        node21.putBooleanProp((int) '4', true);
        boolean boolean40 = node15.isEquivalentTo(node21);
        int int41 = node15.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str7 = node4.getSourceFileName();
        int int8 = node4.getType();
        int int9 = node4.getSourceOffset();
        boolean boolean10 = node4.isFalse();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        boolean boolean32 = node30.isInc();
        boolean boolean33 = node30.isOr();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        node38.detachChildren();
        boolean boolean66 = node38.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node38.setJSType(jSType67);
        com.google.javascript.rhino.Node node69 = node30.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node70 = node38.cloneTree();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        node4.putBooleanProp(55, true);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isCast();
        com.google.javascript.rhino.InputId inputId20 = node18.getInputId();
        node18.setType((int) 'a');
        java.util.Set<java.lang.String> strSet23 = node18.getDirectives();
        boolean boolean24 = node18.isWith();
        boolean boolean25 = node18.isAssignAdd();
        boolean boolean26 = node18.isTrue();
        node4.addChildToFront(node18);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node18.setJSType(jSType28);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isVoid();
        com.google.javascript.rhino.Node node27 = node9.cloneTree();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        boolean boolean34 = node20.isWith();
        boolean boolean35 = node20.isNull();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        java.util.Set<java.lang.String> strSet14 = node4.getDirectives();
        boolean boolean15 = node4.isStringKey();
        java.lang.String str19 = node4.toString(false, true, false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ERROR" + "'", str19, "ERROR");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        node29.setSourceEncodedPositionForTree(30);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        java.lang.String str23 = node4.checkTreeEquals(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        boolean boolean53 = node45.isAssign();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFromForTree(node45);
        boolean boolean56 = node45.getBooleanProp((int) (short) -1);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        java.lang.String str34 = node15.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node40.isFor();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(0, node40, 0, 0);
        boolean boolean51 = node40.isString();
        int int52 = node40.getSourceOffset();
        boolean boolean53 = node40.isVarArgs();
        boolean boolean54 = node40.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node40.getJSDocInfo();
        boolean boolean56 = node40.isSyntheticBlock();
        boolean boolean57 = node15.isEquivalentToShallow(node40);
        int int58 = node15.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        boolean boolean25 = node21.isNew();
        boolean boolean26 = node21.isParamList();
        boolean boolean27 = node21.isReturn();
        boolean boolean28 = node21.isFromExterns();
        boolean boolean29 = node21.isLabel();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(15, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(15, nodeArray5, 42, 23);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(19, nodeArray5);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        node21.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType28 = node21.getJSType();
        boolean boolean29 = node21.isVoid();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        boolean boolean24 = node21.isIf();
        com.google.javascript.rhino.Node node25 = node21.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node21.setDouble((double) 46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        node18.detachChildren();
        boolean boolean46 = node18.isName();
        boolean boolean47 = node9.isEquivalentTo(node18);
        node18.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        boolean boolean14 = node4.isLocalResultCall();
        int int15 = node4.getSourcePosition();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = node4.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("ERROR\n");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        boolean boolean14 = node13.isIn();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(47, node7, node13);
        com.google.javascript.rhino.InputId inputId16 = node7.getInputId();
        node7.detachChildren();
        boolean boolean18 = node7.isTypeOf();
        boolean boolean19 = node1.isEquivalentToTyped(node7);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(47, node25, node31);
        node25.detachChildren();
        boolean boolean35 = node25.isAssign();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node40.isFor();
        int int49 = node40.getIntProp(0);
        boolean boolean50 = node40.isLocalResultCall();
        int int51 = node40.getSourcePosition();
        java.lang.String str52 = node25.checkTreeEquals(node40);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node58.isFor();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(0, node58, 0, 0);
        boolean boolean69 = node58.isString();
        int int70 = node58.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node node82 = node58.copyInformationFrom(node81);
        com.google.javascript.rhino.Node node83 = node25.useSourceInfoIfMissingFrom(node82);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildToBack(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        boolean boolean44 = node26.isName();
        com.google.javascript.rhino.Node node45 = node4.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean46 = node26.isStringKey();
        com.google.javascript.rhino.Node node47 = node26.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node47.setDouble((double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        boolean boolean32 = node30.isInc();
        boolean boolean33 = node30.isOr();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        node38.detachChildren();
        boolean boolean66 = node38.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node38.setJSType(jSType67);
        com.google.javascript.rhino.Node node69 = node30.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node70 = node69.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isSetterDef();
        boolean boolean13 = node4.getBooleanProp((int) (short) 0);
        boolean boolean14 = node4.isNull();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        boolean boolean14 = node13.isIn();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(47, node7, node13);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51, node15);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, node15, 49, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = null;
        com.google.javascript.rhino.Node node32 = node21.setJSDocInfo(jSDocInfo31);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = node21.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        java.lang.Object obj34 = node4.getProp(4);
        int int35 = node4.getType();
        boolean boolean36 = node4.isContinue();
        java.lang.String str40 = node4.toString(true, false, false);
        com.google.javascript.rhino.Node node41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = node4.useSourceInfoFromForTree(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ERROR" + "'", str40, "ERROR");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isFalse();
        node21.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node53.setStaticSourceFile(staticSourceFile80);
        com.google.javascript.rhino.Node node82 = node15.clonePropsFrom(node53);
        boolean boolean83 = node82.hasMoreThanOneChild();
        boolean boolean84 = node82.isNot();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = null;
        node82.setStaticSourceFile(staticSourceFile85);
        boolean boolean87 = node82.isDo();
        boolean boolean88 = node82.isTrue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        node15.putIntProp((int) (byte) 0, 42);
        com.google.javascript.rhino.Node node37 = node15.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = node37.isDelProp();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isDelProp();
        boolean boolean38 = node4.isVarArgs();
        boolean boolean39 = node4.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        java.lang.Object obj34 = node4.getProp(4);
        boolean boolean35 = node4.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isFor();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable17 = node5.getAncestors();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node39.isAssignAdd();
        int int42 = node39.getChangeTime();
        boolean boolean43 = node39.isIf();
        boolean boolean44 = node39.isTypeOf();
        boolean boolean45 = node39.isInstanceOf();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node55.isNew();
        int int59 = node55.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        boolean boolean66 = node65.isIn();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        boolean boolean72 = node71.isIn();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(47, node65, node71);
        node65.detachChildren();
        boolean boolean75 = node65.isAssign();
        boolean boolean76 = node65.isOr();
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray85 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray85, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoIfMissingFrom(node88);
        boolean boolean90 = node83.isFor();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(0, node83, 0, 0);
        boolean boolean94 = node83.isString();
        boolean boolean95 = node83.isEmpty();
        node65.putProp((int) '#', (java.lang.Object) boolean95);
        java.lang.String str97 = node65.getSourceFileName();
        com.google.javascript.rhino.Node node98 = node55.useSourceInfoFrom(node65);
        // The following exception was thrown during execution in test generation
        try {
            node5.replaceChild(node39, node98);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ancestorIterable17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.toString();
        boolean boolean18 = node5.mayMutateGlobalStateOrThrow();
        boolean boolean19 = node5.isFor();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        boolean boolean38 = node25.isEquivalentToTyped(node37);
        boolean boolean39 = node37.isAssignAdd();
        boolean boolean40 = node37.isGetElem();
        node15.addChildrenToFront(node37);
        // The following exception was thrown during execution in test generation
        try {
            node37.setString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        boolean boolean87 = node62.isVar();
        boolean boolean88 = node62.isIf();
        boolean boolean89 = node62.isNot();
        int int90 = node62.getChangeTime();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(47, node51, node57);
        node51.detachChildren();
        boolean boolean61 = node51.isAssign();
        boolean boolean62 = node51.isReturn();
        boolean boolean63 = node51.isAssign();
        java.util.Set<java.lang.String> strSet64 = node51.getDirectives();
        com.google.javascript.rhino.Node node65 = node37.useSourceInfoFromForTree(node51);
        boolean boolean66 = node51.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        com.google.javascript.rhino.Node node21 = node13.getFirstChild();
        boolean boolean22 = node13.isGetProp();
        com.google.javascript.rhino.Node node23 = node13.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = node23.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: REGEXP [directives: [ERROR]] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        int int32 = node15.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = null;
        com.google.javascript.rhino.Node node34 = node15.setJSDocInfo(jSDocInfo33);
        boolean boolean35 = node34.isBreak();
        int int36 = node34.getSourceOffset();
        boolean boolean37 = node34.isDo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node node62 = node38.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node5.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node62.isLabelName();
        boolean boolean65 = node62.hasOneChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(55, "LE 0");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "NUMBER 4095.0");
        node2.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        com.google.javascript.rhino.Node node87 = node70.getLastSibling();
        int int88 = node87.getSideEffectFlags();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        boolean boolean65 = node62.isFor();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node71.isFor();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(0, node71, 0, 0);
        boolean boolean82 = node81.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        com.google.javascript.rhino.Node node84 = node81.setJSDocInfo(jSDocInfo83);
        boolean boolean85 = node62.isEquivalentToShallow(node81);
        boolean boolean86 = node62.hasOneChild();
        node62.setLength((int) (short) -1);
        com.google.javascript.rhino.Node node89 = node62.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node21.isFor();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(0, node21, 0, 0);
        boolean boolean32 = node21.isString();
        boolean boolean33 = node21.isEmpty();
        boolean boolean34 = node21.isCatch();
        boolean boolean35 = node21.isOnlyModifiesArgumentsCall();
        boolean boolean36 = node21.isNoSideEffectsCall();
        node21.putBooleanProp((int) '4', true);
        boolean boolean40 = node15.isEquivalentTo(node21);
        com.google.javascript.rhino.Node node42 = node21.getChildAtIndex(0);
        int int43 = node21.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.wasEmptyNode();
        node15.setLength((int) 'a');
        com.google.javascript.rhino.Node node37 = node15.getFirstChild();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        boolean boolean66 = node53.isEquivalentToTyped(node65);
        boolean boolean67 = node53.isNull();
        com.google.javascript.rhino.Node node68 = node42.copyInformationFromForTree(node53);
        int int69 = node53.getType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node70 = node37.clonePropsFrom(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        boolean boolean46 = node15.isName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node15.children();
        boolean boolean48 = node15.isQuotedString();
        node15.detachChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node4.setJSType(jSType33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        com.google.javascript.rhino.Node node36 = node4.setJSDocInfo(jSDocInfo35);
        boolean boolean37 = node36.isGetElem();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray1, 51, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = node6.useSourceInfoIfMissingFrom(node11);
        boolean boolean13 = node6.isFor();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node6, 0, 0);
        boolean boolean17 = node6.isString();
        boolean boolean18 = node6.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        node28.putIntProp(2, 10);
        boolean boolean33 = node28.isNull();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node39.isFor();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(0, node39, 0, 0);
        boolean boolean50 = node39.isString();
        int int51 = node39.getSourceOffset();
        boolean boolean52 = node39.isVarArgs();
        com.google.javascript.rhino.Node node53 = node28.copyInformationFromForTree(node39);
        boolean boolean54 = node39.isReturn();
        com.google.javascript.rhino.Node node55 = node6.copyInformationFromForTree(node39);
        boolean boolean56 = node6.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(43, node6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags2.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.clearAllFlags();
        int int7 = sideEffectFlags6.valueOf();
        boolean boolean8 = sideEffectFlags6.areAllFlagsSet();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isTrue();
        com.google.javascript.rhino.Node node37 = node20.detachFromParent();
        node20.setType((int) '4');
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isCall();
        boolean boolean16 = node5.hasOneChild();
        boolean boolean17 = node5.isQualifiedName();
        int int18 = node5.getCharno();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node46.children();
        boolean boolean52 = node46.isOptionalArg();
        node46.setLineno(10);
        com.google.javascript.rhino.jstype.JSType jSType55 = node46.getJSType();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSType55);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "", (int) (short) -1, 40);
        boolean boolean5 = node4.isCast();
        int int6 = node4.getChildCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isFor();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isCast();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        node21.setType((int) 'a');
        java.util.Set<java.lang.String> strSet26 = node21.getDirectives();
        boolean boolean27 = node21.isInc();
        com.google.javascript.rhino.Node node28 = node5.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node45.isNull();
        com.google.javascript.rhino.Node node60 = node34.copyInformationFromForTree(node45);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        node34.setStaticSourceFile(staticSourceFile61);
        java.lang.String str66 = node34.toString(true, false, true);
        boolean boolean67 = node34.isDelProp();
        node28.putProp(30, (java.lang.Object) boolean67);
        boolean boolean69 = node28.isHook();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ERROR" + "'", str66, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        java.lang.String str18 = node9.toString(true, false, true);
        com.google.javascript.rhino.InputId inputId19 = null;
        node9.setInputId(inputId19);
        node9.setSourceEncodedPositionForTree(43);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ERROR" + "'", str18, "ERROR");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(32);
        com.google.javascript.rhino.InputId inputId2 = node1.getInputId();
        boolean boolean3 = node1.isSyntheticBlock();
        org.junit.Assert.assertNull(inputId2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isFor();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isCast();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        node21.setType((int) 'a');
        java.util.Set<java.lang.String> strSet26 = node21.getDirectives();
        boolean boolean27 = node21.isInc();
        com.google.javascript.rhino.Node node28 = node5.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        boolean boolean41 = node34.isFor();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(0, node34, 0, 0);
        boolean boolean45 = node34.isString();
        int int46 = node34.getSourceOffset();
        boolean boolean47 = node34.isVarArgs();
        boolean boolean48 = node34.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable49 = node34.getAncestors();
        boolean boolean50 = node34.isDelProp();
        com.google.javascript.rhino.Node node51 = node5.srcref(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        node34.setStaticSourceFile(staticSourceFile52);
        boolean boolean54 = node34.isArrayLit();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isObjectLit();
        com.google.javascript.rhino.Node node79 = node34.useSourceInfoIfMissingFrom(node64);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ancestorIterable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node5.getJSDocInfo();
        boolean boolean21 = node5.isFalse();
        int int22 = node5.getSourceOffset();
        boolean boolean23 = node5.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node30.isString();
        int int42 = node30.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node54 = node30.copyInformationFrom(node53);
        java.lang.String str55 = node54.toStringTree();
        com.google.javascript.rhino.Node node56 = node21.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("REGEXP ", (int) (byte) 10, 2);
        com.google.javascript.rhino.Node node61 = node56.copyInformationFromForTree(node60);
        // The following exception was thrown during execution in test generation
        try {
            node56.setDouble((double) 46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR 10 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR\n" + "'", str55, "ERROR\n");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        int int33 = node4.getChildCount();
        node4.putIntProp(47, (-1));
        com.google.javascript.rhino.InputId inputId37 = null;
        node4.setInputId(inputId37);
        java.lang.Class<?> wildcardClass39 = node4.getClass();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(55, nodeArray1, 53, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node44.isVarArgs();
        node44.setSourceEncodedPosition((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = node44.getExistingIntProp(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 40");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray6, 1, 4095);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(49, nodeArray6, 4, 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((-1), nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) ' ', nodeArray6, 15, 10);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(38, nodeArray6);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("ERROR\n");
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        boolean boolean29 = node28.isIn();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(47, node28, node34);
        com.google.javascript.rhino.InputId inputId37 = node28.getInputId();
        node28.detachChildren();
        boolean boolean39 = node28.isTypeOf();
        boolean boolean40 = node22.isEquivalentToTyped(node28);
        boolean boolean41 = node28.isDelProp();
        boolean boolean42 = node28.isReturn();
        int int43 = node20.getIndexOfChild(node28);
        boolean boolean44 = node28.isContinue();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(inputId37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = null;
        com.google.javascript.rhino.Node node43 = node10.setJSDocInfo(jSDocInfo42);
        com.google.javascript.rhino.Node node44 = node10.cloneNode();
        com.google.javascript.rhino.Node node45 = node10.cloneNode();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray2, 1, 4095);
        boolean boolean9 = node8.isNot();
        boolean boolean10 = node8.isArrayLit();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(15, nodeArray3);
        com.google.javascript.rhino.Node node12 = node10.getAncestor((int) (short) 0);
        boolean boolean13 = node12.isDo();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        int int23 = node9.getLineno();
        com.google.javascript.rhino.Node node24 = node9.cloneNode();
        boolean boolean25 = node24.isWith();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        boolean boolean25 = node21.isNew();
        boolean boolean26 = node21.isParamList();
        boolean boolean27 = node21.isReturn();
        boolean boolean28 = node21.isFromExterns();
        com.google.javascript.rhino.Node node29 = node21.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = node21.getExistingIntProp((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 35");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        node15.removeProp(16);
        node15.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node15.getAncestors();
        java.lang.String str63 = node15.toString(false, false, true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ERROR" + "'", str63, "ERROR");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node13 = node10.getChildAtIndex((int) (byte) 0);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10.0f);
        boolean boolean2 = node1.isIf();
        boolean boolean3 = node1.isIn();
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isIn();
        boolean boolean11 = node9.isContinue();
        java.lang.String str15 = node9.toString(true, true, false);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(4095, node9, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        boolean boolean24 = node23.isIn();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node34.isNull();
        com.google.javascript.rhino.Node node49 = node23.copyInformationFromForTree(node34);
        boolean boolean50 = node34.isCase();
        int int51 = node34.getChangeTime();
        com.google.javascript.rhino.Node node52 = node9.clonePropsFrom(node34);
        node34.setType((-1));
        boolean boolean55 = node34.isAssign();
        com.google.javascript.rhino.Node node56 = node1.useSourceInfoFrom(node34);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ERROR" + "'", str15, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        int int33 = node16.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node16.children();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        node45.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node49 = node16.useSourceInfoFromForTree(node45);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, node45, 0, 55);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node45.children();
        // The following exception was thrown during execution in test generation
        try {
            node45.setDouble((double) 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpected prop id 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeIterable53);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        boolean boolean14 = node4.isLocalResultCall();
        int int15 = node4.getSourcePosition();
        node4.setIsSyntheticBlock(false);
        boolean boolean18 = node4.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node4.siblings();
        boolean boolean20 = node4.isRegExp();
        node4.setSourceFileForTesting("");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node36.isIn();
        boolean boolean40 = node9.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        boolean boolean70 = node57.isEquivalentToTyped(node69);
        boolean boolean71 = node57.isNull();
        com.google.javascript.rhino.Node node72 = node46.copyInformationFromForTree(node57);
        node46.detachChildren();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(48, node46);
        com.google.javascript.rhino.Node node75 = node74.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        boolean boolean82 = node81.isIn();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        boolean boolean88 = node87.isIn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(47, node81, node87);
        boolean boolean90 = node89.isRegExp();
        com.google.javascript.rhino.Node node91 = node89.cloneNode();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoFrom(node89);
        node75.setOptionalArg(true);
        com.google.javascript.rhino.Node node95 = node9.useSourceInfoFrom(node75);
        boolean boolean96 = node95.isGetElem();
        java.lang.String str97 = node95.getSourceFileName();
        boolean boolean98 = node95.isLabel();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isCase();
        int int47 = node30.getChangeTime();
        com.google.javascript.rhino.Node node48 = node5.clonePropsFrom(node30);
        boolean boolean49 = node5.isCast();
        int int50 = node5.getLineno();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        boolean boolean25 = node21.isNew();
        boolean boolean26 = node21.isParamList();
        boolean boolean27 = node21.isReturn();
        com.google.javascript.rhino.Node node28 = node21.getFirstChild();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node33.isFor();
        int int42 = node33.getIntProp(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node33.getJsDocBuilderForNode();
        boolean boolean44 = node33.isAdd();
        boolean boolean45 = node33.isDec();
        node21.addChildrenToFront(node33);
        boolean boolean47 = node33.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node48 = node33.getParent();
        boolean boolean49 = node48.isBlock();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        java.lang.String str25 = node21.toString();
        boolean boolean26 = node21.isNumber();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ERROR" + "'", str25, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.children();
        node2.setIsSyntheticBlock(true);
        boolean boolean6 = node2.isQuotedString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node5.siblings();
        boolean boolean56 = node5.isTypeOf();
        java.util.Set<java.lang.String> strSet57 = node5.getDirectives();
        // The following exception was thrown during execution in test generation
        try {
            double double58 = node5.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(strSet57);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isOnlyModifiesArgumentsCall();
        boolean boolean34 = node15.isFor();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        node45.setLineno(56);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.clearAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        int int26 = node21.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isCatch();
        boolean boolean19 = node5.isOnlyModifiesArgumentsCall();
        boolean boolean20 = node5.isNoSideEffectsCall();
        node5.putBooleanProp((int) '4', true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node5.siblings();
        int int25 = node5.getType();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isScript();
        com.google.javascript.rhino.Node node21 = node5.getLastChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        int int39 = node27.getSourceOffset();
        boolean boolean40 = node27.isVarArgs();
        boolean boolean41 = node27.isDo();
        int int42 = node5.getIndexOfChild(node27);
        node27.setOptionalArg(false);
        boolean boolean45 = node27.isOr();
        boolean boolean46 = node27.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node52.isNull();
        com.google.javascript.rhino.Node node67 = node41.copyInformationFromForTree(node52);
        boolean boolean68 = node52.isSetterDef();
        int int69 = node52.getLength();
        boolean boolean70 = node52.isName();
        boolean boolean71 = node52.isFalse();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoIfMissingFrom(node81);
        boolean boolean83 = node82.isUnscopedQualifiedName();
        node52.addChildrenToFront(node82);
        node34.addChildToBack(node52);
        boolean boolean86 = node52.isCast();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        node21.addSuppression("hi!");
        boolean boolean33 = node21.isInc();
        boolean boolean34 = node21.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        boolean boolean54 = node5.isThrow();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        com.google.javascript.rhino.Node node48 = node15.getLastChild();
        java.util.Set<java.lang.String> strSet49 = node15.getDirectives();
        // The following exception was thrown during execution in test generation
        try {
            node15.setDouble((double) 55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(strSet49);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        boolean boolean87 = node62.isVar();
        boolean boolean88 = node62.isIf();
        boolean boolean89 = node62.isNot();
        node62.setSourceFileForTesting("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        boolean boolean33 = node5.isLabel();
        node5.setIsSyntheticBlock(false);
        boolean boolean36 = node5.isWith();
        boolean boolean37 = node5.isDefaultCase();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node node62 = node38.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node5.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(4, "");
        boolean boolean67 = node66.isNE();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        boolean boolean79 = node72.isCatch();
        boolean boolean80 = node72.isGetterDef();
        boolean boolean81 = node72.isArrayLit();
        boolean boolean82 = node72.isWith();
        // The following exception was thrown during execution in test generation
        try {
            node5.addChildBefore(node66, node72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '4', 12, (int) (short) -1);
        boolean boolean4 = node3.isExprResult();
        node3.putBooleanProp(46, true);
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        boolean boolean15 = node14.isCast();
        com.google.javascript.rhino.InputId inputId16 = node14.getInputId();
        node14.setType((int) 'a');
        java.util.Set<java.lang.String> strSet19 = node14.getDirectives();
        boolean boolean20 = node14.isInc();
        boolean boolean21 = node14.isScript();
        boolean boolean22 = node14.isLabelName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) '4', node14);
        boolean boolean25 = node14.getBooleanProp(15);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node36.isVoid();
        node36.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node36.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node41 = node36.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildAfter(node14, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "hi!", 1, 52);
        com.google.javascript.rhino.Node node5 = node4.getParent();
        boolean boolean6 = node4.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        boolean boolean32 = node31.hasChildren();
        node31.putBooleanProp(53, false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isVoid();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isCast();
        com.google.javascript.rhino.InputId inputId33 = node31.getInputId();
        node31.setType((int) 'a');
        java.util.Set<java.lang.String> strSet36 = node31.getDirectives();
        boolean boolean37 = node31.isInc();
        boolean boolean38 = node31.isScript();
        node9.addChildrenToFront(node31);
        boolean boolean40 = node31.isAdd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags1.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags4.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.clearAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        boolean boolean29 = node21.isAssign();
        boolean boolean30 = node21.isTrue();
        boolean boolean31 = node21.isLabel();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(31, "ERROR 0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        boolean boolean24 = node21.isCast();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node22.getJSDocInfo();
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(57, node22, (int) (short) 1, 49);
        boolean boolean31 = node22.isNumber();
        boolean boolean32 = node22.isDo();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isCast();
        com.google.javascript.rhino.InputId inputId21 = node19.getInputId();
        node19.setType((int) 'a');
        java.util.Set<java.lang.String> strSet24 = node19.getDirectives();
        boolean boolean25 = node19.isWith();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node41.isNull();
        com.google.javascript.rhino.Node node56 = node30.copyInformationFromForTree(node41);
        boolean boolean57 = node41.isSetterDef();
        int int58 = node41.getLength();
        boolean boolean59 = node41.isName();
        com.google.javascript.rhino.Node node60 = node19.useSourceInfoIfMissingFromForTree(node41);
        boolean boolean61 = node41.isStringKey();
        boolean boolean62 = node41.isTrue();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        boolean boolean68 = node67.isCast();
        com.google.javascript.rhino.Node node69 = node41.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.Node node70 = node10.useSourceInfoFrom(node41);
        int int71 = node10.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        boolean boolean34 = node15.isDo();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node15.clonePropsFrom(node44);
        boolean boolean60 = node15.isDefaultCase();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node66.isFor();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(0, node66, 0, 0);
        boolean boolean77 = node66.isString();
        int int78 = node66.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray85 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray85, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node89 = node83.useSourceInfoIfMissingFrom(node88);
        com.google.javascript.rhino.Node node90 = node66.copyInformationFrom(node89);
        boolean boolean91 = node15.hasChild(node90);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(nodeArray85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        int int33 = node16.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node16.children();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        node45.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node49 = node16.useSourceInfoFromForTree(node45);
        boolean boolean50 = node16.isGetProp();
        java.lang.String str54 = node16.toString(false, true, true);
        node16.removeProp(16);
        node16.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean62 = node16.isEquivalentToTyped(node61);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node61.children();
        boolean boolean64 = node61.isThrow();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 100, node61);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("hi!", 1, 0);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        boolean boolean75 = node74.isCast();
        com.google.javascript.rhino.InputId inputId76 = node74.getInputId();
        node74.setType((int) 'a');
        java.util.Set<java.lang.String> strSet79 = node74.getDirectives();
        boolean boolean80 = node74.isInc();
        boolean boolean81 = node74.isSetterDef();
        com.google.javascript.rhino.Node node82 = node69.copyInformationFromForTree(node74);
        node74.detachChildren();
        com.google.javascript.rhino.Node node84 = node65.copyInformationFrom(node74);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ERROR" + "'", str54, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        boolean boolean14 = node4.isLocalResultCall();
        int int15 = node4.getSourcePosition();
        node4.setIsSyntheticBlock(false);
        boolean boolean18 = node4.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node4.siblings();
        boolean boolean20 = node4.isCall();
        boolean boolean21 = node4.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("ERROR 0\n", 15, 16);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        node37.setVarArgs(false);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("ERROR\n");
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        boolean boolean56 = node55.isIn();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        boolean boolean62 = node61.isIn();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(47, node55, node61);
        com.google.javascript.rhino.InputId inputId64 = node55.getInputId();
        node55.detachChildren();
        boolean boolean66 = node55.isTypeOf();
        boolean boolean67 = node49.isEquivalentToTyped(node55);
        boolean boolean68 = node55.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            node37.addChildToFront(node55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(inputId64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        boolean boolean48 = node47.isIn();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        boolean boolean71 = node58.isEquivalentToTyped(node70);
        boolean boolean72 = node58.isNull();
        com.google.javascript.rhino.Node node73 = node47.copyInformationFromForTree(node58);
        node47.detachChildren();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(48, node47);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable76 = node47.getAncestors();
        boolean boolean77 = node47.isFalse();
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node88 = node82.useSourceInfoIfMissingFrom(node87);
        com.google.javascript.rhino.Node node89 = node87.getLastSibling();
        com.google.javascript.rhino.Node node91 = node87.getAncestor(15);
        boolean boolean92 = node47.isEquivalentTo(node87);
        boolean boolean93 = node4.isEquivalentToShallow(node87);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(ancestorIterable76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 53, 39);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node3.getAncestors();
        node3.setSourceFileForTesting("ERROR [is_namespace: false]");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(ancestorIterable4);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        boolean boolean38 = node25.isEquivalentToTyped(node37);
        boolean boolean39 = node37.isAssignAdd();
        boolean boolean40 = node37.isGetElem();
        node15.addChildrenToFront(node37);
        node15.setChangeTime(0);
        com.google.javascript.rhino.InputId inputId44 = node15.getInputId();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(inputId44);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        node18.detachChildren();
        boolean boolean46 = node18.isName();
        boolean boolean47 = node9.isEquivalentTo(node18);
        int int48 = node18.getChildCount();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        boolean boolean22 = node21.isRegExp();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        boolean boolean3 = sideEffectFlags2.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags2.clearAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNew();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node43.isFor();
        int int52 = node43.getIntProp(0);
        boolean boolean53 = node43.isLocalResultCall();
        boolean boolean54 = node43.mayMutateGlobalStateOrThrow();
        node4.putProp(4095, (java.lang.Object) node43);
        boolean boolean56 = node4.isLabelName();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = node4.getExistingIntProp(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isInstanceOf();
        boolean boolean27 = node21.isWith();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        node28.setIsSyntheticBlock(true);
        java.lang.Class<?> wildcardClass31 = node28.getClass();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isAnd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        int int24 = node10.getLineno();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray29, 2, (int) ' ');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4, nodeArray29);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        boolean boolean60 = node47.isEquivalentToTyped(node59);
        node47.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        boolean boolean68 = node67.isAnd();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(0, node47, node67, (int) (byte) 100, 53);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        boolean boolean78 = node77.isIn();
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        boolean boolean84 = node83.isIn();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(47, node77, node83);
        node77.detachChildren();
        boolean boolean87 = node77.isCall();
        java.lang.String str88 = node77.getSourceFileName();
        com.google.javascript.rhino.InputId inputId89 = node77.getInputId();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(40, node10, node36, node71, node77, (int) (byte) 1, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(inputId89);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        int int14 = node5.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isSetterDef();
        int int47 = node30.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node30.children();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        node59.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node63 = node30.useSourceInfoFromForTree(node59);
        boolean boolean64 = node5.isEquivalentTo(node63);
        boolean boolean65 = node63.isOptionalArg();
        boolean boolean66 = node63.isFor();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node78 = node72.useSourceInfoIfMissingFrom(node77);
        boolean boolean79 = node72.isFor();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0, node72, 0, 0);
        boolean boolean83 = node82.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = null;
        com.google.javascript.rhino.Node node85 = node82.setJSDocInfo(jSDocInfo84);
        boolean boolean86 = node63.isEquivalentToShallow(node82);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(40, node63, 53, 52);
        com.google.javascript.rhino.InputId inputId90 = null;
        node63.setInputId(inputId90);
        boolean boolean92 = node63.isCatch();
        java.lang.String str93 = node63.getQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 2);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = null;
        com.google.javascript.rhino.Node node43 = node10.setJSDocInfo(jSDocInfo42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node53.isNew();
        int int57 = node53.getIntProp(8);
        boolean boolean58 = node53.isQualifiedName();
        boolean boolean59 = node53.isBlock();
        boolean boolean60 = node53.isInstanceOf();
        boolean boolean61 = node43.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray65, 2, (int) ' ');
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(4, nodeArray65);
        node53.addChildrenToFront(node72);
        boolean boolean74 = node53.isGetProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(8, node11, 4, 32);
        node11.setType(0);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isDebugger();
        int int34 = node15.getType();
        node15.setOptionalArg(false);
        com.google.javascript.rhino.Node node38 = node15.getAncestor(29);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node44.isFor();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(0, node44, 0, 0);
        boolean boolean55 = node44.isString();
        boolean boolean56 = node44.isEmpty();
        boolean boolean57 = node44.isCatch();
        boolean boolean58 = node44.isOnlyModifiesArgumentsCall();
        boolean boolean59 = node44.isNoSideEffectsCall();
        node44.putBooleanProp((int) '4', true);
        boolean boolean63 = node44.isIn();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node64 = node38.srcref(node44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 53, 39);
        boolean boolean4 = node3.isInc();
        com.google.javascript.rhino.Node node5 = node3.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = node5.isGetElem();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        boolean boolean30 = node28.isFalse();
        int int31 = node28.getLength();
        boolean boolean32 = node28.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        boolean boolean30 = node28.isFalse();
        int int31 = node28.getLength();
        java.lang.Object obj33 = node28.getProp(38);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray6, 1, 4095);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(49, nodeArray6, 4, 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((-1), nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) ' ', nodeArray6, 15, 10);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, nodeArray6);
        com.google.javascript.rhino.Node node22 = node20.getAncestor(2);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        boolean boolean32 = node30.isInc();
        boolean boolean33 = node30.isOr();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        node38.detachChildren();
        boolean boolean66 = node38.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node38.setJSType(jSType67);
        com.google.javascript.rhino.Node node69 = node30.copyInformationFrom(node38);
        boolean boolean70 = node38.isVar();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        boolean boolean12 = node10.isName();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        node22.putIntProp(2, 10);
        boolean boolean27 = node22.isNull();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node33.isFor();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node33, 0, 0);
        boolean boolean44 = node33.isString();
        int int45 = node33.getSourceOffset();
        boolean boolean46 = node33.isVarArgs();
        com.google.javascript.rhino.Node node47 = node22.copyInformationFromForTree(node33);
        node47.setWasEmptyNode(false);
        boolean boolean50 = node47.isCatch();
        com.google.javascript.rhino.Node node51 = node10.srcref(node47);
        node47.putIntProp(52, 0);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        boolean boolean55 = node54.isFunction();
        boolean boolean56 = node54.isThis();
        // The following exception was thrown during execution in test generation
        try {
            node54.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        boolean boolean44 = node26.isName();
        com.google.javascript.rhino.Node node45 = node4.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean46 = node26.isStringKey();
        boolean boolean47 = node26.isTrue();
        boolean boolean48 = node26.isCase();
        node26.setOptionalArg(true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        boolean boolean20 = node5.isFalse();
        node5.putIntProp(39, (int) ' ');
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isObjectLit();
        boolean boolean33 = node15.isCast();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder14.append("NUMBER 4095.0");
        fileLevelJsDocBuilder14.append("ERROR\n");
        fileLevelJsDocBuilder14.append("ERROR [is_namespace: false]");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags3.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags3.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = sideEffectFlags7.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
        org.junit.Assert.assertNotNull(sideEffectFlags8);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node23 = node21.cloneNode();
        int int24 = node21.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 10);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        boolean boolean32 = node30.isInc();
        boolean boolean33 = node30.isOr();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        node38.detachChildren();
        boolean boolean66 = node38.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node38.setJSType(jSType67);
        com.google.javascript.rhino.Node node69 = node30.copyInformationFrom(node38);
        boolean boolean70 = node30.isNew();
        node30.setLength(43);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("ERROR [is_namespace: false]", 10, 54);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) 'a', 56, (int) (byte) 10);
        node2.addChildToFront(node42);
        node42.setLength((int) (byte) 100);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        boolean boolean74 = node61.isEquivalentToTyped(node73);
        boolean boolean75 = node61.isNull();
        com.google.javascript.rhino.Node node76 = node50.copyInformationFromForTree(node61);
        boolean boolean77 = node61.isSetterDef();
        int int78 = node61.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node61.children();
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray86 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray86, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node90 = node84.useSourceInfoIfMissingFrom(node89);
        node90.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node94 = node61.useSourceInfoFromForTree(node90);
        java.lang.String str95 = node94.toStringTree();
        com.google.javascript.rhino.Node node96 = node42.useSourceInfoIfMissingFromForTree(node94);
        boolean boolean97 = node94.isInc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ERROR\n" + "'", str95, "ERROR\n");
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isCase();
        int int47 = node30.getChangeTime();
        com.google.javascript.rhino.Node node48 = node5.clonePropsFrom(node30);
        node30.setType((-1));
        boolean boolean51 = node30.isAssign();
        com.google.javascript.rhino.Node node52 = node30.getParent();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(node52);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isCase();
        int int59 = node42.getChangeTime();
        node21.addChildrenToBack(node42);
        node21.setSourceEncodedPosition(39);
        node21.detachChildren();
        boolean boolean64 = node21.isObjectLit();
        com.google.javascript.rhino.Node node65 = null;
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node71.isFor();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(0, node71, 0, 0);
        boolean boolean82 = node81.isAssign();
        int int83 = node81.getSideEffectFlags();
        com.google.javascript.rhino.Node node84 = node81.getLastSibling();
        boolean boolean85 = node81.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = node81.getJSDocInfo();
        boolean boolean87 = node81.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildBefore(node65, node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(jSDocInfo86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setSourceEncodedPositionForTree(36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node42.isFor();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node42, 0, 0);
        boolean boolean53 = node42.isString();
        int int54 = node42.getSourceOffset();
        boolean boolean55 = node42.isVarArgs();
        int int56 = node42.getChildCount();
        boolean boolean57 = node42.isLabel();
        boolean boolean58 = node42.isAssignAdd();
        // The following exception was thrown during execution in test generation
        try {
            node34.addChildrenToBack(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        java.lang.String str34 = node15.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node40.isFor();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(0, node40, 0, 0);
        boolean boolean51 = node40.isString();
        int int52 = node40.getSourceOffset();
        boolean boolean53 = node40.isVarArgs();
        boolean boolean54 = node40.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node40.getJSDocInfo();
        boolean boolean56 = node40.isSyntheticBlock();
        boolean boolean57 = node15.isEquivalentToShallow(node40);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node15.getStaticSourceFile();
        boolean boolean59 = node15.wasEmptyNode();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node62.isEquivalentToTyped(node74);
        java.util.Set<java.lang.String> strSet76 = node74.getDirectives();
        boolean boolean77 = node74.isOnlyModifiesThisCall();
        boolean boolean78 = node74.isBreak();
        com.google.javascript.rhino.Node node79 = node52.useSourceInfoIfMissingFromForTree(node74);
        node52.addSuppression("");
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        node80.setLineno((int) (short) 1);
        node80.setSourceEncodedPosition(57);
        java.lang.String str99 = node80.getQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = node30.isQualifiedName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isFor();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isCast();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        node21.setType((int) 'a');
        java.util.Set<java.lang.String> strSet26 = node21.getDirectives();
        boolean boolean27 = node21.isInc();
        com.google.javascript.rhino.Node node28 = node5.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        boolean boolean41 = node34.isFor();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(0, node34, 0, 0);
        boolean boolean45 = node34.isString();
        int int46 = node34.getSourceOffset();
        boolean boolean47 = node34.isVarArgs();
        boolean boolean48 = node34.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable49 = node34.getAncestors();
        boolean boolean50 = node34.isDelProp();
        com.google.javascript.rhino.Node node51 = node5.srcref(node34);
        boolean boolean52 = node51.isLabelName();
        boolean boolean53 = node51.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ancestorIterable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        java.lang.String str23 = node4.checkTreeEquals(node22);
        boolean boolean24 = node22.isVar();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node40.isAssign();
        int int42 = node40.getCharno();
        java.util.Set<java.lang.String> strSet43 = node40.getDirectives();
        boolean boolean44 = node40.isBlock();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isCast();
        com.google.javascript.rhino.InputId inputId51 = node49.getInputId();
        node49.setType((int) 'a');
        java.util.Set<java.lang.String> strSet54 = node49.getDirectives();
        node49.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node67.isEquivalentToTyped(node79);
        boolean boolean81 = node79.isAssignAdd();
        boolean boolean82 = node79.hasChildren();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(32, node79, 47, 32);
        node49.addChildToFront(node85);
        node85.setSourceEncodedPositionForTree(56);
        com.google.javascript.rhino.Node node89 = node40.srcrefTree(node85);
        com.google.javascript.rhino.Node node90 = node22.copyInformationFrom(node85);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder91 = node90.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(inputId51);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isObjectLit();
        boolean boolean24 = node9.isCatch();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        java.util.Set<java.lang.String> strSet42 = node40.getDirectives();
        boolean boolean43 = node40.isName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        boolean boolean28 = node27.isIn();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node38.isEquivalentToTyped(node50);
        boolean boolean52 = node38.isNull();
        com.google.javascript.rhino.Node node53 = node27.copyInformationFromForTree(node38);
        boolean boolean54 = node38.isCase();
        int int55 = node38.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = null;
        com.google.javascript.rhino.Node node57 = node38.setJSDocInfo(jSDocInfo56);
        com.google.javascript.rhino.Node node58 = node21.copyInformationFromForTree(node38);
        boolean boolean59 = node58.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        node15.putIntProp((int) (byte) 0, 42);
        boolean boolean37 = node15.isDec();
        // The following exception was thrown during execution in test generation
        try {
            node15.setDouble((double) 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpected prop id 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        com.google.javascript.rhino.Node node36 = node20.removeChildren();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node42.isFor();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node42, 0, 0);
        boolean boolean53 = node42.isString();
        int int54 = node42.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node66 = node42.copyInformationFrom(node65);
        com.google.javascript.rhino.Node node67 = node42.removeChildren();
        boolean boolean68 = node42.isGetElem();
        boolean boolean69 = node42.isOnlyModifiesArgumentsCall();
        java.lang.String str70 = node42.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        boolean boolean77 = node76.isIn();
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        boolean boolean83 = node82.isIn();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(47, node76, node82);
        java.lang.String str85 = node84.getSourceFileName();
        java.lang.String[] strArray87 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet88 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet88, strArray87);
        node84.setDirectives((java.util.Set<java.lang.String>) strSet88);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet88);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet88);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '#', "hi!", 8, (int) (byte) 0);
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.appendStringTree(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setCharno(47);
        int int9 = node4.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node4.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasOneChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node10.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder42.append("REGEXP");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node50.children();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        node79.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node83 = node50.useSourceInfoFromForTree(node79);
        boolean boolean84 = node79.isLabel();
        com.google.javascript.rhino.Node node85 = node4.copyInformationFrom(node79);
        boolean boolean86 = node85.isAdd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node33.copyInformationFromForTree(node44);
        boolean boolean60 = node44.isSetterDef();
        int int61 = node44.getLength();
        boolean boolean62 = node44.isName();
        boolean boolean63 = node44.isFalse();
        java.lang.String[] strArray65 = new java.lang.String[] { "ERROR\n" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet66);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet66);
        node13.putBooleanProp(2, true);
        boolean boolean73 = node13.isScript();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(43, "ERROR [change_time: 55]");
        java.lang.String str6 = node2.toString(true, false, false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FALSE ERROR [change_time: 55]" + "'", str6, "FALSE ERROR [change_time: 55]");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        java.lang.Appendable appendable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            node15.appendStringTree(appendable34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        boolean boolean18 = node5.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = node5.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        boolean boolean53 = node52.isGetterDef();
        boolean boolean54 = node52.isNot();
        boolean boolean55 = node52.wasEmptyNode();
        com.google.javascript.rhino.InputId inputId56 = null;
        node52.setInputId(inputId56);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        node4.putBooleanProp(55, true);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isCast();
        com.google.javascript.rhino.InputId inputId20 = node18.getInputId();
        node18.setType((int) 'a');
        java.util.Set<java.lang.String> strSet23 = node18.getDirectives();
        boolean boolean24 = node18.isWith();
        boolean boolean25 = node18.isAssignAdd();
        boolean boolean26 = node18.isTrue();
        node4.addChildToFront(node18);
        boolean boolean28 = node4.hasOneChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node10.setStaticSourceFile(staticSourceFile41);
        boolean boolean43 = node10.isHook();
        boolean boolean44 = node10.isScript();
        boolean boolean45 = node10.isTrue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags6.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isCase();
        int int47 = node30.getChangeTime();
        com.google.javascript.rhino.Node node48 = node5.clonePropsFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node54.isFor();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(0, node54, 0, 0);
        boolean boolean65 = node54.isString();
        boolean boolean66 = node54.isEmpty();
        boolean boolean67 = node54.isCatch();
        boolean boolean68 = node54.isOnlyModifiesArgumentsCall();
        boolean boolean69 = node54.isNoSideEffectsCall();
        node54.putBooleanProp((int) '4', true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node54.siblings();
        // The following exception was thrown during execution in test generation
        try {
            node5.addChildToFront(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable73);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray6, 1, 4095);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(49, nodeArray6, 4, 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((-1), nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(47, nodeArray6, 23, 15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(29, nodeArray6);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        node4.setChangeTime((int) (short) 100);
        boolean boolean14 = node4.isNumber();
        boolean boolean15 = node4.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        boolean boolean3 = sideEffectFlags2.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags4.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = node1.checkTreeEquals(node2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        boolean boolean26 = node21.isRegExp();
        boolean boolean27 = node21.isExprResult();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(47, node33, node39);
        java.lang.String str42 = node41.getSourceFileName();
        boolean boolean43 = node41.hasOneChild();
        int int44 = node21.getIndexOfChild(node41);
        boolean boolean45 = node41.isThis();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(47, node34, node40);
        node34.detachChildren();
        boolean boolean44 = node34.hasMoreThanOneChild();
        boolean boolean45 = node34.isNumber();
        com.google.javascript.rhino.Node node46 = node21.srcref(node34);
        com.google.javascript.rhino.Node node48 = node34.getAncestor(56);
        boolean boolean49 = node34.isInstanceOf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node13.srcref(node19);
        boolean boolean21 = node19.hasMoreThanOneChild();
        com.google.javascript.rhino.InputId inputId22 = null;
        node19.setInputId(inputId22);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        com.google.javascript.rhino.Node node42 = node41.removeFirstChild();
        int int43 = node41.getSourceOffset();
        com.google.javascript.rhino.InputId inputId44 = null;
        node41.setInputId(inputId44);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node4.setJSType(jSType33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        com.google.javascript.rhino.Node node36 = node4.setJSDocInfo(jSDocInfo35);
        boolean boolean37 = node36.isString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isCase();
        int int59 = node42.getChangeTime();
        node21.addChildrenToBack(node42);
        boolean boolean61 = node42.isDefaultCase();
        boolean boolean62 = node42.isGetElem();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        boolean boolean15 = node5.isGetProp();
        boolean boolean16 = node5.isInstanceOf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(56);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags4.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags4.setMutatesArguments();
        int int7 = sideEffectFlags4.valueOf();
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 24 + "'", int7 == 24);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(23);
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node13 = node7.useSourceInfoIfMissingFrom(node12);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node24 = node18.useSourceInfoIfMissingFrom(node23);
        boolean boolean25 = node12.isEquivalentToTyped(node24);
        boolean boolean26 = node24.isAssignAdd();
        boolean boolean27 = node24.hasChildren();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(32, node24, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node54.isAssignAdd();
        boolean boolean57 = node54.hasChildren();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(32, node54, 47, 32);
        node30.putProp(48, (java.lang.Object) node54);
        com.google.javascript.rhino.Node node62 = node30.getFirstChild();
        boolean boolean63 = node62.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = null;
        com.google.javascript.rhino.Node node65 = node62.setJSDocInfo(jSDocInfo64);
        com.google.javascript.rhino.Node node66 = node1.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node1.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(jSDocInfo67);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = node6.useSourceInfoIfMissingFrom(node11);
        boolean boolean13 = node6.isFor();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node6, 0, 0);
        boolean boolean17 = node6.isString();
        int int18 = node6.getSourceOffset();
        boolean boolean19 = node6.isVarArgs();
        int int20 = node6.getChildCount();
        com.google.javascript.rhino.Node node22 = node6.getAncestor(8);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray26, 2, (int) ' ');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(15, nodeArray26);
        node6.addChildToFront(node33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node6.setJSType(jSType35);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(1, node6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(nodeArray26);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        node33.setOptionalArg(false);
        boolean boolean43 = node33.isComma();
        boolean boolean44 = node33.isName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '4', 12, (int) (short) -1);
        boolean boolean4 = node3.isExprResult();
        node3.putBooleanProp(46, true);
        java.lang.String str8 = node3.toString();
        int int9 = node3.getLineno();
        boolean boolean10 = node3.isAnd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "INSTANCEOF [is_namespace: 1]" + "'", str8, "INSTANCEOF [is_namespace: 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node31.setStaticSourceFile(staticSourceFile58);
        java.lang.String str63 = node31.toString(true, false, true);
        boolean boolean64 = node31.isNew();
        boolean boolean65 = node31.isSetterDef();
        boolean boolean66 = node21.isEquivalentToTyped(node31);
        com.google.javascript.rhino.Node node67 = node31.getParent();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ERROR" + "'", str63, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(node67);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        boolean boolean3 = node2.isFromExterns();
        boolean boolean4 = node2.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isDelProp();
        boolean boolean17 = node5.isEmpty();
        com.google.javascript.rhino.jstype.JSType jSType18 = node5.getJSType();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSType18);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node36.isIn();
        boolean boolean40 = node9.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        boolean boolean70 = node57.isEquivalentToTyped(node69);
        boolean boolean71 = node57.isNull();
        com.google.javascript.rhino.Node node72 = node46.copyInformationFromForTree(node57);
        node46.detachChildren();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(48, node46);
        com.google.javascript.rhino.Node node75 = node74.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        boolean boolean82 = node81.isIn();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        boolean boolean88 = node87.isIn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(47, node81, node87);
        boolean boolean90 = node89.isRegExp();
        com.google.javascript.rhino.Node node91 = node89.cloneNode();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoFrom(node89);
        node75.setOptionalArg(true);
        com.google.javascript.rhino.Node node95 = node9.useSourceInfoFrom(node75);
        boolean boolean96 = node9.isNull();
        com.google.javascript.rhino.jstype.JSType jSType97 = node9.getJSType();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(jSType97);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 43, 32, 24);
        node3.setChangeTime(32);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags4.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        boolean boolean35 = node15.isDec();
        boolean boolean36 = node15.isVarArgs();
        boolean boolean37 = node15.isReturn();
        com.google.javascript.rhino.Node node38 = node15.cloneNode();
        boolean boolean39 = node38.isVoid();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray36, 2, (int) ' ');
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(43, nodeArray36, 32, (-1));
        boolean boolean46 = node45.isCall();
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node62.isEquivalentToTyped(node74);
        boolean boolean76 = node62.isNull();
        com.google.javascript.rhino.Node node77 = node51.copyInformationFromForTree(node62);
        boolean boolean78 = node62.isSetterDef();
        int int79 = node62.getLength();
        boolean boolean80 = node62.isName();
        java.lang.String str81 = node62.getSourceFileName();
        boolean boolean82 = node62.isFromExterns();
        boolean boolean83 = node45.isEquivalentToShallow(node62);
        // The following exception was thrown during execution in test generation
        try {
            node15.removeChild(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isCase();
        int int47 = node30.getChangeTime();
        com.google.javascript.rhino.Node node48 = node5.clonePropsFrom(node30);
        boolean boolean49 = node30.isEmpty();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node60, node66);
        boolean boolean69 = node68.isRegExp();
        boolean boolean70 = node68.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node71 = node54.srcref(node68);
        boolean boolean72 = node54.isDelProp();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable73 = node54.getAncestors();
        boolean boolean74 = node54.isInstanceOf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(ancestorIterable73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray5, 1, 4095);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(49, nodeArray5, 4, 0);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((-1), nodeArray5);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(37, nodeArray5, (int) (short) 10, (int) (short) 10);
        java.lang.String str19 = node18.getQualifiedName();
        boolean boolean20 = node18.isTry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = node18.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CALL 10 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node6);
        com.google.javascript.rhino.Node node35 = node34.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray38, 2, (int) ' ');
        java.lang.String str45 = node44.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node67.isAssignAdd();
        com.google.javascript.rhino.Node node70 = node67.getParent();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(38, node34, node44, node67);
        boolean boolean72 = node34.isNew();
        boolean boolean73 = node34.isAdd();
        boolean boolean74 = node34.isAssign();
        node34.setSourceEncodedPosition(29);
        boolean boolean77 = node34.isStringKey();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        int int33 = node16.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node16.children();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        node45.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node49 = node16.useSourceInfoFromForTree(node45);
        boolean boolean50 = node16.isGetProp();
        java.lang.String str54 = node16.toString(false, true, true);
        node16.removeProp(16);
        node16.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean62 = node16.isEquivalentToTyped(node61);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node61.children();
        boolean boolean64 = node61.isThrow();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 100, node61);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node75.isNew();
        int int79 = node75.getIntProp(8);
        boolean boolean80 = node75.isRegExp();
        boolean boolean81 = node75.isCatch();
        int int82 = node75.getSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = node65.getChildBefore(node75);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ERROR" + "'", str54, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node5.getJSDocInfo();
        boolean boolean21 = node5.isFalse();
        int int22 = node5.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node5.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(jSDocInfo23);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        java.lang.String str18 = node9.toString(true, false, true);
        boolean boolean19 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((-1), "ERROR");
        boolean boolean23 = node22.isNew();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = node9.removeChildAfter(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ERROR" + "'", str18, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node node18 = node5.detachFromParent();
        int int19 = node18.getChangeTime();
        boolean boolean20 = node18.isTrue();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node60, node66);
        boolean boolean69 = node68.isRegExp();
        boolean boolean70 = node68.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node71 = node54.srcref(node68);
        boolean boolean72 = node54.isSetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = null;
        node54.setStaticSourceFile(staticSourceFile73);
        boolean boolean75 = node54.isIn();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node53.setStaticSourceFile(staticSourceFile80);
        com.google.javascript.rhino.Node node82 = node15.clonePropsFrom(node53);
        boolean boolean83 = node53.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node4.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator13 = nodeIterable12.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator14 = nodeIterable12.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator15 = nodeIterable12.spliterator();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(nodeSpliterator13);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(4, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(55, nodeArray5, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(51, nodeArray5);
        java.lang.String str17 = node16.getQualifiedName();
        node16.removeProp(4095);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node23 = node21.cloneNode();
        boolean boolean24 = node23.isNumber();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node5.getJSDocInfo();
        boolean boolean21 = node5.isFalse();
        com.google.javascript.rhino.Node node22 = node5.cloneTree();
        boolean boolean23 = node22.isStringKey();
        boolean boolean24 = node22.isLabelName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray3, 1, 4095);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray3, 4, 0);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isLabel();
        com.google.javascript.rhino.Node node15 = node12.cloneNode();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(52, "hi!", 1, 52);
        boolean boolean21 = node12.isEquivalentTo(node20);
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.isHook();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        int int3 = node2.getLineno();
        boolean boolean4 = node2.isWhile();
        boolean boolean5 = node2.isCast();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNew();
        boolean boolean38 = node4.isSetterDef();
        boolean boolean39 = node4.isObjectLit();
        boolean boolean40 = node4.isInc();
        boolean boolean41 = node4.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        boolean boolean48 = node15.isFunction();
        com.google.javascript.rhino.Node node50 = node15.getAncestor(0);
        node15.setSourceFileForTesting("ERROR [change_time: 55]");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(4, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(55, nodeArray5, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(38, nodeArray5, (int) ' ', 46);
        java.lang.Class<?> wildcardClass19 = nodeArray5.getClass();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "FALSE ERROR [change_time: 55]");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        node4.setChangeTime((int) (short) 100);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node31.isEquivalentToTyped(node43);
        boolean boolean45 = node31.isNull();
        com.google.javascript.rhino.Node node46 = node20.copyInformationFromForTree(node31);
        node20.detachChildren();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(48, node20);
        com.google.javascript.rhino.Node node49 = node48.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        boolean boolean56 = node55.isIn();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        boolean boolean62 = node61.isIn();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(47, node55, node61);
        boolean boolean64 = node63.isRegExp();
        com.google.javascript.rhino.Node node65 = node63.cloneNode();
        com.google.javascript.rhino.Node node66 = node49.useSourceInfoFrom(node63);
        node4.putProp(53, (java.lang.Object) node63);
        boolean boolean68 = node4.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = null;
        com.google.javascript.rhino.Node node43 = node10.setJSDocInfo(jSDocInfo42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node53.isNew();
        int int57 = node53.getIntProp(8);
        boolean boolean58 = node53.isQualifiedName();
        boolean boolean59 = node53.isBlock();
        boolean boolean60 = node53.isInstanceOf();
        boolean boolean61 = node43.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray65, 2, (int) ' ');
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(4, nodeArray65);
        node53.addChildrenToFront(node72);
        com.google.javascript.rhino.jstype.JSType jSType74 = node53.getJSType();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNull(jSType74);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node28.isThrow();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.getFirstChild();
        com.google.javascript.rhino.Node node35 = node33.getLastSibling();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesGlobalState();
        boolean boolean3 = sideEffectFlags2.areAllFlagsSet();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(47, node19, node25);
        node19.detachChildren();
        boolean boolean29 = node19.isAssign();
        boolean boolean30 = node19.isOr();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isFor();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(0, node37, 0, 0);
        boolean boolean48 = node37.isString();
        boolean boolean49 = node37.isEmpty();
        node19.putProp((int) '#', (java.lang.Object) boolean49);
        java.lang.String str51 = node19.getSourceFileName();
        com.google.javascript.rhino.Node node52 = node9.useSourceInfoFrom(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node19.siblings();
        node19.setSourceEncodedPositionForTree(32);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeIterable53);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isSyntheticBlock();
        java.lang.String str33 = node15.getQualifiedName();
        boolean boolean34 = node15.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = null;
        com.google.javascript.rhino.Node node36 = node15.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray39, 2, (int) ' ');
        boolean boolean46 = node45.isVar();
        node15.addChildToFront(node45);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node15.isAssign();
        int int17 = node15.getSideEffectFlags();
        com.google.javascript.rhino.Node node18 = node15.getLastSibling();
        boolean boolean19 = node18.isDo();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str10 = node4.toString(true, true, false);
        com.google.javascript.rhino.Node node12 = node4.getAncestor((int) 'a');
        node4.setSourceEncodedPosition(31);
        int int15 = node4.getChildCount();
        boolean boolean16 = node4.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR" + "'", str10, "ERROR");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node10.isNew();
        int int14 = node10.getIntProp(8);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        boolean boolean26 = node25.isVoid();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node48.isAssignAdd();
        boolean boolean51 = node48.hasChildren();
        boolean boolean52 = node48.isSetterDef();
        node48.addSuppression("ERROR\n");
        boolean boolean55 = node25.isEquivalentToShallow(node48);
        boolean boolean56 = node25.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        com.google.javascript.rhino.Node node58 = node25.setJSDocInfo(jSDocInfo57);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 100, node10, node25);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = node10.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node54.setStaticSourceFile(staticSourceFile55);
        boolean boolean57 = node54.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray61, 1, 4095);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(49, nodeArray61, 4, 0);
        int int71 = node70.getSourceOffset();
        boolean boolean72 = node70.isQualifiedName();
        boolean boolean73 = node70.isLocalResultCall();
        node54.addChildrenToFront(node70);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isReturn();
        com.google.javascript.rhino.Node node44 = node13.removeChildren();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(47, node50, node56);
        java.lang.String str59 = node58.getSourceFileName();
        java.lang.String[] strArray61 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean65 = node58.isParamList();
        com.google.javascript.rhino.Node node66 = node58.getFirstChild();
        boolean boolean67 = node66.isThis();
        int int68 = node44.getIndexOfChild(node66);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node44.getStaticSourceFile();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(staticSourceFile69);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node65.isThis();
        boolean boolean67 = node65.isNE();
        boolean boolean68 = node65.isSyntheticBlock();
        com.google.javascript.rhino.Node node70 = node65.getChildAtIndex(0);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags71 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean72 = sideEffectFlags71.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags73 = sideEffectFlags71.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags74 = sideEffectFlags71.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags75 = sideEffectFlags71.setMutatesArguments();
        node65.setSideEffectFlags(sideEffectFlags71);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags73);
        org.junit.Assert.assertNotNull(sideEffectFlags74);
        org.junit.Assert.assertNotNull(sideEffectFlags75);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        node4.setChangeTime((int) (short) 100);
        boolean boolean14 = node4.isNumber();
        boolean boolean15 = node4.isNE();
        com.google.javascript.rhino.Node node17 = node4.getAncestor(46);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
    }
}


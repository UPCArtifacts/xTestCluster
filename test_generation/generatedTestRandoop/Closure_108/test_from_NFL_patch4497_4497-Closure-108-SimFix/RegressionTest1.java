import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = node6.useSourceInfoIfMissingFrom(node11);
        boolean boolean13 = node6.isFor();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node6, 0, 0);
        boolean boolean17 = node6.isNew();
        boolean boolean18 = node6.isCall();
        java.lang.String str19 = node6.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(47, node25, node31);
        node25.detachChildren();
        boolean boolean35 = node25.isAssign();
        boolean boolean36 = node25.isOr();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node43.isFor();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(0, node43, 0, 0);
        boolean boolean54 = node43.isString();
        boolean boolean55 = node43.isEmpty();
        node25.putProp((int) '#', (java.lang.Object) boolean55);
        java.lang.String str57 = node25.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        boolean boolean64 = node63.isIn();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node86 = node80.useSourceInfoIfMissingFrom(node85);
        boolean boolean87 = node74.isEquivalentToTyped(node86);
        boolean boolean88 = node74.isNull();
        com.google.javascript.rhino.Node node89 = node63.copyInformationFromForTree(node74);
        node63.detachChildren();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(48, node63);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable92 = node63.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(39, node6, node25, node63, 100, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(ancestorIterable92);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node31.setStaticSourceFile(staticSourceFile58);
        java.lang.String str63 = node31.toString(true, false, true);
        boolean boolean64 = node31.isNew();
        boolean boolean65 = node31.isSetterDef();
        boolean boolean66 = node21.isEquivalentToTyped(node31);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node31.getStaticSourceFile();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ERROR" + "'", str63, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(staticSourceFile67);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        com.google.javascript.rhino.Node node95 = node70.cloneNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isIn();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        boolean boolean33 = node20.isEquivalentToTyped(node32);
        boolean boolean34 = node20.isNull();
        com.google.javascript.rhino.Node node35 = node9.copyInformationFromForTree(node20);
        boolean boolean36 = node20.isCase();
        node20.removeProp(16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node20.siblings();
        node4.addChildToBack(node20);
        boolean boolean41 = node4.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(42, "ERROR [change_time: 55]");
        node2.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isCatch();
        boolean boolean16 = node9.isCase();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node.AncestorIterable ancestorIterable31 = node30.getAncestors();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node node66 = null;
        boolean boolean67 = node65.hasChild(node66);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        java.lang.Object obj34 = node4.getProp(4);
        boolean boolean35 = node4.isComma();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        boolean boolean29 = node28.isQualifiedName();
        boolean boolean30 = node28.isCast();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        boolean boolean37 = node36.isIn();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(47, node36, node42);
        java.lang.String str45 = node44.getSourceFileName();
        java.lang.String[] strArray47 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet48);
        boolean boolean51 = node44.isParamList();
        com.google.javascript.rhino.Node node52 = node44.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node53 = node28.getChildBefore(node44);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isDebugger();
        int int34 = node15.getType();
        boolean boolean36 = node15.getBooleanProp((int) (short) 1);
        boolean boolean37 = node15.isContinue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 32, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        node19.putIntProp((int) (byte) 0, 42);
        boolean boolean41 = node19.isDec();
        boolean boolean42 = node19.isVoid();
        node3.addChildToBack(node19);
        boolean boolean44 = node3.isTypeOf();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node60.isEquivalentToTyped(node72);
        boolean boolean74 = node60.isNull();
        com.google.javascript.rhino.Node node75 = node49.copyInformationFromForTree(node60);
        boolean boolean76 = node60.isSetterDef();
        int int77 = node60.getLength();
        boolean boolean78 = node60.isName();
        java.lang.String str79 = node60.getSourceFileName();
        boolean boolean80 = node60.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node86 = node60.copyInformationFrom(node85);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString(48, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildAfter(node60, node89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        boolean boolean34 = node15.isDo();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node15.clonePropsFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray63, 2, (int) ' ');
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(43, nodeArray63, 32, (-1));
        com.google.javascript.rhino.Node node73 = node72.getParent();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node72.getStaticSourceFile();
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node85 = node79.useSourceInfoIfMissingFrom(node84);
        boolean boolean86 = node85.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node59.addChildrenAfter(node72, node85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node15.isAssign();
        int int17 = node15.getCharno();
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node15.children();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(nodeIterable19);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isSyntheticBlock();
        node9.putProp((-1), (java.lang.Object) node46);
        boolean boolean51 = node46.wasEmptyNode();
        boolean boolean52 = node46.isIf();
        boolean boolean53 = node46.isDec();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node50.children();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        node79.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node83 = node50.useSourceInfoFromForTree(node79);
        boolean boolean84 = node79.isLabel();
        com.google.javascript.rhino.Node node85 = node4.copyInformationFrom(node79);
        boolean boolean86 = node85.isFor();
        boolean boolean87 = node85.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node10.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node24 = node18.useSourceInfoIfMissingFrom(node23);
        node10.addChildToFront(node23);
        node10.putIntProp((-1), 31);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(47, node40, node46);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node50 = node48.cloneNode();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoFrom(node48);
        node48.removeProp(0);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node36.isIn();
        boolean boolean40 = node9.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        boolean boolean70 = node57.isEquivalentToTyped(node69);
        boolean boolean71 = node57.isNull();
        com.google.javascript.rhino.Node node72 = node46.copyInformationFromForTree(node57);
        node46.detachChildren();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(48, node46);
        com.google.javascript.rhino.Node node75 = node74.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        boolean boolean82 = node81.isIn();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        boolean boolean88 = node87.isIn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(47, node81, node87);
        boolean boolean90 = node89.isRegExp();
        com.google.javascript.rhino.Node node91 = node89.cloneNode();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoFrom(node89);
        node75.setOptionalArg(true);
        com.google.javascript.rhino.Node node95 = node9.useSourceInfoFrom(node75);
        boolean boolean96 = node95.isGetElem();
        java.lang.String str97 = node95.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            double double98 = node95.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node60, node66);
        boolean boolean69 = node68.isRegExp();
        boolean boolean70 = node68.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node71 = node54.srcref(node68);
        node71.setSourceEncodedPositionForTree(57);
        boolean boolean74 = node71.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node30.isString();
        int int42 = node30.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node54 = node30.copyInformationFrom(node53);
        java.lang.String str55 = node54.toStringTree();
        com.google.javascript.rhino.Node node56 = node21.useSourceInfoIfMissingFromForTree(node54);
        node21.setChangeTime((int) (short) -1);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR\n" + "'", str55, "ERROR\n");
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node39.isFor();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(0, node39, 0, 0);
        boolean boolean50 = node39.isString();
        int int51 = node39.getSourceOffset();
        boolean boolean52 = node39.isVarArgs();
        boolean boolean53 = node39.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node39.getAncestors();
        boolean boolean55 = node39.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            node33.addChildrenToFront(node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node15.isAssign();
        int int17 = node15.getCharno();
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        node15.removeProp(43);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(strSet18);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        boolean boolean48 = node15.isFunction();
        boolean boolean49 = node15.isGetElem();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.wasEmptyNode();
        boolean boolean35 = node15.isGetProp();
        boolean boolean36 = node15.isString();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node52.isNull();
        com.google.javascript.rhino.Node node67 = node41.copyInformationFromForTree(node52);
        node41.detachChildren();
        boolean boolean69 = node41.isFromExterns();
        node41.setSourceFileForTesting("REGEXP ");
        int int72 = node41.getLineno();
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node78.isFor();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(0, node78, 0, 0);
        boolean boolean89 = node78.isString();
        int int90 = node78.getSourceOffset();
        boolean boolean91 = node78.isVarArgs();
        boolean boolean92 = node78.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = node78.getJSDocInfo();
        boolean boolean94 = node78.isFalse();
        com.google.javascript.rhino.Node node95 = node78.cloneTree();
        boolean boolean96 = node78.isCase();
        int int97 = node78.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            node15.addChildBefore(node41, node78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node36.isIn();
        boolean boolean40 = node9.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        boolean boolean70 = node57.isEquivalentToTyped(node69);
        boolean boolean71 = node57.isNull();
        com.google.javascript.rhino.Node node72 = node46.copyInformationFromForTree(node57);
        node46.detachChildren();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(48, node46);
        com.google.javascript.rhino.Node node75 = node74.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        boolean boolean82 = node81.isIn();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        boolean boolean88 = node87.isIn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(47, node81, node87);
        boolean boolean90 = node89.isRegExp();
        com.google.javascript.rhino.Node node91 = node89.cloneNode();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoFrom(node89);
        node75.setOptionalArg(true);
        com.google.javascript.rhino.Node node95 = node9.useSourceInfoFrom(node75);
        java.lang.Object obj97 = node9.getProp(8);
        int int98 = node9.getChildCount();
        boolean boolean99 = node9.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node5.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor35 = ancestorIterable34.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator36 = ancestorIterable34.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor37 = ancestorIterable34.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor38 = ancestorIterable34.iterator();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertNotNull(nodeItor35);
        org.junit.Assert.assertNotNull(nodeSpliterator36);
        org.junit.Assert.assertNotNull(nodeItor37);
        org.junit.Assert.assertNotNull(nodeItor38);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        int int31 = node4.getType();
        boolean boolean32 = node4.isVar();
        boolean boolean33 = node4.isHook();
        int int34 = node4.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNumber();
        boolean boolean38 = node4.isAssignAdd();
        node4.setChangeTime(37);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node4.isParamList();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isCast();
        com.google.javascript.rhino.InputId inputId11 = node9.getInputId();
        node9.setType((int) 'a');
        java.util.Set<java.lang.String> strSet14 = node9.getDirectives();
        boolean boolean15 = node9.isWith();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node31.isEquivalentToTyped(node43);
        boolean boolean45 = node31.isNull();
        com.google.javascript.rhino.Node node46 = node20.copyInformationFromForTree(node31);
        boolean boolean47 = node31.isSetterDef();
        int int48 = node31.getLength();
        boolean boolean49 = node31.isName();
        com.google.javascript.rhino.Node node50 = node9.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean51 = node31.isStringKey();
        node4.addChildrenToFront(node31);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node node64 = node57.getNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = node31.checkTreeEquals(node64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node64);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        int int11 = node4.getSourcePosition();
        boolean boolean12 = node4.isExprResult();
        boolean boolean13 = node4.isBreak();
        boolean boolean14 = node4.isLabel();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node22.isFor();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, node22, 0, 0);
        boolean boolean33 = node22.isNew();
        boolean boolean34 = node22.isCall();
        node22.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node37 = node5.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node38 = node5.getNext();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node50.children();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        node79.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node83 = node50.useSourceInfoFromForTree(node79);
        boolean boolean84 = node79.isLabel();
        com.google.javascript.rhino.Node node85 = node4.copyInformationFrom(node79);
        node79.setSourceEncodedPosition(38);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node38.isEquivalentToTyped(node50);
        boolean boolean52 = node50.isAssignAdd();
        boolean boolean53 = node50.isInstanceOf();
        java.lang.String str54 = node50.toStringTree();
        boolean boolean55 = node22.hasChild(node50);
        node22.setType(48);
        boolean boolean58 = node22.isWhile();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ERROR\n" + "'", str54, "ERROR\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(36);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertNotNull(sideEffectFlags2);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isCall();
        boolean boolean16 = node5.isRegExp();
        boolean boolean17 = node5.isCatch();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node88 = node82.useSourceInfoIfMissingFrom(node87);
        boolean boolean89 = node76.isEquivalentToTyped(node88);
        boolean boolean90 = node88.isAssignAdd();
        com.google.javascript.rhino.Node node91 = node88.getParent();
        boolean boolean92 = node88.isInc();
        boolean boolean93 = node88.isSwitch();
        boolean boolean94 = node88.isSyntheticBlock();
        boolean boolean95 = node16.isEquivalentTo(node88);
        boolean boolean96 = node88.isFunction();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "", (-1), (int) (byte) 10);
        com.google.javascript.rhino.InputId inputId5 = node4.getInputId();
        boolean boolean6 = node4.isBlock();
        boolean boolean7 = node4.hasMoreThanOneChild();
        boolean boolean8 = node4.isName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(inputId5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) -1, "", 43, 40);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = node4.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node5.getJSDocInfo();
        boolean boolean21 = node5.isFalse();
        int int22 = node5.getSourceOffset();
        boolean boolean23 = node5.hasOneChild();
        boolean boolean24 = node5.hasOneChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node4.getJsDocBuilderForNode();
        boolean boolean15 = node4.isAdd();
        boolean boolean16 = node4.isDec();
        com.google.javascript.rhino.InputId inputId17 = node4.getInputId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = node4.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(inputId17);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isIn();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        boolean boolean33 = node20.isEquivalentToTyped(node32);
        boolean boolean34 = node20.isNull();
        com.google.javascript.rhino.Node node35 = node9.copyInformationFromForTree(node20);
        boolean boolean36 = node20.isCase();
        node20.removeProp(16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node20.siblings();
        node4.addChildToBack(node20);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags41 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.setSideEffectFlags(sideEffectFlags41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        java.lang.String str17 = node9.toString(true, false, true);
        boolean boolean18 = node9.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6, 2, (int) ' ');
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(4, nodeArray6);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(55, nodeArray6, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51, nodeArray6);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray6);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(42, "ERROR [change_time: 55]");
        boolean boolean3 = node2.isFunction();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        java.lang.Object obj34 = node4.getProp(4);
        int int35 = node4.getType();
        boolean boolean36 = node4.isContinue();
        java.lang.String str37 = node4.toString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ERROR" + "'", str37, "ERROR");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        node4.putBooleanProp(55, true);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isCast();
        com.google.javascript.rhino.InputId inputId20 = node18.getInputId();
        node18.setType((int) 'a');
        java.util.Set<java.lang.String> strSet23 = node18.getDirectives();
        boolean boolean24 = node18.isWith();
        boolean boolean25 = node18.isAssignAdd();
        boolean boolean26 = node18.isTrue();
        node4.addChildToFront(node18);
        // The following exception was thrown during execution in test generation
        try {
            node4.setDouble((double) 38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ASSIGN_MOD [inferred: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(53, "ERROR [change_time: 55]", 56, 0);
        boolean boolean5 = node4.isSwitch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = node6.useSourceInfoIfMissingFrom(node11);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        boolean boolean24 = node11.isEquivalentToTyped(node23);
        boolean boolean25 = node11.isNull();
        java.lang.String str26 = node11.getSourceFileName();
        node11.setSourceFileForTesting("ERROR [change_time: 55]");
        boolean boolean29 = node1.isEquivalentToTyped(node11);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node35.isFor();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, node35, 0, 0);
        boolean boolean46 = node35.isString();
        boolean boolean47 = node35.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node57.putIntProp(2, 10);
        boolean boolean62 = node57.isNull();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node68.isFor();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node68, 0, 0);
        boolean boolean79 = node68.isString();
        int int80 = node68.getSourceOffset();
        boolean boolean81 = node68.isVarArgs();
        com.google.javascript.rhino.Node node82 = node57.copyInformationFromForTree(node68);
        boolean boolean83 = node68.isReturn();
        com.google.javascript.rhino.Node node84 = node35.copyInformationFromForTree(node68);
        boolean boolean85 = node35.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node86 = node11.clonePropsFrom(node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean71 = node69.getBooleanProp((int) '#');
        int int72 = node69.getChangeTime();
        int int73 = node69.getCharno();
        boolean boolean74 = node69.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node65.isThis();
        int int68 = node65.getIntProp(30);
        boolean boolean69 = node65.isRegExp();
        boolean boolean70 = node65.isBreak();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        node33.putIntProp(29, 0);
        node33.setType((int) ' ');
        boolean boolean39 = node33.isName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray2, 2, (int) ' ');
        java.lang.String str9 = node8.getQualifiedName();
        int int10 = node8.getLineno();
        node8.setType(50);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "", (-1), (int) (byte) 10);
        com.google.javascript.rhino.InputId inputId5 = node4.getInputId();
        boolean boolean6 = node4.isBlock();
        boolean boolean7 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node29.isAssignAdd();
        com.google.javascript.rhino.Node node32 = node29.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node29.getJsDocBuilderForNode();
        java.lang.String str34 = node29.toString();
        boolean boolean35 = node29.isSyntheticBlock();
        boolean boolean36 = node4.isEquivalentToShallow(node29);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(inputId5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ERROR" + "'", str34, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        java.lang.Object obj34 = node4.getProp(4);
        int int35 = node4.getType();
        boolean boolean36 = node4.isContinue();
        boolean boolean37 = node4.isCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node22.isFor();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, node22, 0, 0);
        boolean boolean33 = node22.isNew();
        boolean boolean34 = node22.isCall();
        node22.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node37 = node5.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean38 = node5.isName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        int int31 = node4.getType();
        boolean boolean32 = node4.isVar();
        boolean boolean33 = node4.isThis();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        boolean boolean56 = node43.isEquivalentToTyped(node55);
        boolean boolean57 = node43.isNull();
        java.lang.String str58 = node43.getSourceFileName();
        node43.setSourceFileForTesting("ERROR [change_time: 55]");
        boolean boolean61 = node4.isEquivalentToShallow(node43);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isNoSideEffectsCall();
        int int40 = node2.getIntProp(2);
        boolean boolean41 = node2.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSType jSType42 = node2.getJSType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSType42);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.jstype.JSType jSType11 = node9.getJSType();
        boolean boolean12 = node9.isOr();
        node9.setSourceEncodedPositionForTree(23);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        node15.setVarArgs(false);
        // The following exception was thrown during execution in test generation
        try {
            node15.setDouble((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        int int2 = node1.getSideEffectFlags();
        boolean boolean3 = node1.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node45.isNull();
        com.google.javascript.rhino.Node node60 = node34.copyInformationFromForTree(node45);
        boolean boolean61 = node45.isSetterDef();
        int int62 = node45.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node45.children();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        node74.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node78 = node45.useSourceInfoFromForTree(node74);
        boolean boolean79 = node74.isLabel();
        boolean boolean80 = node29.isEquivalentToTyped(node74);
        int int81 = node29.getSideEffectFlags();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        boolean boolean88 = node87.isCast();
        com.google.javascript.rhino.InputId inputId89 = node87.getInputId();
        node87.setType((int) 'a');
        java.util.Set<java.lang.String> strSet92 = node87.getDirectives();
        node87.setChangeTime(4);
        boolean boolean96 = node87.getBooleanProp(36);
        node29.putProp((int) '4', (java.lang.Object) node87);
        node87.setVarArgs(false);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(inputId89);
        org.junit.Assert.assertNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 0, 31);
        boolean boolean4 = node3.isTry();
        boolean boolean5 = node3.isTrue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        boolean boolean53 = node49.isScript();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.jstype.JSType jSType46 = node37.getJSType();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(jSType46);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        boolean boolean13 = node12.isIn();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(47, node6, node12);
        node6.detachChildren();
        boolean boolean16 = node6.isCall();
        boolean boolean17 = node6.hasOneChild();
        boolean boolean18 = node6.isQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        boolean boolean24 = node23.isIn();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node34.isEquivalentToTyped(node46);
        boolean boolean48 = node34.isNull();
        com.google.javascript.rhino.Node node49 = node23.copyInformationFromForTree(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        node23.setStaticSourceFile(staticSourceFile50);
        java.lang.String str55 = node23.toString(true, false, true);
        boolean boolean56 = node23.isNew();
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node68 = node62.useSourceInfoIfMissingFrom(node67);
        boolean boolean69 = node62.isFor();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(0, node62, 0, 0);
        boolean boolean73 = node62.isString();
        int int74 = node62.getSourceOffset();
        boolean boolean75 = node62.isVarArgs();
        boolean boolean76 = node62.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node62.getJSDocInfo();
        boolean boolean78 = node62.isSyntheticBlock();
        int int79 = node62.getSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(57, node6, node23, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR" + "'", str55, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        node15.setSourceEncodedPosition((int) (short) 100);
        boolean boolean35 = node15.isAnd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("ERROR\n", 4095, (int) (short) -1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        node49.putBooleanProp(43, false);
        boolean boolean73 = node49.isNumber();
        boolean boolean74 = node49.isSwitch();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node49.siblings();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "REGEXP ", 43, 54);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray7, 1, 4095);
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isName();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node32.isEquivalentToTyped(node44);
        boolean boolean46 = node32.isNull();
        com.google.javascript.rhino.Node node47 = node21.copyInformationFromForTree(node32);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node21.setStaticSourceFile(staticSourceFile48);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        boolean boolean55 = node54.isIn();
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node65.isEquivalentToTyped(node77);
        boolean boolean79 = node65.isNull();
        com.google.javascript.rhino.Node node80 = node54.copyInformationFromForTree(node65);
        boolean boolean81 = node65.isSetterDef();
        int int82 = node65.getLength();
        boolean boolean83 = node65.isName();
        java.lang.String str84 = node65.getSourceFileName();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((-1), node21, node65);
        boolean boolean87 = node85.getBooleanProp((int) '#');
        int int88 = node85.getChangeTime();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildBefore(node13, node85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        com.google.javascript.rhino.Node node21 = node5.getAncestor(8);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray25, 2, (int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(15, nodeArray25);
        node5.addChildToFront(node32);
        boolean boolean34 = node5.isBlock();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.toString();
        node5.setType((int) (short) 100);
        boolean boolean20 = node5.isUnscopedQualifiedName();
        boolean boolean21 = node5.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isSyntheticBlock();
        node21.setSourceEncodedPosition((int) '4');
        node21.detachChildren();
        int int28 = node21.getSourcePosition();
        boolean boolean29 = node21.isThis();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 57, 53);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node3.getExistingIntProp(54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 54");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        boolean boolean15 = node13.isGetElem();
        boolean boolean16 = node13.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        boolean boolean26 = node21.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            node21.setDouble((double) 23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node5.siblings();
        boolean boolean56 = node5.isTypeOf();
        boolean boolean57 = node5.isString();
        node5.detachChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        com.google.javascript.rhino.Node node21 = node13.getFirstChild();
        com.google.javascript.rhino.Node node22 = node13.getFirstChild();
        boolean boolean23 = node22.isWhile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = null;
        com.google.javascript.rhino.Node node25 = node22.setJSDocInfo(jSDocInfo24);
        boolean boolean26 = node22.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        boolean boolean34 = node15.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        node4.removeProp(43);
        org.junit.Assert.assertNotNull(nodeArray1);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 1, 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isCast();
        com.google.javascript.rhino.InputId inputId10 = node8.getInputId();
        node8.setType((int) 'a');
        java.util.Set<java.lang.String> strSet13 = node8.getDirectives();
        boolean boolean14 = node8.isInc();
        boolean boolean15 = node8.isSetterDef();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFromForTree(node8);
        boolean boolean17 = node8.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(15, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(15, nodeArray4, 42, 23);
        node14.removeProp(50);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(4, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(55, nodeArray5, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(51, nodeArray5);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node28 = node16.getChildBefore(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        node15.removeProp(16);
        node15.putBooleanProp(16, false);
        int int37 = node15.getLineno();
        com.google.javascript.rhino.Node node38 = node15.cloneNode();
        boolean boolean39 = node38.isInc();
        node38.setType(0);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        boolean boolean41 = node10.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = null;
        com.google.javascript.rhino.Node node43 = node10.setJSDocInfo(jSDocInfo42);
        node43.setVarArgs(true);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(39);
        node1.setType((int) (short) 1);
        boolean boolean4 = node1.isInc();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16, "NUMBER 4095.0");
        boolean boolean3 = node2.isWhile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node5.getJSDocInfo();
        boolean boolean21 = node5.isSyntheticBlock();
        int int22 = node5.getSideEffectFlags();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node5.getJsDocBuilderForNode();
        boolean boolean24 = node5.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = node5.isEquivalentToShallow(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        boolean boolean46 = node15.isName();
        node15.detachChildren();
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        boolean boolean60 = node53.isFor();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(0, node53, 0, 0);
        boolean boolean64 = node53.isString();
        int int65 = node53.getSourceOffset();
        boolean boolean66 = node53.isObjectLit();
        boolean boolean67 = node53.isCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node68 = node15.getChildBefore(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        boolean boolean46 = node15.isName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node15.children();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node15.setStaticSourceFile(staticSourceFile48);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node5.siblings();
        com.google.javascript.rhino.Node node56 = node5.removeChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertNull(node56);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags1.setThrows();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node node59 = node52.copyInformationFromForTree(node57);
        java.lang.Object obj61 = node57.getProp((int) '4');
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(8);
        com.google.javascript.rhino.Node node2 = node1.getFirstChild();
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        node15.setVarArgs(true);
        java.lang.String str50 = node15.getQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        node62.setLineno((int) (short) 10);
        boolean boolean67 = node62.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node53.setStaticSourceFile(staticSourceFile80);
        com.google.javascript.rhino.Node node82 = node15.clonePropsFrom(node53);
        boolean boolean83 = node82.hasMoreThanOneChild();
        boolean boolean84 = node82.isNot();
        // The following exception was thrown during execution in test generation
        try {
            node82.setDouble((double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6, 2, (int) ' ');
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(4, nodeArray6);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(55, nodeArray6, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51, nodeArray6);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(30, nodeArray6, (int) (byte) -1, 12);
        boolean boolean21 = node20.isInstanceOf();
        int int22 = node20.getLineno();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        boolean boolean60 = node57.isIn();
        node15.addChildToBack(node57);
        boolean boolean62 = node15.isStringKey();
        int int63 = node15.getType();
        boolean boolean64 = node15.isNew();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node22.isFor();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, node22, 0, 0);
        boolean boolean33 = node22.isNew();
        boolean boolean34 = node22.isCall();
        node22.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node37 = node5.useSourceInfoIfMissingFromForTree(node22);
        java.lang.Class<?> wildcardClass38 = node5.getClass();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(47, node40, node46);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node50 = node48.cloneNode();
        com.google.javascript.rhino.Node node51 = node34.useSourceInfoFrom(node48);
        boolean boolean52 = node51.isNE();
        int int53 = node51.getCharno();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        java.util.Set<java.lang.String> strSet14 = node4.getDirectives();
        boolean boolean15 = node4.isStringKey();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node4.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node23 = node21.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node23.setSideEffectFlags(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        boolean boolean32 = node30.isInc();
        boolean boolean33 = node30.isOr();
        boolean boolean34 = node30.isCall();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        int int66 = node39.getType();
        boolean boolean67 = node39.hasOneChild();
        node30.addChildToFront(node39);
        int int69 = node39.getLineno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isLabelName();
        boolean boolean44 = node13.isInc();
        boolean boolean45 = node13.isAssign();
        com.google.javascript.rhino.jstype.JSType jSType46 = node13.getJSType();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType46);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node node62 = node38.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node5.useSourceInfoIfMissingFrom(node62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = node62.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        boolean boolean25 = node21.isSetterDef();
        boolean boolean26 = node21.isGetterDef();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        int int59 = node42.getLength();
        boolean boolean60 = node42.isDebugger();
        int int61 = node42.getType();
        node42.setOptionalArg(false);
        com.google.javascript.rhino.Node node64 = node21.useSourceInfoFrom(node42);
        boolean boolean65 = node21.mayMutateArguments();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        java.lang.String str15 = node4.toString(true, false, false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ERROR" + "'", str15, "ERROR");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node5.siblings();
        java.lang.String str56 = node5.toStringTree();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ERROR\n" + "'", str56, "ERROR\n");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isSetterDef();
        boolean boolean13 = node4.getBooleanProp((int) (short) 0);
        boolean boolean14 = node4.isLocalResultCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isNew();
        boolean boolean17 = node5.isCall();
        java.lang.String str18 = node5.getSourceFileName();
        boolean boolean19 = node5.isDebugger();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int12 = node4.getLength();
        boolean boolean13 = node4.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        int int22 = node5.getSourcePosition();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        boolean boolean29 = node28.isIn();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        boolean boolean52 = node39.isEquivalentToTyped(node51);
        boolean boolean53 = node39.isNull();
        com.google.javascript.rhino.Node node54 = node28.copyInformationFromForTree(node39);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node28.setStaticSourceFile(staticSourceFile55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        boolean boolean62 = node61.isIn();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node72.isEquivalentToTyped(node84);
        boolean boolean86 = node72.isNull();
        com.google.javascript.rhino.Node node87 = node61.copyInformationFromForTree(node72);
        boolean boolean88 = node72.isSetterDef();
        int int89 = node72.getLength();
        boolean boolean90 = node72.isName();
        java.lang.String str91 = node72.getSourceFileName();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node((-1), node28, node72);
        node72.putBooleanProp(43, false);
        node72.setChangeTime(55);
        boolean boolean98 = node72.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node99 = node5.srcrefTree(node72);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 4095.0");
        boolean boolean2 = node1.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("ERROR 0\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        node33.setSourceEncodedPositionForTree((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isCast();
        com.google.javascript.rhino.InputId inputId43 = node41.getInputId();
        node41.setType((int) 'a');
        java.util.Set<java.lang.String> strSet46 = node41.getDirectives();
        boolean boolean47 = node41.isInc();
        boolean boolean48 = node41.isScript();
        boolean boolean49 = node41.isLabelName();
        // The following exception was thrown during execution in test generation
        try {
            node33.addChildAfter(node36, node41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(inputId43);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        boolean boolean65 = node62.isFor();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node71.isFor();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(0, node71, 0, 0);
        boolean boolean82 = node81.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        com.google.javascript.rhino.Node node84 = node81.setJSDocInfo(jSDocInfo83);
        boolean boolean85 = node62.isEquivalentToShallow(node81);
        boolean boolean86 = node81.isHook();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.clearAllFlags();
        boolean boolean3 = sideEffectFlags2.areAllFlagsSet();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node10.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node24 = node18.useSourceInfoIfMissingFrom(node23);
        node10.addChildToFront(node23);
        boolean boolean26 = node23.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        boolean boolean39 = node2.isNE();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node2.getJsDocBuilderForNode();
        fileLevelJsDocBuilder40.append("ERROR");
        fileLevelJsDocBuilder40.append("EQ \n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder40);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str10 = node4.toString(true, true, false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node4.siblings();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR" + "'", str10, "ERROR");
        org.junit.Assert.assertNotNull(nodeIterable11);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node60.isWith();
        boolean boolean62 = node60.isParamList();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node72.isEquivalentToTyped(node84);
        boolean boolean86 = node72.isNull();
        java.lang.String str87 = node72.getSourceFileName();
        boolean boolean88 = node72.isFor();
        com.google.javascript.rhino.Node node89 = node60.useSourceInfoIfMissingFromForTree(node72);
        com.google.javascript.rhino.Node node90 = node60.getNext();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(node90);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, node4, (int) ' ', (int) '#');
        boolean boolean8 = node7.isDec();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        java.lang.String str38 = node35.toString();
        node35.setSourceEncodedPositionForTree((int) (short) 100);
        java.lang.String str41 = node35.getQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 4095.0" + "'", str38, "NUMBER 4095.0");
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        boolean boolean55 = node5.isBreak();
        int int56 = node5.getLength();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isInstanceOf();
        boolean boolean25 = node21.isThis();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node53.setStaticSourceFile(staticSourceFile80);
        com.google.javascript.rhino.Node node82 = node15.clonePropsFrom(node53);
        // The following exception was thrown during execution in test generation
        try {
            node82.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isScript();
        com.google.javascript.rhino.Node node21 = node5.getLastChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        int int39 = node27.getSourceOffset();
        boolean boolean40 = node27.isVarArgs();
        boolean boolean41 = node27.isDo();
        int int42 = node5.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        boolean boolean53 = node52.isIn();
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        boolean boolean76 = node63.isEquivalentToTyped(node75);
        boolean boolean77 = node63.isNull();
        com.google.javascript.rhino.Node node78 = node52.copyInformationFromForTree(node63);
        boolean boolean79 = node63.isCase();
        node63.removeProp(16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node63.siblings();
        node47.addChildToBack(node63);
        com.google.javascript.rhino.Node node84 = node5.copyInformationFrom(node47);
        java.lang.Object obj86 = node47.getProp((int) (byte) 10);
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString((-1), "", (int) (short) -1, 40);
        boolean boolean92 = node91.isDelProp();
        boolean boolean93 = node91.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            node47.removeChild(node91);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        boolean boolean42 = node40.isAnd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        int int38 = node18.getChangeTime();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags0.clearAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.isInstanceOf();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node22.setJSType(jSType26);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 100, node22, (int) (short) -1, 46);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        int int32 = node15.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = null;
        com.google.javascript.rhino.Node node34 = node15.setJSDocInfo(jSDocInfo33);
        boolean boolean35 = node34.isBreak();
        node34.putIntProp(2, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = node34.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpected prop id 2");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean67 = node62.getBooleanProp(15);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        boolean boolean34 = node33.isOr();
        int int35 = node33.getChildCount();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.hasMoreThanOneChild();
        boolean boolean11 = node4.isParamList();
        int int12 = node4.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        java.lang.String str34 = node15.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node40.isFor();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(0, node40, 0, 0);
        boolean boolean51 = node40.isString();
        int int52 = node40.getSourceOffset();
        boolean boolean53 = node40.isVarArgs();
        boolean boolean54 = node40.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node40.getJSDocInfo();
        boolean boolean56 = node40.isSyntheticBlock();
        boolean boolean57 = node15.isEquivalentToShallow(node40);
        boolean boolean58 = node15.isName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setSourceEncodedPositionForTree(36);
        com.google.javascript.rhino.Node node37 = node34.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node37.setOptionalArg(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) 'a', 56, (int) (byte) 10);
        boolean boolean4 = node3.isIn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        java.util.Set<java.lang.String> strSet5 = node4.getDirectives();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node4.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        boolean boolean19 = node12.isFor();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(0, node12, 0, 0);
        boolean boolean23 = node12.isReturn();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node35 = node29.useSourceInfoIfMissingFrom(node34);
        boolean boolean36 = node29.isFor();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node29, 0, 0);
        boolean boolean40 = node29.isNew();
        boolean boolean41 = node29.isCall();
        node29.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node44 = node12.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean45 = node29.isDelProp();
        boolean boolean46 = node29.isTry();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildrenToBack(node29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        boolean boolean12 = node4.isOnlyModifiesThisCall();
        node4.removeProp((int) (short) 10);
        boolean boolean15 = node4.isThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node64.isAssignAdd();
        boolean boolean67 = node64.hasChildren();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(32, node64, 47, 32);
        node40.putProp(48, (java.lang.Object) node64);
        com.google.javascript.rhino.Node node72 = node40.getFirstChild();
        java.lang.String str73 = node9.checkTreeEquals(node72);
        boolean boolean74 = node72.isFor();
        boolean boolean75 = node72.isComma();
        node72.setSourceEncodedPositionForTree(55);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node72.setJSType(jSType78);
        // The following exception was thrown during execution in test generation
        try {
            node72.setString("ERROR 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR 0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str7 = node4.getSourceFileName();
        int int8 = node4.getType();
        java.lang.Object obj10 = node4.getProp(10);
        boolean boolean11 = node4.isQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        boolean boolean17 = node16.isIn();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node27.isNull();
        com.google.javascript.rhino.Node node42 = node16.copyInformationFromForTree(node27);
        boolean boolean43 = node42.isTypeOf();
        boolean boolean44 = node42.isInc();
        boolean boolean45 = node42.isOr();
        boolean boolean46 = node42.isCall();
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node62.isEquivalentToTyped(node74);
        boolean boolean76 = node62.isNull();
        com.google.javascript.rhino.Node node77 = node51.copyInformationFromForTree(node62);
        int int78 = node51.getType();
        boolean boolean79 = node51.hasOneChild();
        node42.addChildToFront(node51);
        com.google.javascript.rhino.Node node81 = node42.getFirstChild();
        node4.addChildToBack(node42);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node13.srcref(node19);
        boolean boolean21 = node13.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node34 = node15.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node35 = node34.getLastSibling();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isCatch();
        boolean boolean19 = node5.isOnlyModifiesArgumentsCall();
        com.google.javascript.rhino.jstype.JSType jSType20 = node5.getJSType();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSType20);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node60.isWith();
        boolean boolean62 = node60.isParamList();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node72.isEquivalentToTyped(node84);
        boolean boolean86 = node72.isNull();
        java.lang.String str87 = node72.getSourceFileName();
        boolean boolean88 = node72.isFor();
        com.google.javascript.rhino.Node node89 = node60.useSourceInfoIfMissingFromForTree(node72);
        node89.setSourceFileForTesting("ERROR");
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node88 = node82.useSourceInfoIfMissingFrom(node87);
        boolean boolean89 = node76.isEquivalentToTyped(node88);
        boolean boolean90 = node88.isAssignAdd();
        com.google.javascript.rhino.Node node91 = node88.getParent();
        boolean boolean92 = node88.isInc();
        boolean boolean93 = node88.isSwitch();
        boolean boolean94 = node88.isSyntheticBlock();
        boolean boolean95 = node16.isEquivalentTo(node88);
        int int96 = node88.getChildCount();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node11 = node9.getLastSibling();
        com.google.javascript.rhino.Node node13 = node9.getAncestor(15);
        int int14 = node9.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node10.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node24 = node18.useSourceInfoIfMissingFrom(node23);
        node10.addChildToFront(node23);
        boolean boolean26 = node10.isCast();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isOptionalArg();
        java.lang.String str47 = node13.toString(false, false, false);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "REGEXP" + "'", str47, "REGEXP");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node4.isSyntheticBlock();
        boolean boolean32 = node4.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.setAllFlags();
        int int4 = sideEffectFlags3.valueOf();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node16.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder66.append("ERROR");
        fileLevelJsDocBuilder66.append("");
        fileLevelJsDocBuilder66.append("");
        fileLevelJsDocBuilder66.append("NUMBER 4095.0");
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        node21.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType28 = node21.getJSType();
        node21.setLength((int) (short) 100);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType28);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        boolean boolean25 = node21.isSetterDef();
        node21.addSuppression("ERROR\n");
        com.google.javascript.rhino.jstype.JSType jSType28 = node21.getJSType();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType28);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node5.hasOneChild();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        boolean boolean38 = node37.isIn();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        boolean boolean61 = node48.isEquivalentToTyped(node60);
        boolean boolean62 = node48.isNull();
        com.google.javascript.rhino.Node node63 = node37.copyInformationFromForTree(node48);
        boolean boolean64 = node48.isSetterDef();
        int int65 = node48.getLength();
        boolean boolean66 = node48.isName();
        java.lang.String str67 = node48.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node73.isFor();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(0, node73, 0, 0);
        boolean boolean84 = node73.isString();
        int int85 = node73.getSourceOffset();
        boolean boolean86 = node73.isVarArgs();
        boolean boolean87 = node73.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node73.getJSDocInfo();
        boolean boolean89 = node73.isSyntheticBlock();
        boolean boolean90 = node48.isEquivalentToShallow(node73);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(29, node5, node73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = node6.useSourceInfoIfMissingFrom(node11);
        boolean boolean13 = node6.isFor();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node6, 0, 0);
        java.util.Set<java.lang.String> strSet17 = node6.getDirectives();
        boolean boolean18 = node6.isExprResult();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray23, 2, (int) ' ');
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(4, nodeArray23);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(55, nodeArray23, (int) (byte) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 1, node6, node33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) '#', nodeArray4, 2, 37);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4, "ERROR [change_time: 55]");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags2.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags5.clearAllFlags();
        int int7 = sideEffectFlags6.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = sideEffectFlags6.clearAllFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertNotNull(sideEffectFlags8);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        java.lang.String str23 = node4.checkTreeEquals(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node45.isAssignAdd();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        boolean boolean49 = node45.isInc();
        boolean boolean50 = node45.isSwitch();
        node45.addSuppression("hi!");
        boolean boolean53 = node45.isAssign();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFromForTree(node45);
        node45.putIntProp(10, (int) (short) 100);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        java.lang.String str34 = node15.getSourceFileName();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        boolean boolean47 = node40.isFor();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(0, node40, 0, 0);
        boolean boolean51 = node40.isString();
        int int52 = node40.getSourceOffset();
        boolean boolean53 = node40.isVarArgs();
        boolean boolean54 = node40.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node40.getJSDocInfo();
        boolean boolean56 = node40.isSyntheticBlock();
        boolean boolean57 = node15.isEquivalentToShallow(node40);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node15.getStaticSourceFile();
        node15.setSourceFileForTesting("EQ \n");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(staticSourceFile58);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str10 = node4.toString(true, true, false);
        node4.setType(0);
        boolean boolean13 = node4.isContinue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR" + "'", str10, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        boolean boolean34 = node5.isAssignAdd();
        boolean boolean35 = node5.hasChildren();
        boolean boolean37 = node5.getBooleanProp(53);
        boolean boolean38 = node5.isCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNew();
        boolean boolean38 = node4.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.hasMoreThanOneChild();
        boolean boolean11 = node4.isParamList();
        java.util.Set<java.lang.String> strSet12 = node4.getDirectives();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        boolean boolean25 = node9.isFor();
        boolean boolean26 = node9.isVarArgs();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        node42.setVarArgs(false);
        boolean boolean61 = node42.isTrue();
        node9.addChildrenToFront(node42);
        boolean boolean63 = node42.isFromExterns();
        boolean boolean64 = node42.isHook();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("ERROR 0\n", 53, (int) (byte) -1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isCast();
        boolean boolean39 = node2.isFunction();
        boolean boolean40 = node2.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags0.setAllFlags();
        int int5 = sideEffectFlags4.valueOf();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node10.isNew();
        int int14 = node10.getIntProp(8);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        boolean boolean26 = node25.isVoid();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node48.isAssignAdd();
        boolean boolean51 = node48.hasChildren();
        boolean boolean52 = node48.isSetterDef();
        node48.addSuppression("ERROR\n");
        boolean boolean55 = node25.isEquivalentToShallow(node48);
        boolean boolean56 = node25.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        com.google.javascript.rhino.Node node58 = node25.setJSDocInfo(jSDocInfo57);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 100, node10, node25);
        node59.addSuppression("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        node15.removeProp(16);
        node15.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node15.getAncestors();
        com.google.javascript.rhino.InputId inputId60 = node15.getInputId();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertNull(inputId60);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node5.getAncestors();
        boolean boolean35 = node5.isFalse();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node node47 = node45.getLastSibling();
        com.google.javascript.rhino.Node node49 = node45.getAncestor(15);
        boolean boolean50 = node5.isEquivalentTo(node45);
        boolean boolean51 = node45.isDo();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node1.detachChildren();
        boolean boolean3 = node1.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 53, 39);
        boolean boolean4 = node3.isInc();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = node13.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: REGEXP 0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        java.lang.String str34 = node15.getSourceFileName();
        boolean boolean35 = node15.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        boolean boolean42 = node40.isContinue();
        boolean boolean43 = node40.isDelProp();
        node15.addChildrenToFront(node40);
        boolean boolean45 = node15.isNot();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(15, nodeArray3);
        com.google.javascript.rhino.Node node12 = node10.getAncestor((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = node10.getExistingIntProp(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 43");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        boolean boolean53 = node52.isGetterDef();
        int int54 = node52.getType();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node13.srcref(node19);
        boolean boolean21 = node19.hasMoreThanOneChild();
        node19.setString("");
        java.lang.Object obj25 = node19.getProp(52);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        boolean boolean31 = node5.isGetElem();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node5.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator33 = nodeIterable32.spliterator();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(nodeSpliterator33);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node11 = node10.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = node11.isInstanceOf();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        boolean boolean7 = node5.isContinue();
        java.lang.String str11 = node5.toString(true, true, false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4095, node5, 8, (-1));
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isCase();
        int int47 = node30.getChangeTime();
        com.google.javascript.rhino.Node node48 = node5.clonePropsFrom(node30);
        node30.setType((-1));
        int int51 = node30.getSourceOffset();
        boolean boolean52 = node30.isReturn();
        boolean boolean53 = node30.isInstanceOf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR" + "'", str11, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        boolean boolean33 = node5.isDec();
        boolean boolean34 = node5.isVar();
        boolean boolean35 = node5.isAdd();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        boolean boolean50 = node38.isReturn();
        int int51 = node15.getIndexOfChild(node38);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        boolean boolean74 = node61.isEquivalentToTyped(node73);
        boolean boolean75 = node61.isNull();
        boolean boolean76 = node61.isInstanceOf();
        boolean boolean77 = node15.hasChild(node61);
        boolean boolean78 = node15.isOnlyModifiesThisCall();
        // The following exception was thrown during execution in test generation
        try {
            node15.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str10 = node4.toString(true, true, false);
        node4.setType(0);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        boolean boolean18 = node17.isCast();
        com.google.javascript.rhino.InputId inputId19 = node17.getInputId();
        boolean boolean20 = node17.isEmpty();
        node4.addChildrenToFront(node17);
        com.google.javascript.rhino.Node node22 = node17.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR" + "'", str10, "ERROR");
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        int int24 = node9.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoIfMissingFrom(node46);
        boolean boolean48 = node35.isEquivalentToTyped(node47);
        boolean boolean49 = node47.isAssignAdd();
        boolean boolean50 = node47.hasChildren();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(32, node47, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node65.isEquivalentToTyped(node77);
        boolean boolean79 = node77.isAssignAdd();
        boolean boolean80 = node77.hasChildren();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, node77, 47, 32);
        node53.putProp(48, (java.lang.Object) node77);
        com.google.javascript.rhino.Node node85 = node53.getFirstChild();
        com.google.javascript.rhino.Node node86 = node9.clonePropsFrom(node53);
        boolean boolean87 = node9.isCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isCast();
        com.google.javascript.rhino.InputId inputId7 = node5.getInputId();
        node5.setType((int) 'a');
        java.util.Set<java.lang.String> strSet10 = node5.getDirectives();
        boolean boolean11 = node5.isInc();
        boolean boolean12 = node5.isScript();
        boolean boolean13 = node5.isLabelName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) '4', node5);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        boolean boolean20 = node19.isIn();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        boolean boolean43 = node30.isEquivalentToTyped(node42);
        boolean boolean44 = node30.isNull();
        com.google.javascript.rhino.Node node45 = node19.copyInformationFromForTree(node30);
        boolean boolean46 = node30.isSetterDef();
        int int47 = node30.getLength();
        boolean boolean48 = node30.isName();
        boolean boolean49 = node30.wasEmptyNode();
        node30.setLength((int) 'a');
        node30.setType((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            node14.removeChild(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node4.getJsDocBuilderForNode();
        boolean boolean15 = node4.isAdd();
        boolean boolean16 = node4.isDec();
        com.google.javascript.rhino.InputId inputId17 = node4.getInputId();
        boolean boolean18 = node4.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.wasEmptyNode();
        boolean boolean35 = node15.isGetProp();
        boolean boolean36 = node15.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        boolean boolean44 = node43.isIn();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(47, node43, node49);
        java.lang.String str52 = node51.getSourceFileName();
        java.lang.String[] strArray54 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet55);
        boolean boolean58 = node51.isReturn();
        boolean boolean59 = node51.isNull();
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node71 = node65.useSourceInfoIfMissingFrom(node70);
        boolean boolean72 = node65.isFor();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node65, 0, 0);
        boolean boolean76 = node65.isString();
        boolean boolean77 = node65.isEmpty();
        boolean boolean78 = node65.isCatch();
        com.google.javascript.rhino.Node node79 = node51.srcrefTree(node65);
        boolean boolean80 = node51.isLabelName();
        boolean boolean81 = node51.isThis();
        node15.putProp(47, (java.lang.Object) boolean81);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node64.isAssignAdd();
        boolean boolean67 = node64.hasChildren();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(32, node64, 47, 32);
        node40.putProp(48, (java.lang.Object) node64);
        com.google.javascript.rhino.Node node72 = node40.getFirstChild();
        java.lang.String str73 = node9.checkTreeEquals(node72);
        boolean boolean74 = node72.isFor();
        boolean boolean75 = node72.isComma();
        java.lang.String str76 = node72.getQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        node37.setVarArgs(false);
        boolean boolean48 = node37.isFalse();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isCast();
        com.google.javascript.rhino.InputId inputId7 = node5.getInputId();
        node5.setType((int) 'a');
        java.util.Set<java.lang.String> strSet10 = node5.getDirectives();
        boolean boolean11 = node5.isInc();
        boolean boolean12 = node5.isScript();
        boolean boolean13 = node5.isLabelName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) '4', node5);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node14.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        node13.setSourceEncodedPositionForTree(4);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("REGEXP ");
        com.google.javascript.rhino.jstype.JSType jSType2 = node1.getJSType();
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        boolean boolean15 = node14.isIn();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(47, node8, node14);
        boolean boolean17 = node16.isRegExp();
        node16.putIntProp(0, (int) '4');
        boolean boolean21 = node16.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node22 = node1.removeChildAfter(node16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(jSType2);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        com.google.javascript.rhino.Node node54 = node15.cloneNode();
        node54.setType((int) (short) 1);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40, "", (int) (short) 100, 2);
        boolean boolean6 = node4.getBooleanProp(30);
        com.google.javascript.rhino.Node node7 = node4.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(15, nodeArray3);
        com.google.javascript.rhino.Node node11 = node10.getLastSibling();
        java.lang.String str12 = node11.toString();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LE 0" + "'", str12, "LE 0");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", (int) (byte) 1, 57);
        boolean boolean4 = node3.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node44.isLabel();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder50 = node44.new FileLevelJsDocBuilder();
        node44.setLength(0);
        boolean boolean53 = node44.isOptionalArg();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray3, 32, (-1));
        boolean boolean13 = node12.isBlock();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "REGEXP ", 2, (int) '4');
        boolean boolean5 = node4.mayMutateGlobalStateOrThrow();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setCharno(47);
        int int9 = node4.getLength();
        java.util.Set<java.lang.String> strSet10 = node4.getDirectives();
        com.google.javascript.rhino.Node node11 = node4.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = node4.getExistingIntProp(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 43");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node33.addChildrenToFront(node35);
        boolean boolean37 = node35.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        boolean boolean44 = node43.isIn();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node55 = node49.useSourceInfoIfMissingFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        boolean boolean67 = node54.isEquivalentToTyped(node66);
        boolean boolean68 = node54.isNull();
        com.google.javascript.rhino.Node node69 = node43.copyInformationFromForTree(node54);
        node43.detachChildren();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(48, node43);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 4095);
        node71.addChildrenToFront(node73);
        node71.removeProp((int) '4');
        boolean boolean77 = node71.isArrayLit();
        com.google.javascript.rhino.Node node78 = node35.useSourceInfoFromForTree(node71);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isCast();
        com.google.javascript.rhino.InputId inputId8 = node6.getInputId();
        node6.setType((int) 'a');
        java.util.Set<java.lang.String> strSet11 = node6.getDirectives();
        boolean boolean12 = node6.hasMoreThanOneChild();
        boolean boolean13 = node6.isDec();
        com.google.javascript.rhino.Node node14 = node6.getParent();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(47, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node17.children();
        boolean boolean19 = node17.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 1, node1, node14, node17, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(inputId8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node4.getJsDocBuilderForNode();
        boolean boolean15 = node4.isOptionalArg();
        boolean boolean16 = node4.isVoid();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = null;
        com.google.javascript.rhino.Node node35 = node16.setJSDocInfo(jSDocInfo34);
        boolean boolean36 = node35.isNumber();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        int int35 = node4.getLineno();
        boolean boolean36 = node4.isFunction();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node44.isVarArgs();
        node44.setSourceEncodedPosition((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = node44.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpected prop id 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = node6.useSourceInfoIfMissingFrom(node11);
        boolean boolean13 = node6.isFor();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node6, 0, 0);
        boolean boolean17 = node6.isString();
        boolean boolean18 = node6.isEmpty();
        boolean boolean19 = node6.isCatch();
        boolean boolean20 = node6.isOnlyModifiesArgumentsCall();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        boolean boolean33 = node26.isFor();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node26, 0, 0);
        boolean boolean37 = node26.isString();
        boolean boolean38 = node26.isEmpty();
        boolean boolean39 = node26.isCatch();
        boolean boolean40 = node26.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("EQ \n");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node6, node26, node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(42, 4, 56);
        boolean boolean4 = node3.isCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        node13.putIntProp(0, (int) '4');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(52, "hi!", 1, 52);
        com.google.javascript.rhino.Node node23 = node22.cloneNode();
        boolean boolean24 = node23.isLabelName();
        com.google.javascript.rhino.Node node25 = node13.useSourceInfoIfMissingFrom(node23);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.isSyntheticBlock();
        boolean boolean33 = node15.isSetterDef();
        boolean boolean34 = node15.isComma();
        boolean boolean35 = node15.isTrue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        int int24 = node9.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoIfMissingFrom(node46);
        boolean boolean48 = node35.isEquivalentToTyped(node47);
        boolean boolean49 = node47.isAssignAdd();
        boolean boolean50 = node47.hasChildren();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(32, node47, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node66 = node60.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node65.isEquivalentToTyped(node77);
        boolean boolean79 = node77.isAssignAdd();
        boolean boolean80 = node77.hasChildren();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(32, node77, 47, 32);
        node53.putProp(48, (java.lang.Object) node77);
        com.google.javascript.rhino.Node node85 = node53.getFirstChild();
        com.google.javascript.rhino.Node node86 = node9.clonePropsFrom(node53);
        com.google.javascript.rhino.Node node87 = node9.getParent();
        // The following exception was thrown during execution in test generation
        try {
            node87.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(node87);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setChangeTime(4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        node4.addChildToFront(node40);
        com.google.javascript.rhino.InputId inputId42 = null;
        node40.setInputId(inputId42);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        java.lang.String str18 = node9.toString(true, false, true);
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.rhino.Node node20 = node9.getChildBefore(node19);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ERROR" + "'", str18, "ERROR");
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(55, nodeArray4, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node14.new FileLevelJsDocBuilder();
        int int17 = node14.getIntProp((int) (short) 0);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray3, 32, (-1));
        boolean boolean13 = node12.isCall();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        boolean boolean47 = node29.isName();
        java.lang.String str48 = node29.getSourceFileName();
        boolean boolean49 = node29.isFromExterns();
        boolean boolean50 = node12.isEquivalentToShallow(node29);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node56.isFor();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(0, node56, 0, 0);
        boolean boolean67 = node66.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = null;
        com.google.javascript.rhino.Node node69 = node66.setJSDocInfo(jSDocInfo68);
        com.google.javascript.rhino.Node node70 = node12.useSourceInfoFrom(node66);
        int int71 = node12.getLineno();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node36.isIn();
        boolean boolean40 = node9.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        boolean boolean70 = node57.isEquivalentToTyped(node69);
        boolean boolean71 = node57.isNull();
        com.google.javascript.rhino.Node node72 = node46.copyInformationFromForTree(node57);
        node46.detachChildren();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(48, node46);
        com.google.javascript.rhino.Node node75 = node74.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        boolean boolean82 = node81.isIn();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        boolean boolean88 = node87.isIn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(47, node81, node87);
        boolean boolean90 = node89.isRegExp();
        com.google.javascript.rhino.Node node91 = node89.cloneNode();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoFrom(node89);
        node75.setOptionalArg(true);
        com.google.javascript.rhino.Node node95 = node9.useSourceInfoFrom(node75);
        java.lang.Object obj97 = node9.getProp(8);
        int int98 = node9.getChildCount();
        boolean boolean99 = node9.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        com.google.javascript.rhino.InputId inputId27 = node21.getInputId();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 100, 0, 8);
        boolean boolean32 = node31.isCatch();
        com.google.javascript.rhino.Node node33 = node21.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = node33.checkTreeEquals(node34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node4.setJSType(jSType33);
        boolean boolean35 = node4.isFromExterns();
        boolean boolean36 = node4.mayMutateGlobalStateOrThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node4.isString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.getFirstChild();
        node34.setLength((int) (short) 1);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isInstanceOf();
        boolean boolean25 = node21.isInstanceOf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40, "", (int) (short) 100, 2);
        boolean boolean6 = node4.getBooleanProp(30);
        boolean boolean7 = node4.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        boolean boolean15 = node9.isNull();
        boolean boolean16 = node9.isParamList();
        boolean boolean17 = node9.isAssignAdd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isNew();
        boolean boolean38 = node4.isSetterDef();
        com.google.javascript.rhino.Node node40 = node4.getAncestor(16);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        boolean boolean16 = node5.isReturn();
        // The following exception was thrown during execution in test generation
        try {
            node5.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        java.lang.Appendable appendable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "ERROR 0\n", 48, (int) (byte) 1);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 10);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4, 2, (int) ' ');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(55, nodeArray4, (int) (byte) 0, (int) (short) 0);
        node14.setSourceFileForTesting("ERROR [change_time: 55]");
        java.lang.Class<?> wildcardClass17 = node14.getClass();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node13.srcref(node19);
        node13.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node node11 = node9.getLastSibling();
        boolean boolean12 = node9.isIn();
        node9.setType(50);
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            node9.addChildrenToFront(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray3, 32, (-1));
        boolean boolean13 = node12.isAssignAdd();
        boolean boolean14 = node12.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        node15.putIntProp((int) (byte) 0, 42);
        boolean boolean37 = node15.isDec();
        boolean boolean38 = node15.isVoid();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags39 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags40 = sideEffectFlags39.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags41 = sideEffectFlags40.setThrows();
        boolean boolean42 = sideEffectFlags41.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags43 = sideEffectFlags41.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node15.setSideEffectFlags(sideEffectFlags43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags40);
        org.junit.Assert.assertNotNull(sideEffectFlags41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(sideEffectFlags43);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node30.isString();
        int int42 = node30.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node54 = node30.copyInformationFrom(node53);
        java.lang.String str55 = node54.toStringTree();
        com.google.javascript.rhino.Node node56 = node21.useSourceInfoIfMissingFromForTree(node54);
        boolean boolean57 = node54.isTrue();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR\n" + "'", str55, "ERROR\n");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node60.isEquivalentToTyped(node72);
        boolean boolean74 = node60.isNull();
        com.google.javascript.rhino.Node node75 = node49.copyInformationFromForTree(node60);
        boolean boolean76 = node60.isSetterDef();
        int int77 = node60.getLength();
        boolean boolean78 = node60.isDebugger();
        boolean boolean79 = node44.isEquivalentToTyped(node60);
        boolean boolean80 = node44.isCast();
        node41.addChildrenToBack(node44);
        boolean boolean82 = node41.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node60.isEquivalentToTyped(node72);
        boolean boolean74 = node60.isNull();
        com.google.javascript.rhino.Node node75 = node49.copyInformationFromForTree(node60);
        boolean boolean76 = node60.isSetterDef();
        int int77 = node60.getLength();
        boolean boolean78 = node60.isDebugger();
        boolean boolean79 = node44.isEquivalentToTyped(node60);
        boolean boolean80 = node44.isCast();
        node41.addChildrenToBack(node44);
        boolean boolean82 = node41.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        boolean boolean34 = node15.isDo();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node15.clonePropsFrom(node44);
        boolean boolean60 = node15.isDefaultCase();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node15.getStaticSourceFile();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.children();
        boolean boolean4 = node2.hasMoreThanOneChild();
        boolean boolean5 = node2.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.wasEmptyNode();
        boolean boolean35 = node15.isGetProp();
        boolean boolean36 = node15.isString();
        boolean boolean37 = node15.wasEmptyNode();
        node15.putIntProp((int) (byte) -1, 31);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) 'a', 56, (int) (byte) 10);
        node2.addChildToFront(node42);
        node42.setLength((int) (byte) 100);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        boolean boolean74 = node61.isEquivalentToTyped(node73);
        boolean boolean75 = node61.isNull();
        com.google.javascript.rhino.Node node76 = node50.copyInformationFromForTree(node61);
        boolean boolean77 = node61.isSetterDef();
        int int78 = node61.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node61.children();
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray81, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray86 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray86, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node90 = node84.useSourceInfoIfMissingFrom(node89);
        node90.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node94 = node61.useSourceInfoFromForTree(node90);
        java.lang.String str95 = node94.toStringTree();
        com.google.javascript.rhino.Node node96 = node42.useSourceInfoIfMissingFromForTree(node94);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile97 = null;
        node94.setStaticSourceFile(staticSourceFile97);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(nodeArray86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ERROR\n" + "'", str95, "ERROR\n");
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        boolean boolean29 = node21.isAssign();
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node35.isFor();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, node35, 0, 0);
        boolean boolean46 = node35.isString();
        int int47 = node35.getSourceOffset();
        boolean boolean48 = node35.isVarArgs();
        boolean boolean49 = node35.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node35.getJSDocInfo();
        boolean boolean51 = node35.isSyntheticBlock();
        int int52 = node35.getSideEffectFlags();
        node35.setCharno(56);
        boolean boolean55 = node21.isEquivalentToShallow(node35);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node15.isAssign();
        int int17 = node15.getSideEffectFlags();
        com.google.javascript.rhino.Node node18 = node15.getLastSibling();
        boolean boolean19 = node15.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node15.getJSDocInfo();
        com.google.javascript.rhino.Node node21 = node15.cloneNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node6);
        com.google.javascript.rhino.Node node35 = node34.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray38, 2, (int) ' ');
        java.lang.String str45 = node44.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node67.isAssignAdd();
        com.google.javascript.rhino.Node node70 = node67.getParent();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(38, node34, node44, node67);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = node44.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 31, (int) (short) 100, (int) '4');
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        boolean boolean13 = node12.isIn();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(47, node6, node12);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(51, node14);
        boolean boolean17 = node14.isThis();
        com.google.javascript.rhino.Node node18 = node14.cloneNode();
        int int19 = node14.getCharno();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        java.lang.String str10 = node4.toString(true, true, false);
        boolean boolean11 = node4.isExprResult();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR" + "'", str10, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        node15.removeProp(16);
        node15.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean61 = node15.isEquivalentToTyped(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node60.children();
        boolean boolean63 = node60.isThrow();
        boolean boolean64 = node60.mayMutateArguments();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 4095.0");
        java.lang.Appendable appendable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.putIntProp(16, 48);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(50, "", 16, 29);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        boolean boolean12 = node4.isFunction();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        boolean boolean11 = node4.isNull();
        boolean boolean12 = node4.isCase();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 100);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node24.isEquivalentToTyped(node36);
        boolean boolean38 = node24.isNull();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildAfter(node14, node24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node4.isParamList();
        node4.setSourceEncodedPosition(39);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isLabel();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        boolean boolean50 = node38.isReturn();
        int int51 = node15.getIndexOfChild(node38);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        boolean boolean74 = node61.isEquivalentToTyped(node73);
        boolean boolean75 = node61.isNull();
        boolean boolean76 = node61.isInstanceOf();
        boolean boolean77 = node15.hasChild(node61);
        boolean boolean78 = node15.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        boolean boolean26 = node21.isRegExp();
        boolean boolean27 = node21.hasChildren();
        boolean boolean28 = node21.isWith();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node13.srcref(node19);
        boolean boolean21 = node13.mayMutateArguments();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        int int32 = node15.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = null;
        com.google.javascript.rhino.Node node34 = node15.setJSDocInfo(jSDocInfo33);
        boolean boolean35 = node34.isBreak();
        int int36 = node34.getSourceOffset();
        // The following exception was thrown during execution in test generation
        try {
            node34.setDouble((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.toString();
        node5.setType((int) (short) 100);
        com.google.javascript.rhino.InputId inputId20 = node5.getInputId();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertNull(inputId20);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(16);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        node15.removeProp(16);
        boolean boolean56 = node15.hasChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node6);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, 0, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray6, 1, 4095);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(49, nodeArray6, 4, 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((-1), nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) ' ', nodeArray6, 15, 10);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(2);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray3, 1, 4095);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray3, 4, 0);
        int int13 = node12.getSourceOffset();
        node12.setVarArgs(false);
        boolean boolean16 = node12.isLabel();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node4.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isDelProp();
        boolean boolean17 = node5.isEmpty();
        node5.removeProp(100);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(53, "ERROR [change_time: 55]", 56, 0);
        node4.putIntProp((int) (short) 100, (int) (short) 100);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", (int) (byte) 1, 57);
        boolean boolean4 = node3.isNew();
        boolean boolean5 = node3.isThrow();
        com.google.javascript.rhino.Node node6 = node3.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isThis();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node31.setStaticSourceFile(staticSourceFile58);
        java.lang.String str63 = node31.toString(true, false, true);
        boolean boolean64 = node31.isNew();
        boolean boolean65 = node31.isSetterDef();
        boolean boolean66 = node21.isEquivalentToTyped(node31);
        com.google.javascript.rhino.Node node67 = node21.getNext();
        boolean boolean68 = node21.isDebugger();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ERROR" + "'", str63, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        node5.setIsSyntheticBlock(false);
        boolean boolean56 = node5.hasMoreThanOneChild();
        boolean boolean57 = node5.isSwitch();
        int int58 = node5.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        int int20 = node5.getChildCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = node5.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isInstanceOf();
        java.lang.String str25 = node21.toStringTree();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node41.isNull();
        com.google.javascript.rhino.Node node56 = node30.copyInformationFromForTree(node41);
        node30.detachChildren();
        boolean boolean58 = node30.isName();
        java.lang.Object obj60 = node30.getProp(4);
        com.google.javascript.rhino.Node node61 = node21.srcrefTree(node30);
        boolean boolean62 = node61.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ERROR\n" + "'", str25, "ERROR\n");
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node45.isNull();
        com.google.javascript.rhino.Node node60 = node34.copyInformationFromForTree(node45);
        boolean boolean61 = node45.isSetterDef();
        int int62 = node45.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node45.children();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        node74.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node78 = node45.useSourceInfoFromForTree(node74);
        boolean boolean79 = node74.isLabel();
        boolean boolean80 = node29.isEquivalentToTyped(node74);
        boolean boolean81 = node29.isReturn();
        int int82 = node29.getSourceOffset();
        boolean boolean83 = node29.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder84 = node29.new FileLevelJsDocBuilder();
        boolean boolean85 = node29.isCast();
        boolean boolean86 = node29.isNew();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        node5.setLength(38);
        node5.setSourceEncodedPositionForTree((int) '#');
        boolean boolean20 = node5.isAssign();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isVoid();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        node31.detachChildren();
        boolean boolean59 = node31.isFromExterns();
        node31.setSourceFileForTesting("REGEXP ");
        int int62 = node31.getLineno();
        node9.addChildToBack(node31);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = null;
        node53.setStaticSourceFile(staticSourceFile80);
        com.google.javascript.rhino.Node node82 = node15.clonePropsFrom(node53);
        boolean boolean83 = node82.hasMoreThanOneChild();
        boolean boolean84 = node82.isNot();
        boolean boolean85 = node82.isCatch();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        node15.setSourceEncodedPosition((int) (short) 100);
        boolean boolean35 = node15.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node node34 = node15.getParent();
        boolean boolean35 = node15.isComma();
        int int36 = node15.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isInstanceOf();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = node21.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        node5.setIsSyntheticBlock(false);
        boolean boolean56 = node5.hasMoreThanOneChild();
        boolean boolean57 = node5.isSwitch();
        boolean boolean58 = node5.isAssign();
        node5.setSourceEncodedPositionForTree(16);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        com.google.javascript.rhino.Node node41 = node33.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = node41.getAncestor(40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("REGEXP ", (int) (byte) 10, 2);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isIn();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        boolean boolean33 = node20.isEquivalentToTyped(node32);
        boolean boolean34 = node20.isNull();
        com.google.javascript.rhino.Node node35 = node9.copyInformationFromForTree(node20);
        node9.detachChildren();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(48, node9);
        boolean boolean38 = node9.isAssignAdd();
        boolean boolean39 = node9.hasChildren();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node9);
        boolean boolean41 = node3.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.setMutatesGlobalState();
        int int5 = sideEffectFlags2.valueOf();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node13.new FileLevelJsDocBuilder();
        boolean boolean17 = node13.isVar();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node60.isWhile();
        boolean boolean62 = node60.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        boolean boolean32 = node4.isTry();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        boolean boolean50 = node38.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        node60.putIntProp(2, 10);
        boolean boolean65 = node60.isNull();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node71.isFor();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(0, node71, 0, 0);
        boolean boolean82 = node71.isString();
        int int83 = node71.getSourceOffset();
        boolean boolean84 = node71.isVarArgs();
        com.google.javascript.rhino.Node node85 = node60.copyInformationFromForTree(node71);
        boolean boolean86 = node71.isReturn();
        com.google.javascript.rhino.Node node87 = node38.copyInformationFromForTree(node71);
        boolean boolean88 = node87.isFunction();
        int int89 = node4.getIndexOfChild(node87);
        boolean boolean90 = node87.isRegExp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node42 = node41.getLastChild();
        boolean boolean43 = node30.isEquivalentToTyped(node41);
        java.lang.String str44 = node41.getQualifiedName();
        boolean boolean45 = node41.isScript();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        int int12 = node4.getLineno();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node22.isNull();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node59 = node53.useSourceInfoIfMissingFrom(node58);
        boolean boolean60 = node47.isEquivalentToTyped(node59);
        boolean boolean61 = node59.isAssignAdd();
        boolean boolean62 = node59.isSyntheticBlock();
        node22.putProp((-1), (java.lang.Object) node59);
        boolean boolean64 = node59.wasEmptyNode();
        boolean boolean65 = node59.isFromExterns();
        boolean boolean66 = node4.isEquivalentToTyped(node59);
        node59.addSuppression("LE 0");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "hi!", 1, 52);
        com.google.javascript.rhino.Node node5 = node4.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = node5.isNoSideEffectsCall();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        com.google.javascript.rhino.Node node95 = node70.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = node95.isWith();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(node95);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        node15.setVarArgs(false);
        node15.setChangeTime(55);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node60 = node57.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node57.getJsDocBuilderForNode();
        boolean boolean62 = node57.isNot();
        node15.addChildToFront(node57);
        boolean boolean64 = node15.isNew();
        com.google.javascript.rhino.Node node65 = node15.getLastChild();
        boolean boolean66 = node65.isQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        int int46 = node45.getChildCount();
        boolean boolean47 = node45.isInc();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        boolean boolean34 = node15.isDo();
        node15.setType(48);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 15, (int) (byte) -1);
        boolean boolean4 = node3.isAssignAdd();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        boolean boolean11 = node10.isIn();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node21.isNull();
        com.google.javascript.rhino.Node node36 = node10.copyInformationFromForTree(node21);
        node10.detachChildren();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(48, node10);
        boolean boolean39 = node10.isAssignAdd();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        boolean boolean46 = node45.isIn();
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(47, node45, node51);
        node45.detachChildren();
        boolean boolean55 = node45.isCall();
        boolean boolean56 = node45.hasOneChild();
        com.google.javascript.rhino.Node node57 = node45.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChildAfter(node10, node45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        boolean boolean42 = node13.isLabelName();
        boolean boolean43 = node13.isReturn();
        com.google.javascript.rhino.Node node44 = node13.removeChildren();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        boolean boolean51 = node50.isIn();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        boolean boolean57 = node56.isIn();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(47, node50, node56);
        java.lang.String str59 = node58.getSourceFileName();
        java.lang.String[] strArray61 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean65 = node58.isParamList();
        com.google.javascript.rhino.Node node66 = node58.getFirstChild();
        boolean boolean67 = node66.isThis();
        int int68 = node44.getIndexOfChild(node66);
        node44.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isCast();
        com.google.javascript.rhino.InputId inputId41 = node39.getInputId();
        node39.setType((int) 'a');
        java.util.Set<java.lang.String> strSet44 = node39.getDirectives();
        node39.setChangeTime(4);
        com.google.javascript.rhino.Node node47 = node15.srcref(node39);
        boolean boolean48 = node47.isComma();
        int int49 = node47.getType();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        node15.setLength(54);
        boolean boolean52 = node15.isTypeOf();
        com.google.javascript.rhino.InputId inputId53 = node15.getInputId();
        boolean boolean54 = node15.isParamList();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(inputId53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        boolean boolean20 = node5.isScript();
        com.google.javascript.rhino.Node node21 = node5.getLastChild();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        int int39 = node27.getSourceOffset();
        boolean boolean40 = node27.isVarArgs();
        boolean boolean41 = node27.isDo();
        int int42 = node5.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        boolean boolean53 = node52.isIn();
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        boolean boolean76 = node63.isEquivalentToTyped(node75);
        boolean boolean77 = node63.isNull();
        com.google.javascript.rhino.Node node78 = node52.copyInformationFromForTree(node63);
        boolean boolean79 = node63.isCase();
        node63.removeProp(16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node63.siblings();
        node47.addChildToBack(node63);
        com.google.javascript.rhino.Node node84 = node5.copyInformationFrom(node47);
        boolean boolean85 = node5.isCase();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node25 = node21.getNext();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags27 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags28 = sideEffectFlags27.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags29 = sideEffectFlags27.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node25.putProp((int) (short) 10, (java.lang.Object) sideEffectFlags29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(sideEffectFlags28);
        org.junit.Assert.assertNotNull(sideEffectFlags29);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags1.setMutatesThis();
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        com.google.javascript.rhino.InputId inputId35 = node33.getInputId();
        // The following exception was thrown during execution in test generation
        try {
            node33.setString("Node tree inequality:\nTree1:\nERROR\n\n\nTree2:\nASSIGN_MOD 56\n\n\nSubtree1: ERROR\n\n\nSubtree2: ASSIGN_MOD 56\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(inputId35);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isRegExp();
        java.lang.String str18 = node9.toString(true, false, true);
        com.google.javascript.rhino.InputId inputId19 = null;
        node9.setInputId(inputId19);
        node9.setCharno(0);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ERROR" + "'", str18, "ERROR");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isFalse();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        node42.setVarArgs(false);
        node42.setChangeTime(55);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node72.isEquivalentToTyped(node84);
        boolean boolean86 = node84.isAssignAdd();
        com.google.javascript.rhino.Node node87 = node84.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder88 = node84.getJsDocBuilderForNode();
        boolean boolean89 = node84.isNot();
        node42.addChildToFront(node84);
        boolean boolean91 = node42.isNew();
        com.google.javascript.rhino.Node node92 = node42.getLastChild();
        com.google.javascript.rhino.Node node93 = node21.useSourceInfoIfMissingFromForTree(node42);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        int int31 = node4.getType();
        boolean boolean32 = node4.isVar();
        boolean boolean33 = node4.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = null;
        com.google.javascript.rhino.Node node35 = node4.setJSDocInfo(jSDocInfo34);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node51.isEquivalentToTyped(node63);
        boolean boolean65 = node51.isNull();
        com.google.javascript.rhino.Node node66 = node40.copyInformationFromForTree(node51);
        boolean boolean67 = node51.isSetterDef();
        boolean boolean68 = node51.isLabel();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        boolean boolean80 = node73.isCatch();
        com.google.javascript.rhino.Node node81 = node51.useSourceInfoIfMissingFrom(node73);
        boolean boolean82 = node51.isName();
        node51.detachChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder84 = node51.getJsDocBuilderForNode();
        node35.addChildToBack(node51);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder84);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray71, 1, 4095);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(49, nodeArray71, 4, 0);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((-1), nodeArray71);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) ' ', nodeArray71, 15, 10);
        node84.setVarArgs(true);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 0, 0, 31);
        boolean boolean91 = node90.isTry();
        boolean boolean92 = node90.isComma();
        boolean boolean93 = node90.isName();
        // The following exception was thrown during execution in test generation
        try {
            node65.replaceChildAfter(node84, node90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node14 = node8.useSourceInfoIfMissingFrom(node13);
        boolean boolean15 = node8.isFor();
        int int17 = node8.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node33.isEquivalentToTyped(node45);
        boolean boolean47 = node33.isNull();
        com.google.javascript.rhino.Node node48 = node22.copyInformationFromForTree(node33);
        boolean boolean49 = node33.isSetterDef();
        int int50 = node33.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node33.children();
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        node62.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node66 = node33.useSourceInfoFromForTree(node62);
        boolean boolean67 = node8.isEquivalentTo(node66);
        boolean boolean68 = node66.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray76, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node80 = node74.useSourceInfoIfMissingFrom(node79);
        boolean boolean81 = node74.isFor();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(0, node74, 0, 0);
        boolean boolean85 = node74.isString();
        int int86 = node74.getSourceOffset();
        boolean boolean87 = node74.isVarArgs();
        int int88 = node74.getChildCount();
        boolean boolean89 = node74.isLabel();
        boolean boolean90 = node66.isEquivalentToShallow(node74);
        boolean boolean91 = node74.hasOneChild();
        boolean boolean92 = node74.isNull();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(48, node2, node3, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean2 = node1.isWith();
        boolean boolean3 = node1.isInc();
        int int4 = node1.getLineno();
        boolean boolean5 = node1.isNoSideEffectsCall();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray9, 1, 4095);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(49, nodeArray9, 4, 0);
        int int19 = node18.getSourceOffset();
        boolean boolean20 = node18.isLabel();
        com.google.javascript.rhino.Node node21 = node18.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node22 = node1.getChildBefore(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        node15.removeProp(16);
        node15.putBooleanProp(16, false);
        java.lang.String str37 = node15.toString();
        java.util.Set<java.lang.String> strSet38 = node15.getDirectives();
        boolean boolean39 = node15.isOptionalArg();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ERROR" + "'", str37, "ERROR");
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "ERROR", (int) (short) 1, 57);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isIn();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node41.isNull();
        com.google.javascript.rhino.Node node56 = node30.copyInformationFromForTree(node41);
        boolean boolean57 = node41.isCase();
        int int58 = node41.getChangeTime();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = null;
        com.google.javascript.rhino.Node node60 = node41.setJSDocInfo(jSDocInfo59);
        com.google.javascript.rhino.Node node61 = node21.clonePropsFrom(node60);
        boolean boolean62 = node61.isArrayLit();
        int int63 = node61.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("ERROR");
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node29);
        node21.addSuppression("hi!");
        boolean boolean33 = node21.isObjectLit();
        // The following exception was thrown during execution in test generation
        try {
            node21.setDouble((double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        com.google.javascript.rhino.InputId inputId14 = node5.getInputId();
        boolean boolean15 = node5.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        com.google.javascript.rhino.Node node95 = node42.getNext();
        node42.putBooleanProp(53, true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 4095.0", 1, (int) '#');
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node50.children();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        node79.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node83 = node50.useSourceInfoFromForTree(node79);
        boolean boolean84 = node79.isLabel();
        com.google.javascript.rhino.Node node85 = node4.copyInformationFrom(node79);
        int int86 = node85.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.hasMoreThanOneChild();
        boolean boolean16 = node5.isAnd();
        boolean boolean17 = node5.isDefaultCase();
        node5.putIntProp(43, 56);
        boolean boolean21 = node5.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node5.getJSDocInfo();
        node5.setLength(32);
        node5.putBooleanProp((int) (short) 100, true);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSDocInfo20);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.Node node26 = node21.getAncestor(15);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node node29 = node28.getLastChild();
        com.google.javascript.rhino.Node node30 = node29.removeChildren();
        int int31 = node29.getChangeTime();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isHook();
        boolean boolean65 = node62.isCase();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isNoSideEffectsCall();
        java.lang.Object obj40 = node2.getProp(8);
        boolean boolean41 = node2.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setMutatesGlobalState();
        boolean boolean4 = sideEffectFlags3.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setThrows();
        int int6 = sideEffectFlags5.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = sideEffectFlags5.setReturnsTainted();
        int int8 = sideEffectFlags5.valueOf();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlags7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isSetterDef();
        boolean boolean12 = node4.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray20, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = node23.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node17.isEquivalentToTyped(node29);
        boolean boolean31 = node17.isNull();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node17);
        node6.detachChildren();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(48, node6);
        com.google.javascript.rhino.Node node35 = node34.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray38, 2, (int) ' ');
        java.lang.String str45 = node44.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node67.isAssignAdd();
        com.google.javascript.rhino.Node node70 = node67.getParent();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(38, node34, node44, node67);
        boolean boolean72 = node34.isNew();
        boolean boolean73 = node34.isAdd();
        boolean boolean74 = node34.isAssign();
        boolean boolean75 = node34.isFalse();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isHook();
        boolean boolean65 = node62.isQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node60, node66);
        boolean boolean69 = node68.isRegExp();
        boolean boolean70 = node68.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node71 = node54.srcref(node68);
        boolean boolean72 = node54.isSetterDef();
        node54.addSuppression("ERROR");
        boolean boolean75 = node54.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            int int77 = node54.getExistingIntProp((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) (short) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node13.srcref(node19);
        boolean boolean21 = node19.isGetElem();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable22 = node19.getAncestors();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ancestorIterable22);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node36.isIn();
        boolean boolean40 = node9.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        boolean boolean70 = node57.isEquivalentToTyped(node69);
        boolean boolean71 = node57.isNull();
        com.google.javascript.rhino.Node node72 = node46.copyInformationFromForTree(node57);
        node46.detachChildren();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(48, node46);
        com.google.javascript.rhino.Node node75 = node74.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        boolean boolean82 = node81.isIn();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        boolean boolean88 = node87.isIn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(47, node81, node87);
        boolean boolean90 = node89.isRegExp();
        com.google.javascript.rhino.Node node91 = node89.cloneNode();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoFrom(node89);
        node75.setOptionalArg(true);
        com.google.javascript.rhino.Node node95 = node9.useSourceInfoFrom(node75);
        java.lang.Object obj97 = node9.getProp(8);
        // The following exception was thrown during execution in test generation
        try {
            node9.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        node15.setVarArgs(false);
        node15.setChangeTime(55);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node60 = node57.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node57.getJsDocBuilderForNode();
        boolean boolean62 = node57.isNot();
        node15.addChildToFront(node57);
        boolean boolean64 = node15.isNew();
        boolean boolean65 = node15.isFunction();
        boolean boolean66 = node15.isAdd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        boolean boolean14 = node4.isLocalResultCall();
        int int15 = node4.getSourcePosition();
        java.lang.Object obj17 = node4.getProp(32);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node4.setJSType(jSType18);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isTrue();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        boolean boolean43 = node41.isContinue();
        java.lang.String str44 = node41.getSourceFileName();
        int int45 = node41.getType();
        java.lang.Object obj47 = node41.getProp(10);
        // The following exception was thrown during execution in test generation
        try {
            node20.removeChild(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node31 = node4.srcref(node28);
        boolean boolean32 = node28.isSyntheticBlock();
        boolean boolean33 = node28.isBreak();
        boolean boolean34 = node28.isAnd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
        boolean boolean35 = node33.isFalse();
        int int36 = node33.getChildCount();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        java.lang.Object obj16 = node9.getProp(47);
        boolean boolean17 = node9.isReturn();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags3.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesArguments();
        int int6 = sideEffectFlags3.valueOf();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node36.isIn();
        boolean boolean40 = node9.isEquivalentToTyped(node36);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        boolean boolean47 = node46.isIn();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node69 = node63.useSourceInfoIfMissingFrom(node68);
        boolean boolean70 = node57.isEquivalentToTyped(node69);
        boolean boolean71 = node57.isNull();
        com.google.javascript.rhino.Node node72 = node46.copyInformationFromForTree(node57);
        node46.detachChildren();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(48, node46);
        com.google.javascript.rhino.Node node75 = node74.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        boolean boolean82 = node81.isIn();
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        boolean boolean88 = node87.isIn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(47, node81, node87);
        boolean boolean90 = node89.isRegExp();
        com.google.javascript.rhino.Node node91 = node89.cloneNode();
        com.google.javascript.rhino.Node node92 = node75.useSourceInfoFrom(node89);
        node75.setOptionalArg(true);
        com.google.javascript.rhino.Node node95 = node9.useSourceInfoFrom(node75);
        boolean boolean96 = node9.isNull();
        boolean boolean97 = node9.isTypeOf();
        boolean boolean98 = node9.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node50.children();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        node79.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node83 = node50.useSourceInfoFromForTree(node79);
        boolean boolean84 = node79.isLabel();
        com.google.javascript.rhino.Node node85 = node4.copyInformationFrom(node79);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable86 = node4.siblings();
        boolean boolean87 = node4.isCast();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(nodeIterable86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isTrue();
        com.google.javascript.rhino.Node node37 = node20.detachFromParent();
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        boolean boolean43 = node42.isIn();
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        boolean boolean66 = node53.isEquivalentToTyped(node65);
        boolean boolean67 = node53.isNull();
        com.google.javascript.rhino.Node node68 = node42.copyInformationFromForTree(node53);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        boolean boolean74 = node73.isIn();
        boolean boolean75 = node73.isContinue();
        boolean boolean76 = node73.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            node37.replaceChild(node53, node73);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(42, "ERROR [change_time: 55]");
        boolean boolean3 = node2.isOnlyModifiesArgumentsCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3, 2, (int) ' ');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray3, 32, (-1));
        boolean boolean13 = node12.isCall();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        boolean boolean47 = node29.isName();
        java.lang.String str48 = node29.getSourceFileName();
        boolean boolean49 = node29.isFromExterns();
        boolean boolean50 = node12.isEquivalentToShallow(node29);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node56.isFor();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(0, node56, 0, 0);
        boolean boolean67 = node66.isAssign();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = null;
        com.google.javascript.rhino.Node node69 = node66.setJSDocInfo(jSDocInfo68);
        com.google.javascript.rhino.Node node70 = node12.useSourceInfoFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        boolean boolean76 = node75.isCast();
        com.google.javascript.rhino.InputId inputId77 = node75.getInputId();
        node75.setType((int) 'a');
        java.util.Set<java.lang.String> strSet80 = node75.getDirectives();
        node75.setChangeTime(4);
        boolean boolean84 = node75.getBooleanProp(36);
        node75.setOptionalArg(true);
        com.google.javascript.rhino.Node node87 = node66.useSourceInfoIfMissingFrom(node75);
        int int88 = node87.getCharno();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node21.isFor();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(0, node21, 0, 0);
        boolean boolean32 = node21.isString();
        boolean boolean33 = node21.isEmpty();
        boolean boolean34 = node21.isCatch();
        boolean boolean35 = node21.isOnlyModifiesArgumentsCall();
        boolean boolean36 = node21.isNoSideEffectsCall();
        node21.putBooleanProp((int) '4', true);
        boolean boolean40 = node15.isEquivalentTo(node21);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node46.isFor();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(0, node46, 0, 0);
        boolean boolean57 = node46.isString();
        int int58 = node46.getSourceOffset();
        boolean boolean59 = node46.isVarArgs();
        int int60 = node46.getChildCount();
        com.google.javascript.rhino.Node node62 = node46.getAncestor(8);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray66, 2, (int) ' ');
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(15, nodeArray66);
        node46.addChildToFront(node73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node46.setJSType(jSType75);
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildrenToBack(node46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(nodeArray66);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(12);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isNull();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        boolean boolean5 = node4.isAnd();
        int int6 = node4.getLineno();
        boolean boolean7 = node4.isCatch();
        node4.setCharno((int) '#');
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        boolean boolean60 = node57.isIn();
        node15.addChildToBack(node57);
        boolean boolean62 = node57.isVarArgs();
        boolean boolean63 = node57.isVar();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        com.google.javascript.rhino.Node node95 = node42.getNext();
        boolean boolean96 = node95.hasOneChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean70 = node69.isComma();
        boolean boolean71 = node69.isCall();
        boolean boolean72 = node69.isTypeOf();
        boolean boolean73 = node69.isIf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        node4.setChangeTime((int) (short) 100);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        boolean boolean21 = node20.isIn();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node31.isEquivalentToTyped(node43);
        boolean boolean45 = node31.isNull();
        com.google.javascript.rhino.Node node46 = node20.copyInformationFromForTree(node31);
        node20.detachChildren();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(48, node20);
        com.google.javascript.rhino.Node node49 = node48.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        boolean boolean56 = node55.isIn();
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        boolean boolean62 = node61.isIn();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(47, node55, node61);
        boolean boolean64 = node63.isRegExp();
        com.google.javascript.rhino.Node node65 = node63.cloneNode();
        com.google.javascript.rhino.Node node66 = node49.useSourceInfoFrom(node63);
        node4.putProp(53, (java.lang.Object) node63);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = node63.getExistingIntProp(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 52");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isFromExterns();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node36.isIn();
        boolean boolean40 = node9.isEquivalentToTyped(node36);
        node9.setOptionalArg(false);
        boolean boolean43 = node9.isSyntheticBlock();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        node13.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isContinue();
        java.lang.String str27 = node21.toString(true, true, false);
        com.google.javascript.rhino.Node node28 = node13.clonePropsFrom(node21);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node28.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ERROR" + "'", str27, "ERROR");
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        boolean boolean42 = node41.isIn();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node52.isNull();
        com.google.javascript.rhino.Node node67 = node41.copyInformationFromForTree(node52);
        boolean boolean68 = node52.isSetterDef();
        int int69 = node52.getLength();
        boolean boolean70 = node52.isName();
        boolean boolean71 = node52.isFalse();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray78 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray78, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node82 = node76.useSourceInfoIfMissingFrom(node81);
        boolean boolean83 = node82.isUnscopedQualifiedName();
        node52.addChildrenToFront(node82);
        node34.addChildToBack(node52);
        node34.detachChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = null;
        com.google.javascript.rhino.Node node88 = node34.setJSDocInfo(jSDocInfo87);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(nodeArray78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        boolean boolean25 = node21.isSetterDef();
        boolean boolean26 = node21.isGetterDef();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        int int59 = node42.getLength();
        boolean boolean60 = node42.isDebugger();
        int int61 = node42.getType();
        node42.setOptionalArg(false);
        com.google.javascript.rhino.Node node64 = node21.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node65 = node21.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node65);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        com.google.javascript.rhino.Node node42 = node41.removeFirstChild();
        boolean boolean43 = node41.isDefaultCase();
        boolean boolean44 = node41.isExprResult();
        boolean boolean45 = node41.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        node31.setStaticSourceFile(staticSourceFile58);
        java.lang.String str63 = node31.toString(true, false, true);
        boolean boolean64 = node31.isNew();
        boolean boolean65 = node31.isSetterDef();
        boolean boolean66 = node21.isEquivalentToTyped(node31);
        com.google.javascript.rhino.Node node67 = node21.getNext();
        com.google.javascript.rhino.Node node69 = node21.getAncestor(1);
        // The following exception was thrown during execution in test generation
        try {
            node69.setString("LE 0");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ERROR" + "'", str63, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node69);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isBreak();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        boolean boolean44 = node43.isCast();
        com.google.javascript.rhino.InputId inputId45 = node43.getInputId();
        node43.setType((int) 'a');
        java.util.Set<java.lang.String> strSet48 = node43.getDirectives();
        boolean boolean49 = node43.hasMoreThanOneChild();
        boolean boolean50 = node43.isParamList();
        node2.addChildrenToFront(node43);
        java.lang.Class<?> wildcardClass52 = node43.getClass();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(inputId45);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isCatch();
        com.google.javascript.rhino.Node node45 = node15.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        boolean boolean52 = node51.isIn();
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(47, node51, node57);
        node51.detachChildren();
        boolean boolean61 = node51.isAssign();
        boolean boolean62 = node51.isReturn();
        boolean boolean63 = node51.isAssign();
        java.util.Set<java.lang.String> strSet64 = node51.getDirectives();
        com.google.javascript.rhino.Node node65 = node37.useSourceInfoFromForTree(node51);
        boolean boolean66 = node51.mayMutateGlobalStateOrThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "NUMBER 4095.0", 0, 51);
        boolean boolean5 = node4.isAssign();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        java.lang.Object obj26 = node21.getProp(1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isCase();
        int int59 = node42.getChangeTime();
        node21.addChildrenToBack(node42);
        node21.setSourceEncodedPosition(39);
        node21.detachChildren();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        boolean boolean75 = node73.isNew();
        int int77 = node73.getIntProp(8);
        boolean boolean78 = node73.isQualifiedName();
        boolean boolean79 = node73.isBlock();
        boolean boolean80 = node73.isInstanceOf();
        boolean boolean81 = node21.isEquivalentToTyped(node73);
        boolean boolean82 = node21.isVoid();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        com.google.javascript.rhino.Node node60 = node28.getFirstChild();
        boolean boolean61 = node60.isWith();
        boolean boolean62 = node60.isFromExterns();
        boolean boolean63 = node60.isString();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isHook();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(8);
        int int2 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        boolean boolean46 = node45.isUnscopedQualifiedName();
        node15.addChildrenToFront(node45);
        boolean boolean48 = node45.isThis();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node22.getJSDocInfo();
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(57, node22, (int) (short) 1, 49);
        // The following exception was thrown during execution in test generation
        try {
            node22.setSideEffectFlags((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 36);
        java.lang.Class<?> wildcardClass2 = node1.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        boolean boolean51 = node38.isEquivalentToTyped(node50);
        boolean boolean52 = node50.isAssignAdd();
        boolean boolean53 = node50.isInstanceOf();
        java.lang.String str54 = node50.toStringTree();
        boolean boolean55 = node22.hasChild(node50);
        com.google.javascript.rhino.Node node56 = node22.cloneTree();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ERROR\n" + "'", str54, "ERROR\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFromExterns();
        boolean boolean35 = node15.isBreak();
        boolean boolean36 = node15.isVar();
        boolean boolean37 = node15.isLabelName();
        boolean boolean38 = node15.isStringKey();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.getSourceFileName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        boolean boolean29 = node28.isIn();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(47, node22, node28);
        node22.detachChildren();
        boolean boolean32 = node22.isAssign();
        node5.putProp(46, (java.lang.Object) boolean32);
        java.lang.String str34 = node5.toString();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ERROR [is_namespace: false]" + "'", str34, "ERROR [is_namespace: false]");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node21.getJSDocInfo();
        boolean boolean26 = node21.isTypeOf();
        node21.setWasEmptyNode(true);
        boolean boolean29 = node21.isVoid();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node node62 = node38.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node5.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node5.isLabel();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        boolean boolean7 = node6.isIn();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray9, (int) (byte) -1, (int) (short) 1);
        boolean boolean13 = node12.isIn();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(47, node6, node12);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(51, node14);
        boolean boolean17 = node14.isThis();
        com.google.javascript.rhino.Node node18 = node14.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        node25.detachChildren();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(48, node25);
        com.google.javascript.rhino.Node node54 = node53.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray57, 2, (int) ' ');
        java.lang.String str64 = node63.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray71 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray71, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node75 = node69.useSourceInfoIfMissingFrom(node74);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray82 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray82, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node86 = node80.useSourceInfoIfMissingFrom(node85);
        boolean boolean87 = node74.isEquivalentToTyped(node86);
        boolean boolean88 = node86.isAssignAdd();
        com.google.javascript.rhino.Node node89 = node86.getParent();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(38, node53, node63, node86);
        boolean boolean91 = node14.isEquivalentToShallow(node53);
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArray71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(nodeArray82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        boolean boolean24 = node21.isIf();
        int int25 = node21.getSourceOffset();
        boolean boolean26 = node21.isSyntheticBlock();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node40.isEquivalentToTyped(node52);
        boolean boolean54 = node52.isAssignAdd();
        boolean boolean55 = node52.hasChildren();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node52, 47, 32);
        node28.putProp(48, (java.lang.Object) node52);
        boolean boolean60 = node52.isFalse();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) -1);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4, "");
        com.google.javascript.rhino.Node node3 = node2.getLastSibling();
        node3.setVarArgs(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray7, 1, 4095);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, nodeArray7, 4, 0);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((-1), nodeArray7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) ' ', nodeArray7, 15, 10);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(12, nodeArray7);
        boolean boolean23 = node22.mayMutateArguments();
        node22.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        node10.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        boolean boolean31 = node30.isAnd();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(0, node10, node30, (int) (byte) 100, 53);
        com.google.javascript.rhino.Node node35 = node30.removeChildren();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node45.isNull();
        com.google.javascript.rhino.Node node60 = node34.copyInformationFromForTree(node45);
        boolean boolean61 = node45.isSetterDef();
        int int62 = node45.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node45.children();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        node74.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node78 = node45.useSourceInfoFromForTree(node74);
        boolean boolean79 = node74.isLabel();
        boolean boolean80 = node29.isEquivalentToTyped(node74);
        int int81 = node29.getSideEffectFlags();
        com.google.javascript.rhino.Node node82 = node29.cloneNode();
        boolean boolean83 = node82.isComma();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        boolean boolean31 = node5.isGetElem();
        boolean boolean32 = node5.isOnlyModifiesArgumentsCall();
        java.lang.String str33 = node5.getQualifiedName();
        node5.setLength((-1));
        boolean boolean36 = node5.isString();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isCase();
        boolean boolean32 = node15.hasOneChild();
        boolean boolean33 = node15.isBreak();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node88 = node82.useSourceInfoIfMissingFrom(node87);
        boolean boolean89 = node76.isEquivalentToTyped(node88);
        boolean boolean90 = node88.isAssignAdd();
        com.google.javascript.rhino.Node node91 = node88.getParent();
        boolean boolean92 = node88.isInc();
        boolean boolean93 = node88.isSwitch();
        boolean boolean94 = node88.isSyntheticBlock();
        boolean boolean95 = node16.isEquivalentTo(node88);
        boolean boolean96 = node16.isDec();
        boolean boolean97 = node16.isVar();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean70 = node49.isSetterDef();
        boolean boolean71 = node49.isDefaultCase();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node16);
        boolean boolean34 = node33.isQuotedString();
        int int35 = node33.getSourceOffset();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isDelProp();
        boolean boolean38 = node4.isVarArgs();
        boolean boolean39 = node4.hasChildren();
        int int40 = node4.getCharno();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node22 = node21.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = node22.getAncestor((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = node30.useSourceInfoIfMissingFrom(node35);
        boolean boolean37 = node30.isFor();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node30, 0, 0);
        boolean boolean41 = node30.isString();
        int int42 = node30.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node54 = node30.copyInformationFrom(node53);
        java.lang.String str55 = node54.toStringTree();
        com.google.javascript.rhino.Node node56 = node21.useSourceInfoIfMissingFromForTree(node54);
        node21.setCharno(40);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR\n" + "'", str55, "ERROR\n");
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        com.google.javascript.rhino.InputId inputId12 = node9.getInputId();
        boolean boolean13 = node9.isNew();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        int int31 = node4.getType();
        boolean boolean32 = node4.hasOneChild();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        boolean boolean44 = node37.isFor();
        int int46 = node37.getIntProp(0);
        boolean boolean47 = node37.isLocalResultCall();
        int int48 = node37.getSourcePosition();
        node37.setIsSyntheticBlock(false);
        boolean boolean51 = node37.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node37.siblings();
        java.lang.String str53 = node4.checkTreeEquals(node37);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node5.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        boolean boolean39 = node38.isIn();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node50 = node44.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = node55.useSourceInfoIfMissingFrom(node60);
        boolean boolean62 = node49.isEquivalentToTyped(node61);
        boolean boolean63 = node49.isNull();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node49);
        boolean boolean65 = node49.isSetterDef();
        int int66 = node49.getLength();
        boolean boolean67 = node49.isName();
        java.lang.String str68 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((-1), node5, node49);
        boolean boolean70 = node5.isNew();
        boolean boolean71 = node5.isReturn();
        boolean boolean73 = node5.getBooleanProp(52);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        com.google.javascript.rhino.Node node36 = node20.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node36.siblings();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "hi!", 29, 49);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6, 2, (int) ' ');
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(4, nodeArray6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, nodeArray6, (int) (byte) 10, 56);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray6);
        com.google.javascript.rhino.Node node19 = node18.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 12, (int) (short) 0);
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, (int) (byte) -1, (int) (short) 1);
        boolean boolean9 = node8.isIn();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray11, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node20 = node14.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFrom(node30);
        boolean boolean32 = node19.isEquivalentToTyped(node31);
        boolean boolean33 = node19.isNull();
        com.google.javascript.rhino.Node node34 = node8.copyInformationFromForTree(node19);
        boolean boolean35 = node19.isSetterDef();
        int int36 = node19.getLength();
        boolean boolean37 = node19.isName();
        boolean boolean38 = node19.isFalse();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node49 = node43.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isUnscopedQualifiedName();
        node19.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node52 = node3.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        boolean boolean58 = node57.isIn();
        com.google.javascript.rhino.Node node59 = node52.copyInformationFromForTree(node57);
        boolean boolean60 = node57.isFor();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        boolean boolean33 = node4.isLocalResultCall();
        int int34 = node4.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node4.getLastSibling();
        com.google.javascript.rhino.Node node36 = node35.getLastChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node15 = node13.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        boolean boolean38 = node25.isEquivalentToTyped(node37);
        boolean boolean39 = node37.isAssignAdd();
        boolean boolean40 = node37.isGetElem();
        node15.addChildrenToFront(node37);
        boolean boolean42 = node15.isHook();
        boolean boolean43 = node15.isFunction();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node5.setJSType(jSType14);
        boolean boolean16 = node5.isIn();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isReturn();
        boolean boolean21 = node13.isNull();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node27.isFor();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node27, 0, 0);
        boolean boolean38 = node27.isString();
        boolean boolean39 = node27.isEmpty();
        boolean boolean40 = node27.isCatch();
        com.google.javascript.rhino.Node node41 = node13.srcrefTree(node27);
        com.google.javascript.rhino.Node node42 = node41.removeFirstChild();
        boolean boolean43 = node41.isDefaultCase();
        boolean boolean44 = node41.isExprResult();
        boolean boolean45 = node41.isIn();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        node15.setVarArgs(false);
        node15.setChangeTime(55);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node60 = node57.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node57.getJsDocBuilderForNode();
        boolean boolean62 = node57.isNot();
        node15.addChildToFront(node57);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(12, "");
        com.google.javascript.rhino.Node node67 = node15.useSourceInfoIfMissingFrom(node66);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder68 = node15.getJsDocBuilderForNode();
        fileLevelJsDocBuilder68.append("ERROR [change_time: 55]");
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder68);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        node9.putIntProp(2, 10);
        boolean boolean14 = node9.isNull();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, node20, 0, 0);
        boolean boolean31 = node20.isString();
        int int32 = node20.getSourceOffset();
        boolean boolean33 = node20.isVarArgs();
        com.google.javascript.rhino.Node node34 = node9.copyInformationFromForTree(node20);
        boolean boolean35 = node20.isReturn();
        com.google.javascript.rhino.Node node36 = node20.removeChildren();
        boolean boolean37 = node20.isBreak();
        boolean boolean38 = node20.isQualifiedName();
        boolean boolean39 = node20.isNot();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        int int19 = node5.getChildCount();
        boolean boolean20 = node5.isLabel();
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        boolean boolean26 = node25.isIn();
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node37 = node31.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node48 = node42.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node36.isEquivalentToTyped(node48);
        boolean boolean50 = node36.isNull();
        com.google.javascript.rhino.Node node51 = node25.copyInformationFromForTree(node36);
        boolean boolean52 = node36.isThis();
        boolean boolean53 = node5.isEquivalentTo(node36);
        node5.setIsSyntheticBlock(false);
        boolean boolean56 = node5.hasMoreThanOneChild();
        boolean boolean57 = node5.isSwitch();
        boolean boolean58 = node5.isAssign();
        // The following exception was thrown during execution in test generation
        try {
            int int60 = node5.getExistingIntProp(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 2");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        int int11 = node4.getSourcePosition();
        boolean boolean12 = node4.isExprResult();
        java.lang.Class<?> wildcardClass13 = node4.getClass();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isFor();
        int int13 = node4.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        boolean boolean19 = node18.isIn();
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray32, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node41 = node35.useSourceInfoIfMissingFrom(node40);
        boolean boolean42 = node29.isEquivalentToTyped(node41);
        boolean boolean43 = node29.isNull();
        com.google.javascript.rhino.Node node44 = node18.copyInformationFromForTree(node29);
        boolean boolean45 = node29.isSetterDef();
        int int46 = node29.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node29.children();
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        node58.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node62 = node29.useSourceInfoFromForTree(node58);
        boolean boolean63 = node4.isEquivalentTo(node62);
        boolean boolean64 = node62.isOptionalArg();
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node70.isFor();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node70, 0, 0);
        boolean boolean81 = node70.isString();
        int int82 = node70.getSourceOffset();
        boolean boolean83 = node70.isVarArgs();
        int int84 = node70.getChildCount();
        boolean boolean85 = node70.isLabel();
        boolean boolean86 = node62.isEquivalentToShallow(node70);
        boolean boolean87 = node62.isVar();
        boolean boolean88 = node62.hasOneChild();
        boolean boolean89 = node62.isBlock();
        node62.setLineno((int) (byte) -1);
        boolean boolean92 = node62.isSyntheticBlock();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(56, 38, (int) (short) -1);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        int int13 = node9.getIntProp(8);
        boolean boolean14 = node9.isQualifiedName();
        com.google.javascript.rhino.jstype.JSType jSType15 = node9.getJSType();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node9.setStaticSourceFile(staticSourceFile16);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSType15);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node9.isNew();
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray14, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = node17.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node22.isEquivalentToTyped(node34);
        boolean boolean36 = node34.isAssignAdd();
        boolean boolean37 = node34.hasChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node34, 47, 32);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray55, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray60 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray60, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node64 = node58.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node52.isEquivalentToTyped(node64);
        boolean boolean66 = node64.isAssignAdd();
        boolean boolean67 = node64.hasChildren();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(32, node64, 47, 32);
        node40.putProp(48, (java.lang.Object) node64);
        com.google.javascript.rhino.Node node72 = node40.getFirstChild();
        java.lang.String str73 = node9.checkTreeEquals(node72);
        boolean boolean74 = node72.isFor();
        boolean boolean75 = node72.isOnlyModifiesArgumentsCall();
        boolean boolean76 = node72.isFalse();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(nodeArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        boolean boolean32 = node15.isLabel();
        boolean boolean33 = node15.isUnscopedQualifiedName();
        boolean boolean34 = node15.isDo();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node44.isNull();
        com.google.javascript.rhino.Node node59 = node15.clonePropsFrom(node44);
        boolean boolean60 = node15.isDefaultCase();
        node15.setLineno((int) '#');
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isNoSideEffectsCall();
        boolean boolean39 = node2.isGetElem();
        boolean boolean40 = node2.isDefaultCase();
        node2.setWasEmptyNode(true);
        int int43 = node2.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node65.isThis();
        boolean boolean67 = node65.isNE();
        boolean boolean68 = node65.isSyntheticBlock();
        int int69 = node65.getChangeTime();
        node65.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isDebugger();
        boolean boolean34 = node15.isFor();
        node15.setSourceEncodedPositionForTree(43);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isDelProp();
        node5.setSourceEncodedPosition(36);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setCharno(47);
        int int9 = node4.getLength();
        node4.putBooleanProp(42, false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        boolean boolean25 = node21.isNew();
        boolean boolean26 = node21.isParamList();
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(47, node33, node39);
        java.lang.String str42 = node41.getSourceFileName();
        node41.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray46, (int) (byte) -1, (int) (short) 1);
        boolean boolean50 = node49.isIn();
        boolean boolean51 = node49.isContinue();
        java.lang.String str55 = node49.toString(true, true, false);
        com.google.javascript.rhino.Node node56 = node41.clonePropsFrom(node49);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        boolean boolean62 = node61.isIn();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray69, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray80, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node84 = node78.useSourceInfoIfMissingFrom(node83);
        boolean boolean85 = node72.isEquivalentToTyped(node84);
        boolean boolean86 = node72.isNull();
        com.google.javascript.rhino.Node node87 = node61.copyInformationFromForTree(node72);
        boolean boolean88 = node72.isSetterDef();
        int int89 = node72.getLength();
        boolean boolean90 = node72.isName();
        boolean boolean91 = node72.isFalse();
        java.lang.String[] strArray93 = new java.lang.String[] { "ERROR\n" };
        java.util.LinkedHashSet<java.lang.String> strSet94 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet94, strArray93);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet94);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet94);
        int int98 = node41.getSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildBefore(node27, node41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ERROR" + "'", str55, "ERROR");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(nodeArray80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        node21.setVarArgs(true);
        com.google.javascript.rhino.jstype.JSType jSType28 = node21.getJSType();
        boolean boolean29 = node21.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4, "");
        boolean boolean3 = node2.isString();
        java.lang.Appendable appendable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            node2.appendStringTree(appendable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        boolean boolean32 = node30.isInc();
        com.google.javascript.rhino.Node node33 = node30.removeChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray4, 1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(30, nodeArray4, 55, 52);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, nodeArray4, 55, 43);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "ERROR");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node2.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        int int24 = node21.getChangeTime();
        boolean boolean25 = node21.isIf();
        boolean boolean26 = node21.isRegExp();
        boolean boolean27 = node21.isExprResult();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(47, node33, node39);
        java.lang.String str42 = node41.getSourceFileName();
        boolean boolean43 = node41.hasOneChild();
        int int44 = node21.getIndexOfChild(node41);
        com.google.javascript.rhino.Node node45 = node21.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isFromExterns();
        node4.setSourceFileForTesting("REGEXP ");
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        boolean boolean40 = node39.isIn();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node62 = node56.useSourceInfoIfMissingFrom(node61);
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        boolean boolean64 = node50.isNull();
        com.google.javascript.rhino.Node node65 = node39.copyInformationFromForTree(node50);
        boolean boolean66 = node50.isSetterDef();
        int int67 = node50.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node50.children();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray75, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node79 = node73.useSourceInfoIfMissingFrom(node78);
        node79.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node83 = node50.useSourceInfoFromForTree(node79);
        boolean boolean84 = node79.isLabel();
        com.google.javascript.rhino.Node node85 = node4.copyInformationFrom(node79);
        boolean boolean86 = node85.isFor();
        com.google.javascript.rhino.Node node87 = node85.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = node87.isFalse();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        java.lang.String str17 = node5.toString();
        node5.setType((int) (short) 100);
        boolean boolean20 = node5.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node5.setDouble((double) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ERROR" + "'", str17, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        java.lang.String[] strArray16 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = node13.isParamList();
        int int21 = node13.getCharno();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        boolean boolean29 = node28.isIn();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node51 = node45.useSourceInfoIfMissingFrom(node50);
        boolean boolean52 = node39.isEquivalentToTyped(node51);
        boolean boolean53 = node39.isNull();
        com.google.javascript.rhino.Node node54 = node28.copyInformationFromForTree(node39);
        node28.detachChildren();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(48, node28);
        java.lang.String str57 = node56.getSourceFileName();
        boolean boolean58 = node13.isEquivalentToTyped(node56);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4, "");
        com.google.javascript.rhino.Node node3 = node2.getLastSibling();
        boolean boolean4 = node2.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node15.isGetProp();
        java.lang.String str53 = node15.toString(false, true, true);
        node15.removeProp(16);
        node15.putBooleanProp((int) (short) 100, true);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 10);
        boolean boolean61 = node15.isEquivalentToTyped(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node60.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator63 = nodeIterable62.spliterator();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR" + "'", str53, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(nodeSpliterator63);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        boolean boolean55 = node54.isFunction();
        boolean boolean56 = node54.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        node5.detachChildren();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(48, node5);
        boolean boolean34 = node5.isAssignAdd();
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node45 = node39.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        boolean boolean57 = node44.isEquivalentToTyped(node56);
        boolean boolean58 = node56.isAssignAdd();
        boolean boolean59 = node56.hasChildren();
        boolean boolean60 = node56.isSetterDef();
        node56.addSuppression("ERROR\n");
        node56.setLength(52);
        boolean boolean65 = node5.isEquivalentTo(node56);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node71.isFor();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(0, node71, 0, 0);
        boolean boolean82 = node71.isNot();
        boolean boolean83 = node71.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            node56.removeChild(node71);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        boolean boolean18 = node5.isNE();
        boolean boolean19 = node5.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isWith();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        boolean boolean16 = node15.isIn();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node38 = node32.useSourceInfoIfMissingFrom(node37);
        boolean boolean39 = node26.isEquivalentToTyped(node38);
        boolean boolean40 = node26.isNull();
        com.google.javascript.rhino.Node node41 = node15.copyInformationFromForTree(node26);
        boolean boolean42 = node26.isSetterDef();
        int int43 = node26.getLength();
        boolean boolean44 = node26.isName();
        com.google.javascript.rhino.Node node45 = node4.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean46 = node26.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            node26.setSideEffectFlags(57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        boolean boolean25 = node21.isInc();
        boolean boolean26 = node21.isSwitch();
        node21.addSuppression("hi!");
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(47, node34, node40);
        node34.detachChildren();
        boolean boolean44 = node34.hasMoreThanOneChild();
        boolean boolean45 = node34.isNumber();
        com.google.javascript.rhino.Node node46 = node21.srcref(node34);
        com.google.javascript.rhino.Node node48 = node34.getAncestor(56);
        // The following exception was thrown during execution in test generation
        try {
            node34.setSideEffectFlags(51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        boolean boolean26 = node9.isTry();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags1.setMutatesGlobalState();
        boolean boolean4 = sideEffectFlags3.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags3.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = sideEffectFlags3.setMutatesArguments();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
        org.junit.Assert.assertNotNull(sideEffectFlags6);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        boolean boolean14 = node13.isRegExp();
        boolean boolean15 = node13.isGetElem();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node21.isFor();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(0, node21, 0, 0);
        boolean boolean32 = node21.isString();
        int int33 = node21.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node node45 = node21.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node46 = node21.removeChildren();
        boolean boolean47 = node21.isGetElem();
        boolean boolean48 = node21.isNot();
        com.google.javascript.rhino.Node node49 = node13.srcrefTree(node21);
        node13.setLength((-1));
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node4.setStaticSourceFile(staticSourceFile31);
        java.lang.String str36 = node4.toString(true, false, true);
        boolean boolean37 = node4.isDelProp();
        boolean boolean38 = node4.isVarArgs();
        boolean boolean39 = node4.hasChildren();
        boolean boolean40 = node4.isBlock();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ERROR" + "'", str36, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        boolean boolean26 = node19.isFor();
        boolean boolean27 = node19.isParamList();
        com.google.javascript.rhino.Node node28 = node19.removeFirstChild();
        int int29 = node10.getIndexOfChild(node28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = node28.isNoSideEffectsCall();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("REGEXP ", (int) (byte) 10, 2);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        boolean boolean10 = node9.isIn();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node32 = node26.useSourceInfoIfMissingFrom(node31);
        boolean boolean33 = node20.isEquivalentToTyped(node32);
        boolean boolean34 = node20.isNull();
        com.google.javascript.rhino.Node node35 = node9.copyInformationFromForTree(node20);
        node9.detachChildren();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(48, node9);
        boolean boolean38 = node9.isAssignAdd();
        boolean boolean39 = node9.hasChildren();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node9);
        boolean boolean41 = node40.isGetElem();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        int int31 = node4.getType();
        boolean boolean32 = node4.isVar();
        boolean boolean33 = node4.isContinue();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node4.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags0.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = sideEffectFlags2.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = sideEffectFlags2.setMutatesArguments();
        sideEffectFlags5.clearSideEffectFlags();
        org.junit.Assert.assertNotNull(sideEffectFlags1);
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertNotNull(sideEffectFlags3);
        org.junit.Assert.assertNotNull(sideEffectFlags4);
        org.junit.Assert.assertNotNull(sideEffectFlags5);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        node1.detachChildren();
        java.lang.String str3 = node1.getSourceFileName();
        boolean boolean4 = node1.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node25 = node21.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node25.removeProp(48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(36, nodeArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = node6.getExistingIntProp(37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 37");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        int int33 = node16.getLength();
        boolean boolean34 = node16.isOnlyModifiesArgumentsCall();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        boolean boolean41 = node40.isIn();
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray43, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node52 = node46.useSourceInfoIfMissingFrom(node51);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray59, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node63 = node57.useSourceInfoIfMissingFrom(node62);
        boolean boolean64 = node51.isEquivalentToTyped(node63);
        boolean boolean65 = node51.isNull();
        com.google.javascript.rhino.Node node66 = node40.copyInformationFromForTree(node51);
        boolean boolean67 = node51.isSetterDef();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(10, node51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = null;
        com.google.javascript.rhino.Node node70 = node51.setJSDocInfo(jSDocInfo69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        boolean boolean76 = node75.isCast();
        com.google.javascript.rhino.InputId inputId77 = node75.getInputId();
        node75.setType((int) 'a');
        java.util.Set<java.lang.String> strSet80 = node75.getDirectives();
        boolean boolean81 = node75.isWith();
        boolean boolean82 = node75.isNull();
        boolean boolean83 = node75.isCase();
        boolean boolean84 = node75.hasChildren();
        java.lang.Object obj86 = node75.getProp(42);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(8, node16, node70, node75, (int) (short) 10, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isCast();
        boolean boolean39 = node2.isFunction();
        boolean boolean40 = node2.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isCall();
        java.lang.String str16 = node5.getSourceFileName();
        boolean boolean17 = node5.isInstanceOf();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.mayMutateArguments();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        node27.putIntProp(2, 10);
        boolean boolean32 = node27.isNull();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isFor();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node38, 0, 0);
        boolean boolean49 = node38.isString();
        int int50 = node38.getSourceOffset();
        boolean boolean51 = node38.isVarArgs();
        com.google.javascript.rhino.Node node52 = node27.copyInformationFromForTree(node38);
        boolean boolean53 = node38.isReturn();
        com.google.javascript.rhino.Node node54 = node5.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray57, (int) (byte) -1, (int) (short) 1);
        boolean boolean61 = node60.isIn();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        boolean boolean67 = node66.isIn();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(47, node60, node66);
        boolean boolean69 = node68.isRegExp();
        boolean boolean70 = node68.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node71 = node54.srcref(node68);
        boolean boolean72 = node54.isSetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = null;
        node54.setStaticSourceFile(staticSourceFile73);
        java.util.Set<java.lang.String> strSet75 = node54.getDirectives();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strSet75);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        boolean boolean49 = node48.isNE();
        node48.setVarArgs(false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node[] nodeArray37 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray37, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray42, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node46 = node40.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray48, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray53 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray53, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node57 = node51.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = node45.isEquivalentToTyped(node57);
        boolean boolean59 = node45.isNull();
        com.google.javascript.rhino.Node node60 = node34.copyInformationFromForTree(node45);
        boolean boolean61 = node45.isSetterDef();
        int int62 = node45.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node45.children();
        com.google.javascript.rhino.Node[] nodeArray65 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray65, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node74 = node68.useSourceInfoIfMissingFrom(node73);
        node74.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node78 = node45.useSourceInfoFromForTree(node74);
        boolean boolean79 = node74.isLabel();
        boolean boolean80 = node29.isEquivalentToTyped(node74);
        boolean boolean81 = node29.isReturn();
        com.google.javascript.rhino.Node node82 = null;
        boolean boolean83 = node29.hasChild(node82);
        com.google.javascript.rhino.Node node84 = node29.getParent();
        node84.addSuppression("");
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray37);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(nodeArray53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(nodeArray65);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        node4.detachChildren();
        boolean boolean32 = node4.isName();
        java.lang.Object obj34 = node4.getProp(4);
        int int35 = node4.getType();
        node4.setWasEmptyNode(false);
        java.lang.String str41 = node4.toString(false, false, false);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ERROR" + "'", str41, "ERROR");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("ERROR", 4095, 53);
        boolean boolean4 = node3.isExprResult();
        boolean boolean5 = node3.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node15.isAssign();
        int int17 = node15.getSideEffectFlags();
        com.google.javascript.rhino.Node node18 = node15.getLastSibling();
        boolean boolean19 = node15.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node15.getJSDocInfo();
        boolean boolean21 = node15.isUnscopedQualifiedName();
        boolean boolean22 = node15.mayMutateArguments();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        boolean boolean26 = node21.isNot();
        boolean boolean27 = node21.isExprResult();
        node21.setLineno(30);
        node21.setChangeTime((int) (short) 10);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4, (int) (byte) -1, (int) (short) 1);
        boolean boolean8 = node7.isIn();
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray10, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray15, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node19 = node13.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray26, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node30 = node24.useSourceInfoIfMissingFrom(node29);
        boolean boolean31 = node18.isEquivalentToTyped(node30);
        boolean boolean32 = node18.isNull();
        com.google.javascript.rhino.Node node33 = node7.copyInformationFromForTree(node18);
        boolean boolean34 = node18.isSetterDef();
        int int35 = node18.getLength();
        boolean boolean36 = node18.isDebugger();
        boolean boolean37 = node2.isEquivalentToTyped(node18);
        boolean boolean38 = node2.isNoSideEffectsCall();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray41, (int) (byte) -1, (int) (short) 1);
        boolean boolean45 = node44.isIn();
        com.google.javascript.rhino.Node[] nodeArray47 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray47, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray52 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray52, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node56 = node50.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray58 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray58, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray63, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node67 = node61.useSourceInfoIfMissingFrom(node66);
        boolean boolean68 = node55.isEquivalentToTyped(node67);
        boolean boolean69 = node55.isNull();
        com.google.javascript.rhino.Node node70 = node44.copyInformationFromForTree(node55);
        boolean boolean71 = node55.isSetterDef();
        int int72 = node55.getLength();
        boolean boolean73 = node55.isName();
        boolean boolean74 = node55.isFromExterns();
        boolean boolean75 = node55.isDec();
        node2.putProp(39, (java.lang.Object) node55);
        boolean boolean77 = node2.isParamList();
        node2.setType(32);
        com.google.javascript.rhino.Node node80 = node2.removeChildren();
        int int81 = node2.getLength();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeArray10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeArray47);
        org.junit.Assert.assertNotNull(nodeArray52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray58);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        boolean boolean17 = node5.isEmpty();
        boolean boolean18 = node5.isCatch();
        boolean boolean19 = node5.isOnlyModifiesArgumentsCall();
        boolean boolean20 = node5.isNoSideEffectsCall();
        node5.putBooleanProp((int) '4', true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node5.new FileLevelJsDocBuilder();
        node5.removeProp(43);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.hasChildren();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(32, node22, 47, 32);
        boolean boolean29 = node22.isTrue();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray31, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray36, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node40 = node34.useSourceInfoIfMissingFrom(node39);
        boolean boolean41 = node34.isFor();
        int int43 = node34.getIntProp(0);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        boolean boolean49 = node48.isIn();
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray51, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray62, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node71 = node65.useSourceInfoIfMissingFrom(node70);
        boolean boolean72 = node59.isEquivalentToTyped(node71);
        boolean boolean73 = node59.isNull();
        com.google.javascript.rhino.Node node74 = node48.copyInformationFromForTree(node59);
        boolean boolean75 = node59.isSetterDef();
        int int76 = node59.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node59.children();
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node88 = node82.useSourceInfoIfMissingFrom(node87);
        node88.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node92 = node59.useSourceInfoFromForTree(node88);
        boolean boolean93 = node34.isEquivalentTo(node92);
        boolean boolean94 = node92.isOptionalArg();
        node92.setLineno((int) (short) 10);
        java.lang.String str97 = node22.checkTreeEquals(node92);
        boolean boolean98 = node92.isDo();
        boolean boolean99 = node92.isDo();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(nodeIterable77);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node21.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        java.lang.String str26 = node21.toString();
        boolean boolean27 = node21.isGetProp();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ERROR" + "'", str26, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "");
        node2.setLineno((int) (short) 0);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node4.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        java.lang.String str23 = node4.checkTreeEquals(node22);
        java.lang.Appendable appendable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.appendStringTree(appendable24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node29.getJSDocInfo();
        boolean boolean31 = node29.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        boolean boolean33 = node15.isName();
        boolean boolean34 = node15.isFalse();
        node15.setLength(56);
        boolean boolean37 = node15.isAnd();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node30.isTypeOf();
        com.google.javascript.rhino.jstype.JSType jSType32 = node30.getJSType();
        com.google.javascript.rhino.Node node33 = node30.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = node33.getLineno();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(48, "hi!");
        int int4 = node2.getIntProp((int) (byte) -1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        node5.detachChildren();
        boolean boolean15 = node5.isAssign();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray22 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray22, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node26 = node20.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node20.isFor();
        int int29 = node20.getIntProp(0);
        boolean boolean30 = node20.isLocalResultCall();
        int int31 = node20.getSourcePosition();
        java.lang.String str32 = node5.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node33 = node20.cloneNode();
        boolean boolean34 = node33.isCast();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(nodeArray22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        node11.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray16, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray21 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray21, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoIfMissingFrom(node24);
        node11.addChildToFront(node24);
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray28, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = node31.isIn();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node42.isNull();
        com.google.javascript.rhino.Node node57 = node31.copyInformationFromForTree(node42);
        boolean boolean58 = node42.isSetterDef();
        boolean boolean59 = node42.isHook();
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray66, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node70 = node64.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray77, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node81 = node75.useSourceInfoIfMissingFrom(node80);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray83, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray88, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node92 = node86.useSourceInfoIfMissingFrom(node91);
        boolean boolean93 = node80.isEquivalentToTyped(node92);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) 'a', node11, node42, node70, node80);
        com.google.javascript.rhino.Node node95 = node42.getNext();
        boolean boolean96 = node42.isQualifiedName();
        boolean boolean97 = node42.isWith();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertNotNull(nodeArray21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isReturn();
        boolean boolean17 = node5.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        boolean boolean40 = node27.isEquivalentToTyped(node39);
        boolean boolean41 = node39.isAssignAdd();
        com.google.javascript.rhino.Node node42 = node39.getParent();
        boolean boolean43 = node39.isInc();
        boolean boolean44 = node39.isSwitch();
        node5.addChildToFront(node39);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(47, "");
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        boolean boolean54 = node53.isIn();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray56, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray61 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray61, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node65 = node59.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray67, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray72, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node76 = node70.useSourceInfoIfMissingFrom(node75);
        boolean boolean77 = node64.isEquivalentToTyped(node76);
        boolean boolean78 = node64.isNull();
        com.google.javascript.rhino.Node node79 = node53.copyInformationFromForTree(node64);
        boolean boolean80 = node64.isSetterDef();
        int int81 = node64.getLength();
        boolean boolean82 = node64.isDebugger();
        boolean boolean83 = node48.isEquivalentToTyped(node64);
        boolean boolean84 = node48.isNoSideEffectsCall();
        boolean boolean85 = node48.isGetElem();
        boolean boolean86 = node48.isDefaultCase();
        node48.setWasEmptyNode(true);
        com.google.javascript.rhino.Node[] nodeArray90 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray90, (int) (byte) -1, (int) (short) 1);
        boolean boolean94 = node93.isIn();
        boolean boolean95 = node93.isContinue();
        boolean boolean96 = node93.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            node39.addChildAfter(node48, node93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeArray90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray3, 1, 4095);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray3, 4, 0);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isLabel();
        com.google.javascript.rhino.Node node15 = node12.cloneNode();
        boolean boolean16 = node12.isTry();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node65.isName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        int int31 = node4.getType();
        boolean boolean32 = node4.hasOneChild();
        boolean boolean33 = node4.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        boolean boolean24 = node9.wasEmptyNode();
        boolean boolean25 = node9.isCase();
        com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray27, (int) (byte) -1, (int) (short) 1);
        boolean boolean31 = node30.isCast();
        com.google.javascript.rhino.InputId inputId32 = node30.getInputId();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray34, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node[] nodeArray45 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray45, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray50, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node54 = node48.useSourceInfoIfMissingFrom(node53);
        boolean boolean55 = node42.isEquivalentToTyped(node54);
        boolean boolean56 = node54.isAssignAdd();
        com.google.javascript.rhino.Node node57 = node30.srcref(node54);
        boolean boolean58 = node54.isSyntheticBlock();
        java.lang.String str59 = node9.checkTreeEquals(node54);
        boolean boolean60 = node54.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(inputId32);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeArray45);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isCast();
        com.google.javascript.rhino.InputId inputId6 = node4.getInputId();
        node4.setType((int) 'a');
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        boolean boolean10 = node4.isInc();
        boolean boolean11 = node4.isScript();
        node4.setChangeTime((int) (short) 100);
        boolean boolean14 = node4.isNumber();
        boolean boolean15 = node4.isNE();
        boolean boolean16 = node4.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 1, 0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node3.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(staticSourceFile4);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray2, 2, (int) ' ');
        com.google.javascript.rhino.Node node9 = node8.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node9.putBooleanProp(50, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        boolean boolean23 = node10.isEquivalentToTyped(node22);
        java.util.Set<java.lang.String> strSet24 = node22.getDirectives();
        com.google.javascript.rhino.Node node25 = node22.removeChildren();
        boolean boolean26 = node22.isNew();
        boolean boolean27 = node22.isParamList();
        boolean boolean28 = node22.isScript();
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node39 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node40 = node33.removeFirstChild();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(49, node22, node33);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "", 15, (int) (byte) -1);
        boolean boolean5 = node4.isParamList();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        boolean boolean18 = node11.isFor();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(0, node11, 0, 0);
        boolean boolean22 = node11.isReturn();
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray25, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray30 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray30, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node34 = node28.useSourceInfoIfMissingFrom(node33);
        boolean boolean35 = node28.isFor();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(0, node28, 0, 0);
        boolean boolean39 = node28.isNew();
        boolean boolean40 = node28.isCall();
        node28.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node43 = node11.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean44 = node28.isDelProp();
        boolean boolean45 = node28.isTry();
        boolean boolean46 = node4.isEquivalentToTyped(node28);
        node28.addSuppression("REGEXP ");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray17, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node21 = node15.useSourceInfoIfMissingFrom(node20);
        boolean boolean22 = node9.isEquivalentToTyped(node21);
        boolean boolean23 = node9.isNull();
        java.lang.String str24 = node9.getSourceFileName();
        boolean boolean25 = node9.isFor();
        com.google.javascript.rhino.Node node26 = node9.cloneTree();
        boolean boolean27 = node26.isDelProp();
        boolean boolean28 = node26.isFunction();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node29 = node5.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node5.removeChildren();
        boolean boolean31 = node5.isGetElem();
        com.google.javascript.rhino.Node[] nodeArray33 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray33, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray38, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node42 = node36.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray44, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node53 = node47.useSourceInfoIfMissingFrom(node52);
        boolean boolean54 = node41.isEquivalentToTyped(node53);
        boolean boolean55 = node53.isAssignAdd();
        boolean boolean56 = node53.hasChildren();
        boolean boolean57 = node53.isSetterDef();
        node53.addSuppression("ERROR\n");
        boolean boolean60 = node53.isStringKey();
        com.google.javascript.rhino.Node node61 = node53.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray64, (int) (byte) -1, (int) (short) 1);
        boolean boolean68 = node67.isIn();
        com.google.javascript.rhino.Node[] nodeArray70 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray70, (int) (byte) -1, (int) (short) 1);
        boolean boolean74 = node73.isIn();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(47, node67, node73);
        java.lang.String str76 = node75.getSourceFileName();
        java.lang.String[] strArray78 = new java.lang.String[] { "ERROR" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        node75.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet79);
        boolean boolean84 = node5.wasEmptyNode();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeArray33);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray44);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeArray70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        boolean boolean7 = node4.isDelProp();
        node4.putIntProp((int) (short) 100, 47);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        boolean boolean7 = node4.isEmpty();
        boolean boolean8 = node4.isGetElem();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isContinue();
        boolean boolean7 = node4.isDelProp();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node4.getAncestors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node4.getJSDocInfo();
        boolean boolean10 = node4.hasChildren();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        boolean boolean12 = node11.isIn();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, node5, node11);
        java.lang.String str14 = node13.getSourceFileName();
        boolean boolean15 = node13.hasOneChild();
        // The following exception was thrown during execution in test generation
        try {
            node13.setString("INSTANCEOF [is_namespace: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: REGEXP is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        boolean boolean66 = node62.isCall();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node11 = node5.useSourceInfoIfMissingFrom(node10);
        boolean boolean12 = node5.isFor();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node5, 0, 0);
        boolean boolean16 = node5.isString();
        int int17 = node5.getSourceOffset();
        boolean boolean18 = node5.isVarArgs();
        boolean boolean19 = node5.isDo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        com.google.javascript.rhino.Node node21 = node5.setJSDocInfo(jSDocInfo20);
        int int22 = node5.getSourcePosition();
        node5.setLength(38);
        node5.putBooleanProp((int) (byte) 1, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = node5.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpected prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = sideEffectFlags1.clearAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertNotNull(sideEffectFlags2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray2, (int) (byte) -1, (int) (short) 1);
        boolean boolean6 = node5.isIn();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = node11.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray19, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node28 = node22.useSourceInfoIfMissingFrom(node27);
        boolean boolean29 = node16.isEquivalentToTyped(node28);
        boolean boolean30 = node16.isNull();
        com.google.javascript.rhino.Node node31 = node5.copyInformationFromForTree(node16);
        boolean boolean32 = node16.isSetterDef();
        boolean boolean33 = node16.isLabel();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        boolean boolean45 = node38.isCatch();
        com.google.javascript.rhino.Node node46 = node16.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray49, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray54, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node58 = node52.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node52.isFor();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node52, 0, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(30, node16, node62, (int) (short) -1, 16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray68, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray73, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node77 = node71.useSourceInfoIfMissingFrom(node76);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray79, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray84 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray84, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node88 = node82.useSourceInfoIfMissingFrom(node87);
        boolean boolean89 = node76.isEquivalentToTyped(node88);
        boolean boolean90 = node88.isAssignAdd();
        com.google.javascript.rhino.Node node91 = node88.getParent();
        boolean boolean92 = node88.isInc();
        boolean boolean93 = node88.isSwitch();
        boolean boolean94 = node88.isSyntheticBlock();
        boolean boolean95 = node16.isEquivalentTo(node88);
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = node16.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertNotNull(nodeArray84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNull(jSDocInfo96);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node15.children();
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray35, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node44 = node38.useSourceInfoIfMissingFrom(node43);
        node44.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node node48 = node15.useSourceInfoFromForTree(node44);
        java.lang.String str49 = node48.toStringTree();
        node48.addSuppression("");
        java.lang.String str52 = node48.getQualifiedName();
        boolean boolean53 = node48.isFor();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ERROR\n" + "'", str49, "ERROR\n");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node10 = node4.useSourceInfoIfMissingFrom(node9);
        boolean boolean11 = node10.isVoid();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray13, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node22 = node16.useSourceInfoIfMissingFrom(node21);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray24, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray29 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray29, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node33 = node27.useSourceInfoIfMissingFrom(node32);
        boolean boolean34 = node21.isEquivalentToTyped(node33);
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.hasChildren();
        boolean boolean37 = node33.isSetterDef();
        node33.addSuppression("ERROR\n");
        boolean boolean40 = node10.isEquivalentToShallow(node33);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node10.setStaticSourceFile(staticSourceFile41);
        boolean boolean43 = node10.isDefaultCase();
        boolean boolean44 = node10.isOr();
        boolean boolean45 = node10.isThrow();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(55);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(23, "EQ \n", 47, 0);
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        boolean boolean17 = node10.isFor();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node10, 0, 0);
        boolean boolean21 = node10.isString();
        int int22 = node10.getSourceOffset();
        boolean boolean23 = node10.isVarArgs();
        int int24 = node10.getChildCount();
        boolean boolean25 = node10.isLabel();
        boolean boolean26 = node10.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node27 = node4.clonePropsFrom(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node27.siblings();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeIterable28);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray1, (int) (byte) -1, (int) (short) 1);
        boolean boolean5 = node4.isIn();
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray7, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray12, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node16 = node10.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray23, (int) (byte) -1, (int) (short) 1);
        com.google.javascript.rhino.Node node27 = node21.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node15.isEquivalentToTyped(node27);
        boolean boolean29 = node15.isNull();
        com.google.javascript.rhino.Node node30 = node4.copyInformationFromForTree(node15);
        boolean boolean31 = node15.isSetterDef();
        int int32 = node15.getLength();
        com.google.javascript.rhino.Node node33 = node15.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = node33.isStringKey();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(node33);
    }
}


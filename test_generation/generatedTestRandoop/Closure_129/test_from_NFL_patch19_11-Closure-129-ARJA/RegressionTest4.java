import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(409638, nodeArray3, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) ' ', nodeArray3, 55, 48);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(39, nodeArray3, (int) ' ', 32);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        node57.setCharno((int) '#');
        boolean boolean61 = node57.isDec();
        int int62 = node57.getChildCount();
        boolean boolean63 = node57.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node8.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', node8);
        boolean boolean23 = node8.isOnlyModifiesThisCall();
        boolean boolean24 = node8.isThrow();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean29 = node28.isFor();
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.InputId inputId31 = null;
        node28.setInputId(inputId31);
        com.google.javascript.rhino.InputId inputId33 = node28.getInputId();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(47, "BITXOR", 12, 48);
        int int40 = node39.getType();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        boolean boolean51 = node50.isAssignAdd();
        boolean boolean52 = node50.isFromExterns();
        boolean boolean53 = node50.isVarArgs();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        boolean boolean63 = node62.isAssignAdd();
        boolean boolean64 = node62.isTrue();
        boolean boolean65 = node62.wasEmptyNode();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = node69.copyInformationFrom(node73);
        boolean boolean75 = node73.isStringKey();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node84 = node79.copyInformationFrom(node83);
        com.google.javascript.rhino.Node node85 = node73.srcrefTree(node84);
        com.google.javascript.rhino.Node node86 = node85.cloneNode();
        boolean boolean87 = node85.isLabelName();
        boolean boolean88 = node85.isName();
        boolean boolean89 = node85.isVarArgs();
        boolean boolean90 = node85.isCase();
        boolean boolean91 = node85.isVar();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(54, node50, node62, node85);
        com.google.javascript.rhino.Node node93 = node39.useSourceInfoIfMissingFromForTree(node85);
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildBefore(node28, node93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 47 + "'", int40 == 47);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        boolean boolean4 = node3.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        int int14 = node13.getChangeTime();
        node13.setVarArgs(true);
        node13.setType(51);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node27.isAssignAdd();
        boolean boolean29 = node27.isTrue();
        boolean boolean30 = node27.wasEmptyNode();
        boolean boolean31 = node27.isStringKey();
        boolean boolean32 = node27.isTypeOf();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        boolean boolean43 = node41.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean48 = node41.hasChild(node47);
        com.google.javascript.rhino.Node node49 = node27.clonePropsFrom(node47);
        com.google.javascript.rhino.Node node50 = node13.srcrefTree(node27);
        node3.addChildToFront(node13);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        boolean boolean61 = node60.isAssignAdd();
        boolean boolean62 = node60.isFromExterns();
        boolean boolean63 = node60.isVarArgs();
        node60.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node node66 = node13.useSourceInfoFromForTree(node60);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        boolean boolean33 = node12.isOptionalArg();
        node12.setCharno(409638);
        boolean boolean36 = node12.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        boolean boolean33 = node29.isComma();
        node29.setCharno(56);
        com.google.javascript.rhino.Node node36 = node29.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        node57.removeProp(48);
        boolean boolean85 = node57.isTry();
        boolean boolean86 = node57.isAssign();
        boolean boolean87 = node57.isTry();
        boolean boolean88 = node57.isDo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(38, 55, (int) (short) 0);
        boolean boolean4 = node3.isNE();
        boolean boolean5 = node3.isIn();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node3.siblings();
        boolean boolean7 = node3.isParamList();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        node20.addSuppression("hi!");
        boolean boolean23 = node11.isEquivalentTo(node20);
        boolean boolean24 = node20.isGetterDef();
        node20.setType((int) '#');
        boolean boolean27 = node20.isVar();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        boolean boolean37 = node36.isAssignAdd();
        boolean boolean38 = node36.isTrue();
        boolean boolean39 = node36.wasEmptyNode();
        int int40 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node36.getJSDocInfo();
        boolean boolean42 = node36.isString();
        com.google.javascript.rhino.Node node43 = node36.cloneNode();
        boolean boolean44 = node36.isFor();
        com.google.javascript.rhino.Node node45 = node3.srcref(node36);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        boolean boolean2 = node1.isAnd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node1.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder3);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isNumber();
        com.google.javascript.rhino.Node node61 = node57.removeChildren();
        boolean boolean62 = node57.isCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(409638, nodeArray4, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(15, nodeArray4, 42, 0);
        boolean boolean12 = node11.isDefaultCase();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node23 = node22.getLastSibling();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100, node22);
        com.google.javascript.rhino.Node node25 = node24.removeFirstChild();
        java.lang.Object obj27 = node24.getProp(55);
        boolean boolean28 = node24.isIn();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        java.lang.String str36 = node32.toString(true, true, true);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        boolean boolean46 = node44.isStringKey();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node56 = node44.srcrefTree(node55);
        int int57 = node56.getLineno();
        boolean boolean58 = node56.isCase();
        node56.setIsSyntheticBlock(true);
        boolean boolean61 = node56.isParamList();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(47, node11, node24, node32, node56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = null;
        com.google.javascript.rhino.Node node64 = node56.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.Node node65 = node56.getParent();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER 51.0 36" + "'", str36, "NUMBER 51.0 36");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node27.getJsDocBuilderForNode();
        node27.setSourceEncodedPositionForTree((int) (byte) 100);
        boolean boolean36 = node27.isExprResult();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        node49.addSuppression("hi!");
        boolean boolean52 = node40.isEquivalentTo(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isDelProp();
        boolean boolean70 = node56.isDo();
        java.lang.Object obj72 = node56.getProp(55);
        int int74 = node56.getIntProp(38);
        node40.addChildrenToBack(node56);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder76 = node56.getJsDocBuilderForNode();
        int int77 = node27.getIndexOfChild(node56);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        boolean boolean21 = node19.isStringKey();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node31 = node19.srcrefTree(node30);
        com.google.javascript.rhino.Node node32 = node31.cloneNode();
        int int33 = node31.getCharno();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        boolean boolean43 = node41.isStringKey();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        com.google.javascript.rhino.Node node53 = node41.srcrefTree(node52);
        com.google.javascript.rhino.Node node54 = node53.cloneNode();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        boolean boolean64 = node54.hasChild(node58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        com.google.javascript.rhino.Node node66 = node54.setJSDocInfo(jSDocInfo65);
        boolean boolean67 = node66.isAnd();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = node71.copyInformationFrom(node75);
        boolean boolean77 = node76.isAssignAdd();
        boolean boolean78 = node76.isTrue();
        double double79 = node76.getDouble();
        com.google.javascript.rhino.Node node80 = node76.removeFirstChild();
        node31.addChildAfter(node66, node80);
        boolean boolean82 = node66.isComma();
        com.google.javascript.rhino.Node node83 = node8.useSourceInfoIfMissingFrom(node66);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node84 = node83.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) '4', "", 15, 4);
        com.google.javascript.rhino.Node node7 = node1.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node16.isAssignAdd();
        boolean boolean18 = node16.isFromExterns();
        boolean boolean19 = node16.isVarArgs();
        node16.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node node22 = node7.useSourceInfoIfMissingFrom(node16);
        java.lang.String str26 = node16.toString(true, true, false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER 0.0 [source_file: NUMBER 0.0]" + "'", str26, "NUMBER 0.0 [source_file: NUMBER 0.0]");
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [direct_eval: 52]");
        node1.setOptionalArg(false);
        boolean boolean4 = node1.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 100);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        boolean boolean27 = node19.isDec();
        com.google.javascript.rhino.Node node28 = node19.cloneNode();
        com.google.javascript.rhino.InputId inputId29 = node28.getInputId();
        node28.setSourceEncodedPosition(48);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = node46.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node52 = node40.srcrefTree(node51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node40.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) ' ', node40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node56 = node28.useSourceInfoIfMissingFromForTree(node54);
        // The following exception was thrown during execution in test generation
        try {
            node28.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        node3.setCharno((int) (short) 0);
        node3.setCharno(31);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node3.getAncestors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable23);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getCharno();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node14.cloneTree();
        boolean boolean16 = node14.isFunction();
        boolean boolean17 = node14.isRegExp();
        node8.addChildToBack(node14);
        boolean boolean20 = node8.getBooleanProp(0);
        int int21 = node8.getSourcePosition();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node31.isAssignAdd();
        boolean boolean33 = node31.isGetProp();
        java.lang.String str34 = node31.toStringTree();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        node47.addSuppression("hi!");
        boolean boolean50 = node38.isEquivalentTo(node47);
        node38.setDouble(1.0d);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = node56.copyInformationFrom(node60);
        int int62 = node61.getChangeTime();
        boolean boolean63 = node61.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        int int73 = node72.getChangeTime();
        boolean boolean74 = node72.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(100, node31, node38, node61, node72);
        node31.putIntProp(49, 52);
        java.lang.String str79 = node31.toString();
        boolean boolean80 = node31.isGetProp();
        boolean boolean81 = node31.isDebugger();
        com.google.javascript.rhino.Node node82 = node8.copyInformationFromForTree(node31);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 0.0\n" + "'", str34, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "NUMBER 0.0 [direct_eval: 52]" + "'", str79, "NUMBER 0.0 [direct_eval: 52]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isNumber();
        node57.setWasEmptyNode(true);
        boolean boolean63 = node57.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 100, 4095, 409638);
        boolean boolean68 = node67.isGetElem();
        boolean boolean69 = node67.isGetElem();
        node57.addChildrenToBack(node67);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 29, 50, 15);
        com.google.javascript.rhino.Node node4 = node3.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, (int) (byte) 1, (-1));
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        int int5 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = node9.copyInformationFrom(node13);
        boolean boolean15 = node13.isStringKey();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node25 = node13.srcrefTree(node24);
        boolean boolean26 = node25.isScript();
        boolean boolean27 = node25.isBreak();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        boolean boolean37 = node35.isStringKey();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        com.google.javascript.rhino.Node node47 = node35.srcrefTree(node46);
        boolean boolean48 = node47.isScript();
        com.google.javascript.rhino.Node node49 = node25.useSourceInfoFrom(node47);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        boolean boolean59 = node57.isStringKey();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        com.google.javascript.rhino.Node node69 = node57.srcrefTree(node68);
        boolean boolean70 = node68.isCatch();
        boolean boolean71 = node49.isEquivalentToTyped(node68);
        java.lang.String str72 = node49.getQualifiedName();
        node49.setDouble((double) (byte) -1);
        com.google.javascript.rhino.Node node75 = node3.useSourceInfoIfMissingFrom(node49);
        int int76 = node75.getCharno();
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        boolean boolean35 = node33.getBooleanProp(43);
        boolean boolean36 = node33.isDelProp();
        com.google.javascript.rhino.Node node37 = node8.useSourceInfoIfMissingFrom(node33);
        boolean boolean38 = node8.isParamList();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        boolean boolean49 = node47.isStringKey();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        com.google.javascript.rhino.Node node59 = node47.srcrefTree(node58);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node60.hasChild(node64);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        com.google.javascript.rhino.Node node72 = node60.setJSDocInfo(jSDocInfo71);
        boolean boolean73 = node72.isAnd();
        node72.setSourceEncodedPosition(2);
        node72.setDouble((double) 0.0f);
        java.lang.String str78 = node72.getQualifiedName();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 53, 38, 49);
        boolean boolean83 = node82.isGetElem();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node72, node82);
        node82.setType(39);
        // The following exception was thrown during execution in test generation
        try {
            node8.removeChild(node82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 54);
        boolean boolean2 = node1.isFor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        node9.addSuppression("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = node9.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        com.google.javascript.rhino.Node node20 = node9.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node39.isGetterDef();
        node39.setType((int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node49.isCase();
        boolean boolean63 = node49.isCast();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFrom(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node64.children();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node24, node64);
        boolean boolean67 = node9.isThis();
        boolean boolean68 = node9.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node9.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator70 = nodeIterable69.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(nodeSpliterator70);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        boolean boolean19 = node12.isHook();
        boolean boolean20 = node12.isInstanceOf();
        java.lang.String str21 = node12.getSourceFileName();
        boolean boolean22 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        com.google.javascript.rhino.Node node43 = node42.cloneNode();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node43.hasChild(node47);
        java.util.Set<java.lang.String> strSet54 = node43.getDirectives();
        boolean boolean55 = node43.isFromExterns();
        boolean boolean56 = node43.isBlock();
        boolean boolean57 = node43.isTry();
        node43.setOptionalArg(true);
        boolean boolean60 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node61 = node12.srcref(node43);
        int int62 = node12.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node20.siblings();
        boolean boolean34 = node20.isHook();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder35 = node20.getJsDocBuilderForNode();
        fileLevelJsDocBuilder35.append("hi!");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder35);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 29, 50, 15);
        boolean boolean4 = node3.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        java.lang.String[] strArray13 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet14);
        int int17 = node8.getLineno();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        int int27 = node26.getChangeTime();
        node26.setVarArgs(true);
        node26.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = node26.getJSDocInfo();
        boolean boolean33 = node26.isName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node26.setStaticSourceFile(staticSourceFile34);
        boolean boolean36 = node26.isWhile();
        boolean boolean37 = node26.isFalse();
        com.google.javascript.rhino.jstype.JSType jSType38 = node26.getJSType();
        boolean boolean39 = node8.isEquivalentToTyped(node26);
        com.google.javascript.rhino.jstype.JSType jSType40 = node8.getJSType();
        boolean boolean41 = node8.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 47 + "'", int4 == 47);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = node8.hasChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        boolean boolean26 = node25.isAssignAdd();
        boolean boolean27 = node25.isGetProp();
        com.google.javascript.rhino.Node node28 = node25.cloneTree();
        boolean boolean29 = node8.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node[] nodeArray32 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(409638, nodeArray32, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray32);
        boolean boolean37 = node36.isWith();
        node36.setChangeTime(40);
        boolean boolean40 = node36.hasOneChild();
        boolean boolean41 = node8.hasChild(node36);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeArray32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        boolean boolean42 = node24.isStringKey();
        node24.setDouble((double) (short) -1);
        boolean boolean45 = node24.isNumber();
        com.google.javascript.rhino.Node node46 = node24.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = node46.isWith();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(node46);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node11 = node10.getLastSibling();
        boolean boolean12 = node11.isInstanceOf();
        int int13 = node11.getType();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((-1), 10, 30);
        com.google.javascript.rhino.Node node18 = node11.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        node31.addSuppression("hi!");
        boolean boolean34 = node22.isEquivalentTo(node31);
        node22.setDouble(1.0d);
        boolean boolean37 = node22.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        boolean boolean47 = node46.isAssignAdd();
        boolean boolean48 = node46.isFromExterns();
        boolean boolean49 = node46.isVarArgs();
        boolean boolean50 = node46.isDebugger();
        int int51 = node22.getIndexOfChild(node46);
        boolean boolean52 = node22.isDefaultCase();
        boolean boolean53 = node11.hasChild(node22);
        com.google.javascript.rhino.Node node54 = node1.useSourceInfoFromForTree(node11);
        boolean boolean55 = node54.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 39 + "'", int13 == 39);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isFromExterns();
        boolean boolean12 = node9.isVarArgs();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node21.isAssignAdd();
        boolean boolean23 = node21.isTrue();
        boolean boolean24 = node21.wasEmptyNode();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        boolean boolean34 = node32.isStringKey();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node43);
        com.google.javascript.rhino.Node node45 = node44.cloneNode();
        boolean boolean46 = node44.isLabelName();
        boolean boolean47 = node44.isName();
        boolean boolean48 = node44.isVarArgs();
        boolean boolean49 = node44.isCase();
        boolean boolean50 = node44.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(54, node9, node21, node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node21.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        node57.setCharno((int) '#');
        com.google.javascript.rhino.InputId inputId61 = null;
        node57.setInputId(inputId61);
        boolean boolean63 = node57.isWith();
        boolean boolean64 = node57.isTrue();
        boolean boolean65 = node57.isInstanceOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.wasEmptyNode();
        boolean boolean12 = node8.isStringKey();
        com.google.javascript.rhino.Node node13 = node8.getParent();
        boolean boolean14 = node8.isReturn();
        com.google.javascript.rhino.Node node15 = node8.getLastSibling();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(39, 40, (int) '#');
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        int int21 = node8.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node8.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 39 + "'", int21 == 39);
        org.junit.Assert.assertNotNull(nodeIterable22);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node21.hasChild(node25);
        java.util.Set<java.lang.String> strSet32 = node21.getDirectives();
        boolean boolean33 = node21.isFromExterns();
        boolean boolean34 = node21.isBlock();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        boolean boolean48 = node46.isStringKey();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node58 = node46.srcrefTree(node57);
        boolean boolean59 = node58.isScript();
        boolean boolean60 = node58.isBreak();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node58.addChildToFront(node64);
        com.google.javascript.rhino.Node node66 = node38.copyInformationFrom(node64);
        node38.detachChildren();
        com.google.javascript.rhino.Node node68 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(56, node21, node38, node68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.wasEmptyNode();
        boolean boolean12 = node8.isCatch();
        boolean boolean13 = node8.isDebugger();
        boolean boolean14 = node8.isBreak();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node8.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor16 = ancestorIterable15.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor17 = ancestorIterable15.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor18 = ancestorIterable15.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor19 = ancestorIterable15.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNotNull(nodeItor19);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean11 = node8.getBooleanProp(55);
        boolean boolean12 = node8.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node20.siblings();
        boolean boolean35 = node20.getBooleanProp((int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        node19.detachChildren();
        double double21 = node19.getDouble();
        boolean boolean22 = node19.isWhile();
        boolean boolean23 = node19.isFunction();
        boolean boolean24 = node19.isReturn();
        com.google.javascript.rhino.Node node25 = node19.cloneNode();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        boolean boolean35 = node33.isStringKey();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        com.google.javascript.rhino.Node node45 = node33.srcrefTree(node44);
        boolean boolean46 = node45.isScript();
        boolean boolean47 = node45.isBreak();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node45.addChildToFront(node51);
        boolean boolean53 = node45.isDec();
        boolean boolean54 = node45.isCatch();
        java.lang.String str55 = node19.checkTreeEquals(node45);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n    NUMBER 0.0\n\n\nSubtree1: NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n    NUMBER 0.0\n" + "'", str55, "Node tree inequality:\nTree1:\nNUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n    NUMBER 0.0\n\n\nSubtree1: NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n    NUMBER 0.0\n");
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        node50.removeProp((int) (short) -1);
        boolean boolean53 = node8.isEquivalentToShallow(node50);
        boolean boolean54 = node8.isCast();
        boolean boolean55 = node8.isNot();
        com.google.javascript.rhino.Node node56 = node8.getParent();
        boolean boolean57 = node8.isExprResult();
        boolean boolean58 = node8.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        boolean boolean42 = node24.isStringKey();
        node24.setDouble((double) (short) -1);
        boolean boolean45 = node24.isContinue();
        boolean boolean46 = node24.hasChildren();
        boolean boolean48 = node24.getBooleanProp((int) (byte) -1);
        boolean boolean49 = node24.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isFunction();
        node3.setCharno((int) (short) 100);
        boolean boolean8 = node3.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [direct_eval: 52]");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) '#', (int) '#', 39);
        boolean boolean6 = node5.isOr();
        java.lang.String str7 = node5.getSourceFileName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFromForTree(node5);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.InputId inputId21 = null;
        node19.setInputId(inputId21);
        com.google.javascript.rhino.Node node24 = node19.getChildAtIndex(0);
        boolean boolean25 = node19.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        node46.addSuppression("hi!");
        boolean boolean49 = node37.isEquivalentTo(node46);
        boolean boolean50 = node46.isGetterDef();
        node46.setType((int) '#');
        boolean boolean53 = node46.isVar();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        boolean boolean63 = node62.isAssignAdd();
        boolean boolean64 = node62.isTrue();
        boolean boolean65 = node62.wasEmptyNode();
        int int66 = node46.getIndexOfChild(node62);
        com.google.javascript.rhino.Node node67 = node46.getFirstChild();
        int int68 = node46.getChangeTime();
        node27.addChildToFront(node46);
        boolean boolean70 = node27.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        int int5 = sideEffectFlags0.valueOf();
        int int6 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 24 + "'", int6 == 24);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        boolean boolean15 = node8.isWhile();
        node8.setOptionalArg(false);
        boolean boolean18 = node8.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isNot();
        node8.setType((int) '4');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node8.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        node3.setCharno((int) (short) 0);
        node3.setCharno(31);
        boolean boolean23 = node3.isGetElem();
        boolean boolean24 = node3.isLabel();
        com.google.javascript.rhino.Node node25 = node3.getNext();
        node3.setDouble((double) 50);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n", 31, 35);
        java.lang.Object obj5 = node3.getProp(50);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        boolean boolean30 = node29.isVarArgs();
        node29.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        node8.addChildToBack(node29);
        boolean boolean35 = node29.isOr();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        com.google.javascript.rhino.Node node40 = node39.getFirstChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        com.google.javascript.rhino.Node node46 = node39.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node56 = node55.getLastSibling();
        java.lang.String str57 = node55.getSourceFileName();
        com.google.javascript.rhino.Node node58 = null;
        node46.addChildrenAfter(node55, node58);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = node29.isEquivalentTo(node58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nERROR hi!\n\n\nSubtree1: NUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: ERROR hi!\n", (int) (byte) 100, 1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isWith();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node10 = node9.cloneTree();
        boolean boolean11 = node9.isFunction();
        boolean boolean12 = node9.isRegExp();
        boolean boolean13 = node9.isFunction();
        node3.addChildToBack(node9);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node9.getStaticSourceFile();
        boolean boolean16 = node9.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 409638 + "'", int4 == 409638);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        boolean boolean27 = node25.isStringKey();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node37 = node25.srcrefTree(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        boolean boolean47 = node45.isStringKey();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        node60.addSuppression("hi!");
        boolean boolean63 = node51.isEquivalentTo(node60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] { node36, node45, node60, node71 };
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) '#', nodeArray73);
        boolean boolean75 = node74.isLocalResultCall();
        com.google.javascript.rhino.Node node76 = node3.srcref(node74);
        boolean boolean77 = node74.isVar();
        com.google.javascript.rhino.Node node78 = node74.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(node78);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isIf();
        boolean boolean22 = node19.isFor();
        boolean boolean23 = node19.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        node4.setDouble(1.0d);
        boolean boolean19 = node4.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isFromExterns();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isDebugger();
        int int33 = node4.getIndexOfChild(node28);
        java.util.Set<java.lang.String> strSet34 = node4.getDirectives();
        boolean boolean35 = node4.isFor();
        int int36 = node4.getChangeTime();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(56, node4, 2, 35);
        node4.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node24.getAncestors();
        boolean boolean41 = node24.isGetElem();
        boolean boolean42 = node24.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        int int31 = node20.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        boolean boolean41 = node40.isAssignAdd();
        int int42 = node40.getCharno();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node47 = node46.cloneTree();
        boolean boolean48 = node46.isFunction();
        boolean boolean49 = node46.isRegExp();
        node40.addChildToBack(node46);
        boolean boolean51 = node40.isRegExp();
        com.google.javascript.rhino.Node node52 = node40.getLastSibling();
        boolean boolean53 = node40.isSyntheticBlock();
        node20.addChildrenToFront(node40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 39 + "'", int31 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isNumber();
        int int61 = node57.getChangeTime();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        node8.setSourceEncodedPositionForTree(48);
        int int14 = node8.getType();
        boolean boolean15 = node8.isThis();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(0, 35, (int) (short) 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 53, 38, 49);
        boolean boolean24 = node23.isSwitch();
        com.google.javascript.rhino.Node node25 = node23.removeChildren();
        boolean boolean26 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node27 = node19.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(55);
        // The following exception was thrown during execution in test generation
        try {
            node8.replaceChildAfter(node27, node29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 39 + "'", int14 == 39);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        node19.detachChildren();
        double double21 = node19.getDouble();
        boolean boolean22 = node19.isTry();
        boolean boolean23 = node19.isContinue();
        boolean boolean24 = node19.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node11 = node8.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        boolean boolean21 = node19.isStringKey();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node31 = node19.srcrefTree(node30);
        node31.detachChildren();
        double double33 = node31.getDouble();
        boolean boolean34 = node31.isWhile();
        boolean boolean35 = node31.isFunction();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) '4', "", 15, 4);
        com.google.javascript.rhino.Node node43 = node37.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node52.isAssignAdd();
        boolean boolean54 = node52.isFromExterns();
        boolean boolean55 = node52.isVarArgs();
        node52.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node52.getStaticSourceFile();
        node31.setStaticSourceFile(staticSourceFile59);
        node8.setStaticSourceFile(staticSourceFile59);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(staticSourceFile59);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        boolean boolean42 = node41.isEmpty();
        node41.setChangeTime(10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        boolean boolean55 = node7.isWith();
        node7.setVarArgs(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        node55.addSuppression("hi!");
        boolean boolean58 = node46.isEquivalentTo(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node31, node40, node55, node66 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', nodeArray68);
        java.lang.String str70 = node69.getQualifiedName();
        boolean boolean71 = node69.isHook();
        boolean boolean72 = node69.isNumber();
        com.google.javascript.rhino.Node node73 = node69.removeChildren();
        com.google.javascript.rhino.Node node74 = node8.copyInformationFromForTree(node69);
        boolean boolean75 = node69.isFunction();
        boolean boolean76 = node69.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getSourcePosition();
        java.lang.String str10 = node8.getQualifiedName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        int int16 = node15.getChildCount();
        boolean boolean17 = node15.isIn();
        boolean boolean18 = node8.isEquivalentTo(node15);
        boolean boolean19 = node15.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(409638, nodeArray6, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) 'a', nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(15, nodeArray6, 42, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((-1), nodeArray6);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(409638, nodeArray6, 35, 4095);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(32, nodeArray6);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        node31.addSuppression("hi!");
        boolean boolean34 = node22.isEquivalentTo(node31);
        boolean boolean35 = node22.isCase();
        boolean boolean36 = node22.isCast();
        com.google.javascript.rhino.Node node37 = node12.useSourceInfoIfMissingFrom(node22);
        boolean boolean38 = node12.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        int int40 = node24.getChildCount();
        boolean boolean41 = node24.isFor();
        node24.putBooleanProp(31, false);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        node57.addSuppression("hi!");
        boolean boolean60 = node48.isEquivalentTo(node57);
        boolean boolean61 = node57.isGetterDef();
        node57.setType((int) '#');
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = node71.copyInformationFrom(node75);
        node76.addSuppression("hi!");
        boolean boolean79 = node67.isEquivalentTo(node76);
        boolean boolean80 = node67.isCase();
        boolean boolean81 = node67.isCast();
        com.google.javascript.rhino.Node node82 = node57.useSourceInfoIfMissingFrom(node67);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = node86.copyInformationFrom(node90);
        com.google.javascript.rhino.Node node92 = node91.getLastSibling();
        java.lang.String str93 = node91.getSourceFileName();
        boolean boolean94 = node91.isCall();
        java.lang.String str95 = node57.checkTreeEquals(node91);
        node24.addChildToFront(node91);
        node24.setDouble((double) 32);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n" + "'", str95, "Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n");
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "BITXOR", 12, 48);
        int int5 = node4.getType();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = node10.copyInformationFrom(node14);
        boolean boolean16 = node15.isAssignAdd();
        boolean boolean17 = node15.isFromExterns();
        boolean boolean18 = node15.isVarArgs();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node27.isAssignAdd();
        boolean boolean29 = node27.isTrue();
        boolean boolean30 = node27.wasEmptyNode();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        boolean boolean40 = node38.isStringKey();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node50 = node38.srcrefTree(node49);
        com.google.javascript.rhino.Node node51 = node50.cloneNode();
        boolean boolean52 = node50.isLabelName();
        boolean boolean53 = node50.isName();
        boolean boolean54 = node50.isVarArgs();
        boolean boolean55 = node50.isCase();
        boolean boolean56 = node50.isVar();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(54, node15, node27, node50);
        com.google.javascript.rhino.Node node58 = node4.useSourceInfoIfMissingFromForTree(node50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = node4.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeIterable59);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        boolean boolean22 = node21.isScript();
        boolean boolean23 = node21.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node21.addChildToFront(node27);
        boolean boolean29 = node21.isDec();
        com.google.javascript.rhino.Node node30 = node21.cloneNode();
        boolean boolean31 = node30.isWhile();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(38, node30, 51, (int) (short) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node37 = node34.clonePropsFrom(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        boolean boolean47 = node45.isStringKey();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        com.google.javascript.rhino.Node node57 = node45.srcrefTree(node56);
        boolean boolean58 = node56.isCatch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        int int68 = node67.getChangeTime();
        boolean boolean69 = node67.hasMoreThanOneChild();
        java.lang.String str70 = node56.checkTreeEquals(node67);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        int int80 = node79.getChangeTime();
        node79.setVarArgs(true);
        java.lang.String str86 = node79.toString(false, true, true);
        com.google.javascript.rhino.Node node87 = node56.copyInformationFromForTree(node79);
        int int88 = node87.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = null;
        com.google.javascript.rhino.Node node90 = node87.setJSDocInfo(jSDocInfo89);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(35, node34, node90, 4095, (int) 'a');
        boolean boolean94 = node93.isFalse();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str86, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = null;
        com.google.javascript.rhino.Node node32 = node20.setJSDocInfo(jSDocInfo31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node37 = node36.cloneTree();
        boolean boolean38 = node36.isFunction();
        boolean boolean39 = node36.isRegExp();
        boolean boolean40 = node20.hasChild(node36);
        node36.putIntProp((int) (short) -1, 55);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        boolean boolean33 = node12.isGetterDef();
        boolean boolean34 = node12.isGetElem();
        boolean boolean35 = node12.isRegExp();
        node12.setLineno(43);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 23);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isNot();
        boolean boolean17 = node3.isFromExterns();
        com.google.javascript.rhino.Node node18 = node3.getLastSibling();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node26.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node37);
        node38.detachChildren();
        double double40 = node38.getDouble();
        boolean boolean41 = node38.isTry();
        boolean boolean42 = node38.isContinue();
        boolean boolean43 = node38.isOnlyModifiesThisCall();
        boolean boolean44 = node38.hasOneChild();
        com.google.javascript.rhino.Node node45 = node3.srcref(node38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node18.getChangeTime();
        boolean boolean21 = node18.isLabelName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) '4', "NUMBER 100.0 [source_file: NUMBER 0.0]\n", (int) (short) 100, 16);
        com.google.javascript.rhino.Node node27 = node18.srcrefTree(node26);
        node27.removeProp(40960);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(53, nodeArray1, 30, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node12.siblings();
        boolean boolean21 = node12.isObjectLit();
        boolean boolean22 = node12.isAssign();
        boolean boolean23 = node12.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        node8.addSuppression("NUMBER 0.0 [direct_eval: 52]");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        boolean boolean26 = node25.isAssignAdd();
        boolean boolean28 = node25.getBooleanProp(55);
        boolean boolean29 = node25.isSyntheticBlock();
        java.lang.String str30 = node25.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = node8.removeChildAfter(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isTrue();
        com.google.javascript.rhino.Node node22 = node19.cloneNode();
        boolean boolean23 = node19.isAdd();
        boolean boolean24 = node19.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node57.isScript();
        boolean boolean84 = node57.isScript();
        // The following exception was thrown during execution in test generation
        try {
            int int86 = node57.getExistingIntProp((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 52");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        int int10 = node9.getChangeTime();
        boolean boolean11 = node9.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("hi!");
        boolean boolean14 = node13.isNot();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(38, node9, node13);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "NUMBER 0.0 [var_args_name: 1]");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        boolean boolean19 = node3.isWith();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node39 = node27.srcrefTree(node38);
        boolean boolean40 = node39.isScript();
        boolean boolean41 = node39.isBreak();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        boolean boolean51 = node49.isStringKey();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        com.google.javascript.rhino.Node node61 = node49.srcrefTree(node60);
        boolean boolean62 = node61.isScript();
        com.google.javascript.rhino.Node node63 = node39.useSourceInfoFrom(node61);
        boolean boolean64 = node63.isSetterDef();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) '4', "", 15, 4);
        com.google.javascript.rhino.Node node72 = node66.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = node76.copyInformationFrom(node80);
        boolean boolean82 = node81.isAssignAdd();
        boolean boolean83 = node81.isFromExterns();
        boolean boolean84 = node81.isVarArgs();
        node81.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node node87 = node72.useSourceInfoIfMissingFrom(node81);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile88 = node81.getStaticSourceFile();
        node63.setStaticSourceFile(staticSourceFile88);
        node3.setStaticSourceFile(staticSourceFile88);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = node3.getExistingIntProp(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(staticSourceFile88);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node node80 = node77.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        java.lang.String str11 = node8.toStringTree();
        java.lang.String str12 = node8.toStringTree();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nERROR hi!\n\n\nSubtree1: NUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: ERROR hi!\n");
        com.google.javascript.rhino.Node node15 = node8.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 0.0\n" + "'", str11, "NUMBER 0.0\n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        boolean boolean18 = node8.isReturn();
        boolean boolean19 = node8.isGetterDef();
        com.google.javascript.rhino.Node node20 = node8.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node15.isStringKey();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node26);
        boolean boolean28 = node27.isScript();
        boolean boolean29 = node27.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        boolean boolean39 = node37.isStringKey();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node49 = node37.srcrefTree(node48);
        boolean boolean50 = node49.isScript();
        com.google.javascript.rhino.Node node51 = node27.useSourceInfoFrom(node49);
        int int52 = node4.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isDelProp();
        boolean boolean70 = node56.isDo();
        java.lang.Object obj72 = node56.getProp(55);
        com.google.javascript.rhino.Node node73 = node27.useSourceInfoFromForTree(node56);
        boolean boolean74 = node27.isAssign();
        boolean boolean75 = node27.hasOneChild();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int80 = node79.getSourcePosition();
        boolean boolean81 = node79.isWith();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node86 = node85.cloneTree();
        boolean boolean87 = node85.isFunction();
        boolean boolean88 = node85.isRegExp();
        boolean boolean89 = node85.isFunction();
        node79.addChildToBack(node85);
        com.google.javascript.rhino.Node node91 = node27.useSourceInfoFromForTree(node79);
        com.google.javascript.rhino.Node node92 = node27.cloneNode();
        boolean boolean93 = node92.isOptionalArg();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 409638 + "'", int80 == 409638);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("NUMBER 0.0", 100, (int) ' ');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet18);
        boolean boolean22 = node13.getBooleanProp((int) '4');
        boolean boolean23 = node13.isGetElem();
        boolean boolean24 = node13.isBlock();
        boolean boolean25 = node13.isDebugger();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node13.siblings();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        boolean boolean36 = node34.isStringKey();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node46 = node34.srcrefTree(node45);
        com.google.javascript.rhino.Node node47 = node46.cloneNode();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        boolean boolean57 = node47.hasChild(node51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = null;
        com.google.javascript.rhino.Node node59 = node47.setJSDocInfo(jSDocInfo58);
        boolean boolean60 = node59.isAnd();
        node59.setSourceEncodedPosition(2);
        node59.setDouble((double) 0.0f);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(51, node4, node13, node59);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 55, 50);
        com.google.javascript.rhino.Node node70 = node13.copyInformationFrom(node69);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        node8.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        com.google.javascript.rhino.Node node83 = null;
        // The following exception was thrown during execution in test generation
        try {
            node79.addChildToFront(node83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean4 = node3.isFor();
        boolean boolean5 = node3.isStringKey();
        java.lang.String str6 = node3.getSourceFileName();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = node10.copyInformationFrom(node14);
        boolean boolean16 = node15.isAssignAdd();
        boolean boolean17 = node15.isGetProp();
        boolean boolean18 = node15.isArrayLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        node31.addSuppression("hi!");
        boolean boolean34 = node22.isEquivalentTo(node31);
        boolean boolean35 = node31.isGetterDef();
        node31.setType((int) '#');
        node15.addChildToFront(node31);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        int int48 = node47.getChangeTime();
        node47.setVarArgs(true);
        java.lang.String str54 = node47.toString(false, true, true);
        boolean boolean55 = node47.isBreak();
        com.google.javascript.rhino.Node node56 = node15.copyInformationFrom(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        com.google.javascript.rhino.Node node58 = node56.setJSDocInfo(jSDocInfo57);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node56.getStaticSourceFile();
        com.google.javascript.rhino.Node node60 = node3.copyInformationFromForTree(node56);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(35, "BITXOR");
        node63.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) '4', "", 15, 4);
        com.google.javascript.rhino.Node node73 = node67.useSourceInfoIfMissingFromForTree(node72);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = node77.copyInformationFrom(node81);
        boolean boolean83 = node82.isAssignAdd();
        boolean boolean84 = node82.isFromExterns();
        boolean boolean85 = node82.isVarArgs();
        node82.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node node88 = node73.useSourceInfoIfMissingFrom(node82);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node82.getStaticSourceFile();
        node63.setStaticSourceFile(staticSourceFile89);
        node56.setStaticSourceFile(staticSourceFile89);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str54, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(staticSourceFile89);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        node82.putBooleanProp(55, true);
        com.google.javascript.rhino.Node node87 = node82.cloneNode();
        int int89 = node82.getIntProp(409638);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        boolean boolean15 = node8.isName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node8.setStaticSourceFile(staticSourceFile16);
        boolean boolean18 = node8.isWhile();
        boolean boolean19 = node8.isFalse();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node39 = node27.srcrefTree(node38);
        boolean boolean40 = node38.isCatch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        node53.addSuppression("hi!");
        boolean boolean56 = node44.isEquivalentTo(node53);
        boolean boolean57 = node44.isCase();
        boolean boolean58 = node44.isCast();
        com.google.javascript.rhino.Node node59 = node38.srcrefTree(node44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = null;
        com.google.javascript.rhino.Node node61 = node44.setJSDocInfo(jSDocInfo60);
        boolean boolean62 = node44.isStringKey();
        node44.setDouble((double) (short) -1);
        com.google.javascript.rhino.Node node65 = node8.useSourceInfoFrom(node44);
        java.lang.Appendable appendable66 = null;
        // The following exception was thrown during execution in test generation
        try {
            node44.appendStringTree(appendable66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node5 = node4.cloneTree();
        boolean boolean6 = node4.isQuotedString();
        boolean boolean7 = node4.isHook();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((-1), node4);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node17.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) ' ', node17);
        boolean boolean32 = node17.isOnlyModifiesThisCall();
        boolean boolean33 = node17.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node17.siblings();
        com.google.javascript.rhino.Node node35 = node8.clonePropsFrom(node17);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        int int63 = node62.getChangeTime();
        boolean boolean64 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean69 = node62.hasChild(node68);
        node50.addChildToBack(node68);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(35, "BITXOR");
        node68.putProp((int) (short) 10, (java.lang.Object) 35);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getSourcePosition();
        int int10 = node8.getChildCount();
        boolean boolean11 = node8.hasOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        boolean boolean40 = node39.isDelProp();
        node39.setType(43);
        com.google.javascript.rhino.jstype.JSType jSType43 = node39.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType44 = node39.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSType43);
        org.junit.Assert.assertNull(jSType44);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(39, 40, (int) '#');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        com.google.javascript.rhino.Node node13 = node12.getLastSibling();
        boolean boolean14 = node13.isInstanceOf();
        int int15 = node13.getType();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((-1), 10, 30);
        com.google.javascript.rhino.Node node20 = node13.useSourceInfoFrom(node19);
        node3.addChildrenToBack(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(35, "NUMBER 0.0\n", 31, 4196);
        node3.addChildrenToBack(node26);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 39 + "'", int15 == 39);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        int int17 = node12.getCharno();
        boolean boolean18 = node12.isThis();
        boolean boolean19 = node12.isScript();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node24 = node23.cloneTree();
        boolean boolean25 = node23.isQuotedString();
        int int26 = node23.getLength();
        boolean boolean27 = node23.isNot();
        node12.addChildrenToBack(node23);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 47, 48, (int) '4');
        node39.addChildToFront(node57);
        boolean boolean59 = node39.isFromExterns();
        boolean boolean60 = node39.isBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        node57.putIntProp(12, 37);
        node57.setVarArgs(true);
        boolean boolean65 = node57.isString();
        node57.setSourceFileForTesting("GETELEM [jsdoc_info: JSDocInfo]\n");
        boolean boolean68 = node57.isWhile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getCharno();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node14.cloneTree();
        boolean boolean16 = node14.isFunction();
        boolean boolean17 = node14.isRegExp();
        node8.addChildToBack(node14);
        java.lang.String str19 = node14.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node14.getJSDocInfo();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet34);
        boolean boolean37 = node29.isAdd();
        com.google.javascript.rhino.Node node38 = node14.useSourceInfoFromForTree(node29);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '4', (int) (byte) 100);
        boolean boolean4 = node3.isVoid();
        int int5 = node3.getChangeTime();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        int int9 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = null;
        com.google.javascript.rhino.Node node32 = node20.setJSDocInfo(jSDocInfo31);
        boolean boolean33 = node32.isAnd();
        boolean boolean34 = node32.isDebugger();
        node32.setIsSyntheticBlock(false);
        boolean boolean37 = node32.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isFromExterns();
        boolean boolean33 = node20.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            node20.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        java.lang.String str14 = node8.toString(false, true, false);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) 'a');
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.Node node18 = node8.srcref(node16);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 0.0" + "'", str14, "NUMBER 0.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(36, 100, 46);
        node3.detachChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node14 = node13.getLastSibling();
        java.lang.String str15 = node13.getSourceFileName();
        boolean boolean16 = node13.isCall();
        boolean boolean17 = node13.isTry();
        int int18 = node3.getIndexOfChild(node13);
        boolean boolean19 = node13.isStringKey();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isNot();
        boolean boolean17 = node3.isOptionalArg();
        node3.setDouble((double) (-1));
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node19.isCatch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        node34.addSuppression("hi!");
        boolean boolean37 = node25.isEquivalentTo(node34);
        boolean boolean38 = node25.isCase();
        boolean boolean39 = node25.isCast();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node25);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node25.getAncestors();
        node25.setCharno((-1));
        com.google.javascript.rhino.Node node44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(37, node25, node44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(ancestorIterable41);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isOnlyModifiesThisCall();
        boolean boolean55 = node9.isVar();
        node9.setType(8);
        boolean boolean58 = node9.isGetElem();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 10);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node10.isAssignAdd();
        java.lang.String[] strArray15 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet16);
        boolean boolean19 = node10.isContinue();
        node1.addChildrenToBack(node10);
        boolean boolean21 = node10.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        node34.addSuppression("hi!");
        boolean boolean37 = node25.isEquivalentTo(node34);
        boolean boolean38 = node34.isGetterDef();
        node34.setType((int) '#');
        boolean boolean41 = node34.isVar();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        boolean boolean51 = node50.isAssignAdd();
        boolean boolean52 = node50.isTrue();
        boolean boolean53 = node50.wasEmptyNode();
        int int54 = node34.getIndexOfChild(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node50.getJSDocInfo();
        boolean boolean56 = node50.isString();
        boolean boolean57 = node50.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean63 = node62.isReturn();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        boolean boolean73 = node72.isAssignAdd();
        java.lang.String[] strArray77 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node62.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet78);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(36, 100, 46);
        node3.detachChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node14 = node13.getLastSibling();
        java.lang.String str15 = node13.getSourceFileName();
        boolean boolean16 = node13.isCall();
        boolean boolean17 = node13.isTry();
        int int18 = node3.getIndexOfChild(node13);
        int int19 = node13.getSourceOffset();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        node9.addSuppression("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = node9.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        com.google.javascript.rhino.Node node20 = node9.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node39.isGetterDef();
        node39.setType((int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node49.isCase();
        boolean boolean63 = node49.isCast();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFrom(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node64.children();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node24, node64);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node71 = node70.cloneTree();
        boolean boolean72 = node70.isQuotedString();
        boolean boolean73 = node70.isHook();
        com.google.javascript.rhino.Node node74 = node64.useSourceInfoFromForTree(node70);
        com.google.javascript.rhino.Node node75 = node70.cloneNode();
        boolean boolean76 = node75.isTry();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isFromExterns();
        node12.setCharno((int) (short) -1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        java.util.Set<java.lang.String> strSet12 = node8.getDirectives();
        boolean boolean13 = node8.isStringKey();
        boolean boolean14 = node8.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        boolean boolean11 = node7.hasOneChild();
        node7.setType(47);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        boolean boolean27 = node25.isStringKey();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node37 = node25.srcrefTree(node36);
        boolean boolean38 = node37.isScript();
        boolean boolean39 = node37.isBreak();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node37.addChildToFront(node43);
        com.google.javascript.rhino.Node node45 = node17.copyInformationFrom(node43);
        com.google.javascript.rhino.Node node46 = node7.useSourceInfoIfMissingFromForTree(node43);
        node7.setLineno(29);
        boolean boolean49 = node7.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        node4.setDouble(1.0d);
        int int19 = node4.getLength();
        node4.putBooleanProp(24, false);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(51, node4);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = node87.copyInformationFrom(node91);
        boolean boolean93 = node82.isEquivalentToTyped(node92);
        boolean boolean94 = node92.isArrayLit();
        int int95 = node92.getLength();
        boolean boolean96 = node92.isNull();
        boolean boolean97 = node92.isGetElem();
        java.lang.Class<?> wildcardClass98 = node92.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(31, 48, (int) (byte) 10);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str10 = node8.getSourceFileName();
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isGetElem();
        boolean boolean13 = node8.isOnlyModifiesThisCall();
        node8.setSourceEncodedPosition(8);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        java.lang.String[] strArray13 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node8.getProp(409638);
        boolean boolean19 = node8.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.Node node14 = node8.cloneTree();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        node27.addSuppression("hi!");
        boolean boolean30 = node18.isEquivalentTo(node27);
        node18.setDouble(1.0d);
        int int33 = node18.getSideEffectFlags();
        node18.setCharno((int) (short) 0);
        int int36 = node18.getCharno();
        boolean boolean37 = node18.isQuotedString();
        com.google.javascript.rhino.Node node38 = node8.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        boolean boolean48 = node46.isStringKey();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node58 = node46.srcrefTree(node57);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        com.google.javascript.rhino.Node node69 = node68.getLastSibling();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(100, node68);
        int int71 = node68.getLength();
        node68.setDouble((double) 0L);
        int int74 = node57.getIndexOfChild(node68);
        boolean boolean75 = node68.isInstanceOf();
        com.google.javascript.rhino.Node node76 = node18.srcref(node68);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.jstype.JSType jSType33 = node18.getJSType();
        node18.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        boolean boolean45 = node43.isStringKey();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        com.google.javascript.rhino.Node node55 = node43.srcrefTree(node54);
        com.google.javascript.rhino.Node node56 = node55.cloneNode();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        boolean boolean66 = node56.hasChild(node60);
        boolean boolean67 = node60.isEmpty();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 1, 100);
        boolean boolean72 = node71.isString();
        // The following exception was thrown during execution in test generation
        try {
            node18.replaceChildAfter(node60, node71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(jSType33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        int int50 = node49.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node49.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node49.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        com.google.javascript.rhino.Node node22 = node19.getAncestor(43);
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(409638, nodeArray26, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) 'a', nodeArray26);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(15, nodeArray26, 42, 0);
        java.lang.Object obj35 = node33.getProp(0);
        com.google.javascript.rhino.Node node36 = node19.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        node49.addSuppression("hi!");
        boolean boolean52 = node40.isEquivalentTo(node49);
        boolean boolean53 = node49.isGetterDef();
        node49.setType((int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        node68.addSuppression("hi!");
        boolean boolean71 = node59.isEquivalentTo(node68);
        boolean boolean72 = node59.isCase();
        boolean boolean73 = node59.isCast();
        com.google.javascript.rhino.Node node74 = node49.useSourceInfoIfMissingFrom(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node74.children();
        boolean boolean76 = node74.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node74.getJSDocInfo();
        com.google.javascript.rhino.Node node78 = node33.setJSDocInfo(jSDocInfo77);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSDocInfo77);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        node57.putIntProp(12, 37);
        boolean boolean63 = node57.isVar();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node57.siblings();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        node57.setCharno((int) '#');
        com.google.javascript.rhino.InputId inputId61 = null;
        node57.setInputId(inputId61);
        boolean boolean63 = node57.isWith();
        node57.setLength(2);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        node78.addSuppression("hi!");
        boolean boolean81 = node69.isEquivalentTo(node78);
        boolean boolean82 = node69.isDelProp();
        com.google.javascript.rhino.Node node83 = node57.useSourceInfoFromForTree(node69);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node8.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor13 = ancestorIterable12.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor14 = ancestorIterable12.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor15 = ancestorIterable12.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor16 = ancestorIterable12.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertNotNull(nodeItor14);
        org.junit.Assert.assertNotNull(nodeItor15);
        org.junit.Assert.assertNotNull(nodeItor16);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(38, "NUMBER 0.0 10", 12, 24);
        node4.setCharno(12);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        node28.addSuppression("hi!");
        boolean boolean31 = node19.isEquivalentTo(node28);
        boolean boolean32 = node19.isDelProp();
        boolean boolean33 = node19.isDo();
        java.lang.Object obj35 = node19.getProp(55);
        int int37 = node19.getIntProp(38);
        node3.addChildrenToBack(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node19.getJsDocBuilderForNode();
        fileLevelJsDocBuilder39.append("NUMBER 1.0");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder39);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str10 = node8.getSourceFileName();
        boolean boolean11 = node8.isAssign();
        boolean boolean12 = node8.isNE();
        boolean boolean13 = node8.isBreak();
        boolean boolean14 = node8.isGetElem();
        // The following exception was thrown during execution in test generation
        try {
            node8.setSideEffectFlags(15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        boolean boolean33 = node20.isDelProp();
        boolean boolean34 = node20.isDo();
        java.lang.Object obj36 = node20.getProp(55);
        int int38 = node20.getIntProp(38);
        node4.addChildrenToBack(node20);
        int int40 = node4.getChangeTime();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node48.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node60 = node48.srcrefTree(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node48.getJsDocBuilderForNode();
        boolean boolean62 = node48.isThrow();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node48, 43, 46);
        java.lang.String str66 = node4.toStringTree();
        boolean boolean67 = node4.isStringKey();
        com.google.javascript.rhino.Node node68 = null;
        boolean boolean69 = node4.hasChild(node68);
        boolean boolean70 = node4.isHook();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER 0.0\n    NUMBER 0.0\n" + "'", str66, "NUMBER 0.0\n    NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        node19.detachChildren();
        double double21 = node19.getDouble();
        boolean boolean22 = node19.isTry();
        boolean boolean23 = node19.isContinue();
        boolean boolean24 = node19.isOnlyModifiesThisCall();
        boolean boolean25 = node19.isCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        boolean boolean44 = node19.isAdd();
        node19.removeProp(30);
        boolean boolean47 = node19.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        node9.putIntProp(49, 52);
        java.lang.String str57 = node9.toString();
        boolean boolean58 = node9.isGetProp();
        boolean boolean59 = node9.isDebugger();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node9.setJSType(jSType60);
        boolean boolean62 = node9.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 0.0 [direct_eval: 52]" + "'", str57, "NUMBER 0.0 [direct_eval: 52]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        boolean boolean55 = node7.isExprResult();
        boolean boolean56 = node7.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        boolean boolean19 = node12.isHook();
        boolean boolean20 = node12.isInstanceOf();
        boolean boolean21 = node12.isString();
        boolean boolean22 = node12.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node8.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', node8);
        boolean boolean23 = node8.isOnlyModifiesThisCall();
        com.google.javascript.rhino.jstype.JSType jSType24 = node8.getJSType();
        boolean boolean25 = node8.isUnscopedQualifiedName();
        java.lang.String str26 = node8.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER 0.0" + "'", str26, "NUMBER 0.0");
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isIn();
        boolean boolean17 = node3.isFor();
        node3.setType(46);
        boolean boolean20 = node3.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        node8.detachChildren();
        boolean boolean19 = node8.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        int int60 = node57.getLength();
        node57.removeProp(39);
        node57.setSourceFileForTesting("Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isFromExterns();
        boolean boolean33 = node20.isBlock();
        boolean boolean34 = node20.isTry();
        boolean boolean35 = node20.isReturn();
        boolean boolean36 = node20.isDebugger();
        node20.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isIf();
        boolean boolean22 = node19.isDelProp();
        boolean boolean23 = node19.isVar();
        int int24 = node19.getType();
        boolean boolean25 = node19.isObjectLit();
        boolean boolean26 = node19.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 39 + "'", int24 == 39);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(409638, nodeArray3, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) 'a', nodeArray3);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(15, nodeArray3, 42, 0);
        boolean boolean11 = node10.isDefaultCase();
        boolean boolean12 = node10.isLabelName();
        boolean boolean13 = node10.isArrayLit();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        int int17 = node12.getCharno();
        boolean boolean18 = node12.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node79.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator81 = nodeIterable80.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(nodeIterable80);
        org.junit.Assert.assertNotNull(nodeSpliterator81);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        boolean boolean18 = node8.isGetElem();
        int int19 = node8.getCharno();
        boolean boolean20 = node8.isReturn();
        com.google.javascript.rhino.Node node21 = node8.cloneTree();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node31.isAssignAdd();
        boolean boolean33 = node31.isFromExterns();
        boolean boolean34 = node31.isVarArgs();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        boolean boolean44 = node43.isAssignAdd();
        boolean boolean45 = node43.isTrue();
        boolean boolean46 = node43.wasEmptyNode();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        boolean boolean56 = node54.isStringKey();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node66 = node54.srcrefTree(node65);
        com.google.javascript.rhino.Node node67 = node66.cloneNode();
        boolean boolean68 = node66.isLabelName();
        boolean boolean69 = node66.isName();
        boolean boolean70 = node66.isVarArgs();
        boolean boolean71 = node66.isCase();
        boolean boolean72 = node66.isVar();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(54, node31, node43, node66);
        node21.addChildToFront(node73);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n", (int) (byte) 10, (int) (short) 10);
        boolean boolean79 = node78.isNot();
        boolean boolean80 = node78.isContinue();
        boolean boolean81 = node21.isEquivalentToShallow(node78);
        int int82 = node78.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(48, 0, 23);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean5 = node4.isReturn();
        boolean boolean6 = node4.isHook();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = node4.getJSDocInfo();
        boolean boolean8 = node4.isDec();
        int int9 = node4.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSDocInfo7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 409638, (int) ' ');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 37, 12);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        node16.addSuppression("hi!");
        boolean boolean19 = node7.isEquivalentTo(node16);
        boolean boolean20 = node16.isGetterDef();
        node16.setType((int) '#');
        boolean boolean23 = node16.isVar();
        boolean boolean24 = node16.isAssign();
        com.google.javascript.rhino.Node node25 = node3.srcrefTree(node16);
        boolean boolean26 = node3.isEmpty();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node8.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', node8);
        boolean boolean23 = node8.isOnlyModifiesThisCall();
        boolean boolean24 = node8.isUnscopedQualifiedName();
        boolean boolean25 = node8.isGetProp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        int int37 = node36.getSourcePosition();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(50, node36);
        boolean boolean39 = node38.isExprResult();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) ' ', node38, 16, 52);
        boolean boolean43 = node8.isEquivalentTo(node42);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean4 = node3.isNull();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        boolean boolean6 = node3.isFor();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node16.isAssignAdd();
        boolean boolean18 = node16.isFromExterns();
        boolean boolean19 = node16.isVarArgs();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        boolean boolean41 = node39.isStringKey();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node51 = node39.srcrefTree(node50);
        com.google.javascript.rhino.Node node52 = node51.cloneNode();
        boolean boolean53 = node51.isLabelName();
        boolean boolean54 = node51.isName();
        boolean boolean55 = node51.isVarArgs();
        boolean boolean56 = node51.isCase();
        boolean boolean57 = node51.isVar();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(54, node16, node28, node51);
        boolean boolean59 = node28.isHook();
        boolean boolean60 = node28.isGetProp();
        boolean boolean61 = node3.hasChild(node28);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        boolean boolean30 = node29.isVarArgs();
        node29.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        node8.addChildToBack(node29);
        boolean boolean35 = node8.hasChildren();
        boolean boolean36 = node8.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(409638, nodeArray6, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) 'a', nodeArray6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(0, nodeArray6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(0, nodeArray6, 12, 36);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(43, nodeArray6);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(30, nodeArray6, 51, 409638);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node3.siblings();
        boolean boolean20 = node3.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isFor();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(39, 40, 4);
        int int65 = node57.getIndexOfChild(node64);
        boolean boolean66 = node64.isName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        java.lang.String str66 = node43.getQualifiedName();
        com.google.javascript.rhino.Node node67 = node43.removeChildren();
        int int68 = node43.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(409638, nodeArray2, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(49, nodeArray2, (int) '4', 40);
        com.google.javascript.rhino.Node node9 = node8.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getCharno();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node14.cloneTree();
        boolean boolean16 = node14.isFunction();
        boolean boolean17 = node14.isRegExp();
        node8.addChildToBack(node14);
        boolean boolean19 = node8.isCase();
        node8.setOptionalArg(false);
        double double22 = node8.getDouble();
        double double23 = node8.getDouble();
        com.google.javascript.rhino.jstype.JSType jSType24 = node8.getJSType();
        boolean boolean25 = node8.isCast();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        java.lang.String str15 = node8.toString(false, true, true);
        com.google.javascript.rhino.Node node16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node17 = node8.copyInformationFrom(node16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str15, "NUMBER 0.0 [var_args_name: 1]");
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isNoSideEffectsCall();
        boolean boolean55 = node9.isParamList();
        com.google.javascript.rhino.Node node56 = node9.getNext();
        node56.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        boolean boolean8 = node7.isReturn();
        boolean boolean10 = node7.getBooleanProp(48);
        boolean boolean11 = node7.isAnd();
        com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(409638, nodeArray16, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) 'a', nodeArray16);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(409638, nodeArray16, 42, 15);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray16, (int) ' ', 42);
        boolean boolean27 = node7.isEquivalentToTyped(node26);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray16);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(31, "GETELEM [jsdoc_info: JSDocInfo]\n");
        boolean boolean3 = node2.isHook();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        node8.setLineno(0);
        com.google.javascript.rhino.Node node18 = node8.removeFirstChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        int int30 = node28.getSourceOffset();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(36, 100, 46);
        node34.detachChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        com.google.javascript.rhino.Node node45 = node44.getLastSibling();
        java.lang.String str46 = node44.getSourceFileName();
        boolean boolean47 = node44.isCall();
        boolean boolean48 = node44.isTry();
        int int49 = node34.getIndexOfChild(node44);
        boolean boolean50 = node34.isBreak();
        boolean boolean51 = node34.isVoid();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        node60.addSuppression("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node60.getStaticSourceFile();
        boolean boolean64 = node60.hasOneChild();
        com.google.javascript.rhino.Node node65 = node60.getNext();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        node78.addSuppression("hi!");
        boolean boolean81 = node69.isEquivalentTo(node78);
        node78.putBooleanProp(31, true);
        boolean boolean85 = node78.isHook();
        boolean boolean86 = node78.isInstanceOf();
        java.lang.String str87 = node78.getSourceFileName();
        int int88 = node78.getChangeTime();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(4095, node28, node34, node60, node78, 100, 38);
        com.google.javascript.rhino.Node node92 = node8.srcref(node28);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        java.lang.String str15 = node8.toString(false, true, true);
        int int17 = node8.getIntProp(29);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str15, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        node19.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        boolean boolean24 = node19.isLocalResultCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = null;
        com.google.javascript.rhino.Node node26 = node19.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node26.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            node26.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.wasEmptyNode();
        boolean boolean12 = node8.isStringKey();
        com.google.javascript.rhino.Node node13 = node8.getParent();
        boolean boolean14 = node8.isReturn();
        com.google.javascript.rhino.Node node15 = node8.getLastSibling();
        java.lang.String str16 = node15.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 4095, 409638);
        boolean boolean4 = node3.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node21.hasChild(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        com.google.javascript.rhino.Node node33 = node21.setJSDocInfo(jSDocInfo32);
        boolean boolean34 = node33.isAnd();
        node33.setSourceEncodedPosition(2);
        node33.setDouble((double) 0.0f);
        java.lang.String str39 = node33.getQualifiedName();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 53, 38, 49);
        boolean boolean44 = node43.isGetElem();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 10, node33, node43);
        boolean boolean46 = node33.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n");
        boolean boolean2 = node1.isNew();
        boolean boolean3 = node1.isNE();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 40960);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING NUMBER 0.0? is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 31, 52, (int) (byte) -1);
        boolean boolean4 = node3.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        int int18 = node3.getSideEffectFlags();
        boolean boolean19 = node3.isEmpty();
        boolean boolean20 = node3.isFunction();
        node3.addSuppression("GETELEM");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node29.getLastSibling();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(100, node29);
        int int32 = node29.getLength();
        node29.setDouble((double) 0L);
        int int35 = node18.getIndexOfChild(node29);
        boolean boolean36 = node29.isInstanceOf();
        com.google.javascript.rhino.Node node37 = node29.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isNull();
        boolean boolean24 = node19.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        boolean boolean19 = node3.isWith();
        boolean boolean20 = node3.isQuotedString();
        boolean boolean21 = node3.isIn();
        boolean boolean22 = node3.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        boolean boolean27 = node25.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        node9.addSuppression("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet14);
        boolean boolean17 = node9.isCase();
        node9.detachChildren();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        boolean boolean44 = node42.isBreak();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node42.addChildToFront(node48);
        com.google.javascript.rhino.Node node50 = node22.copyInformationFrom(node48);
        boolean boolean51 = node50.isSyntheticBlock();
        com.google.javascript.rhino.Node node52 = node9.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(47, node9);
        java.lang.Appendable appendable54 = null;
        // The following exception was thrown during execution in test generation
        try {
            node53.appendStringTree(appendable54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        node28.addSuppression("hi!");
        boolean boolean31 = node19.isEquivalentTo(node28);
        boolean boolean32 = node19.isDelProp();
        boolean boolean33 = node19.isDo();
        java.lang.Object obj35 = node19.getProp(55);
        int int37 = node19.getIntProp(38);
        node3.addChildrenToBack(node19);
        boolean boolean39 = node3.isCall();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        boolean boolean49 = node47.isStringKey();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        com.google.javascript.rhino.Node node59 = node47.srcrefTree(node58);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node60.hasChild(node64);
        int int71 = node64.getSourceOffset();
        boolean boolean72 = node64.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node3.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node78 = node77.cloneTree();
        boolean boolean79 = node77.isFunction();
        boolean boolean80 = node77.isRegExp();
        boolean boolean81 = node77.isFunction();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = node85.copyInformationFrom(node89);
        boolean boolean91 = node90.isAssignAdd();
        boolean boolean92 = node90.isGetProp();
        boolean boolean93 = node90.isArrayLit();
        com.google.javascript.rhino.Node node94 = node77.useSourceInfoIfMissingFrom(node90);
        boolean boolean95 = node77.isBreak();
        com.google.javascript.rhino.Node node96 = node64.srcrefTree(node77);
        com.google.javascript.rhino.Node node97 = node64.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        int int4 = node3.getChildCount();
        boolean boolean5 = node3.isIn();
        boolean boolean6 = node3.isDelProp();
        node3.setCharno(16);
        com.google.javascript.rhino.Node node9 = node3.getLastSibling();
        node3.setType(29);
        com.google.javascript.rhino.Node node12 = node3.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        boolean boolean59 = node57.isAssignAdd();
        boolean boolean60 = node57.isThrow();
        int int61 = node57.getSourceOffset();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node8.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node8.siblings();
        java.lang.Class<?> wildcardClass34 = node8.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(409638, nodeArray4, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) ' ', nodeArray4, (int) (byte) -1, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(39, nodeArray4, 0, 4196);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node3.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator8 = ancestorIterable7.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator9 = ancestorIterable7.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        node46.addSuppression("hi!");
        boolean boolean49 = node37.isEquivalentTo(node46);
        boolean boolean50 = node46.isGetterDef();
        node46.setType((int) '#');
        boolean boolean53 = node46.isVar();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        boolean boolean63 = node62.isAssignAdd();
        boolean boolean64 = node62.isTrue();
        boolean boolean65 = node62.wasEmptyNode();
        int int66 = node46.getIndexOfChild(node62);
        com.google.javascript.rhino.Node node67 = node46.getFirstChild();
        int int68 = node46.getChangeTime();
        node27.addChildToFront(node46);
        boolean boolean70 = node27.isCast();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.isLocalResultCall();
        boolean boolean84 = node82.isCatch();
        int int85 = node82.getType();
        node82.setVarArgs(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        com.google.javascript.rhino.Node node22 = node19.getAncestor(43);
        node19.setDouble((double) 0.0f);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        int int34 = node33.getChangeTime();
        boolean boolean35 = node33.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean40 = node33.hasChild(node39);
        java.lang.String str41 = node39.getQualifiedName();
        boolean boolean42 = node39.isNumber();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(15, "GETELEM [jsdoc_info: JSDocInfo]\n");
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildBefore(node39, node45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = node8.isNumber();
        com.google.javascript.rhino.Node node17 = node8.cloneTree();
        com.google.javascript.rhino.Node node18 = node17.getLastSibling();
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isFromExterns();
        boolean boolean31 = node28.isVarArgs();
        node28.setSourceEncodedPositionForTree(48);
        int int34 = node28.getType();
        com.google.javascript.rhino.Node node35 = node28.cloneNode();
        node18.addChildrenToBack(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node35.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 39 + "'", int34 == 39);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeIterable37);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) ' ', "", 49, 0);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 1, 100);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        boolean boolean5 = node3.isNE();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = node9.copyInformationFrom(node13);
        int int15 = node14.getChangeTime();
        boolean boolean16 = node14.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean21 = node14.hasChild(node20);
        java.lang.String str22 = node20.getQualifiedName();
        boolean boolean23 = node20.isNumber();
        int int24 = node3.getIndexOfChild(node20);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        node12.setSourceEncodedPosition(43);
        boolean boolean35 = node12.isIf();
        boolean boolean36 = node12.isCall();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean41 = node40.isFor();
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.InputId inputId43 = null;
        node40.setInputId(inputId43);
        com.google.javascript.rhino.InputId inputId45 = node40.getInputId();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node40.getStaticSourceFile();
        boolean boolean47 = node40.isNull();
        boolean boolean48 = node40.isSyntheticBlock();
        com.google.javascript.rhino.Node node49 = node12.useSourceInfoFromForTree(node40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(inputId45);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        java.lang.String str11 = node8.toStringTree();
        boolean boolean12 = node8.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        boolean boolean43 = node33.hasChild(node37);
        node33.setOptionalArg(false);
        boolean boolean46 = node33.isFromExterns();
        node33.setDouble((double) 4);
        com.google.javascript.rhino.Node node49 = node8.srcref(node33);
        boolean boolean50 = node8.isEmpty();
        boolean boolean51 = node8.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 0.0\n" + "'", str11, "NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        node1.setLength((int) (byte) 1);
        boolean boolean4 = node1.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        node9.putIntProp(49, 52);
        java.lang.String str57 = node9.toString();
        boolean boolean58 = node9.isSyntheticBlock();
        boolean boolean59 = node9.isInc();
        boolean boolean60 = node9.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 0.0 [direct_eval: 52]" + "'", str57, "NUMBER 0.0 [direct_eval: 52]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        boolean boolean18 = node8.isGetElem();
        int int19 = node8.getCharno();
        boolean boolean20 = node8.isReturn();
        com.google.javascript.rhino.Node node21 = node8.cloneTree();
        boolean boolean22 = node8.isRegExp();
        node8.removeProp(40960);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = node8.isAdd();
        node8.setDouble((double) '#');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 15);
        boolean boolean2 = node1.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isIf();
        boolean boolean16 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, node21, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        boolean boolean34 = node32.isStringKey();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node43);
        boolean boolean45 = node44.isScript();
        boolean boolean46 = node44.isBreak();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        boolean boolean56 = node54.isStringKey();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node66 = node54.srcrefTree(node65);
        boolean boolean67 = node66.isScript();
        com.google.javascript.rhino.Node node68 = node44.useSourceInfoFrom(node66);
        int int69 = node21.getIndexOfChild(node44);
        com.google.javascript.rhino.Node node70 = node9.useSourceInfoIfMissingFromForTree(node44);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node44.setStaticSourceFile(staticSourceFile71);
        boolean boolean73 = node44.isAssign();
        int int74 = node44.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isFromExterns();
        boolean boolean12 = node9.isVarArgs();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node21.isAssignAdd();
        boolean boolean23 = node21.isTrue();
        boolean boolean24 = node21.wasEmptyNode();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        boolean boolean34 = node32.isStringKey();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node43);
        com.google.javascript.rhino.Node node45 = node44.cloneNode();
        boolean boolean46 = node44.isLabelName();
        boolean boolean47 = node44.isName();
        boolean boolean48 = node44.isVarArgs();
        boolean boolean49 = node44.isCase();
        boolean boolean50 = node44.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(54, node9, node21, node44);
        boolean boolean52 = node44.isVarArgs();
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(409638, nodeArray56, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) 'a', nodeArray56);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(15, nodeArray56, 42, 0);
        boolean boolean64 = node63.isDefaultCase();
        boolean boolean65 = node63.isLabelName();
        java.lang.String str66 = node44.checkTreeEquals(node63);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0\n\n\nTree2:\nLE 42\n\n\nSubtree1: NUMBER 0.0\n\n\nSubtree2: LE 42\n" + "'", str66, "Node tree inequality:\nTree1:\nNUMBER 0.0\n\n\nTree2:\nLE 42\n\n\nSubtree1: NUMBER 0.0\n\n\nSubtree2: LE 42\n");
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node20.addChildToFront(node26);
        boolean boolean28 = node20.isDec();
        com.google.javascript.rhino.Node node29 = node20.cloneNode();
        boolean boolean30 = node29.isWhile();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        node39.setVarArgs(true);
        node39.setType(51);
        com.google.javascript.rhino.Node node45 = node39.cloneTree();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        int int55 = node49.getLength();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100, node29, node39, node49);
        boolean boolean57 = node39.isHook();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.clearAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "hi!");
        boolean boolean3 = node2.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        int int21 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node31 = node30.getLastSibling();
        boolean boolean32 = node30.isBreak();
        com.google.javascript.rhino.Node node33 = node19.srcrefTree(node30);
        int int34 = node19.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 10);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node10.isAssignAdd();
        java.lang.String[] strArray15 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet16);
        boolean boolean19 = node10.isContinue();
        node1.addChildrenToBack(node10);
        boolean boolean21 = node1.isNew();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 100, 31, 4095);
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoFrom(node25);
        boolean boolean27 = node1.isCall();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        boolean boolean41 = node39.isStringKey();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node51 = node39.srcrefTree(node50);
        boolean boolean52 = node51.isScript();
        boolean boolean53 = node51.isBreak();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node51.addChildToFront(node57);
        com.google.javascript.rhino.Node node59 = node31.copyInformationFrom(node57);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node31.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node61 = node1.srcrefTree(node31);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node8.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            node8.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(ancestorIterable12);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        node57.removeProp(48);
        boolean boolean85 = node57.isTry();
        boolean boolean86 = node57.isAssign();
        int int87 = node57.getChangeTime();
        boolean boolean88 = node57.isDelProp();
        boolean boolean89 = node57.isInc();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        node19.setLineno(31);
        boolean boolean25 = node19.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isNumber();
        com.google.javascript.rhino.Node node61 = node57.removeChildren();
        com.google.javascript.rhino.InputId inputId62 = null;
        node61.setInputId(inputId62);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        boolean boolean73 = node72.isAssignAdd();
        boolean boolean74 = node72.isTrue();
        boolean boolean75 = node72.wasEmptyNode();
        boolean boolean76 = node72.isCatch();
        boolean boolean77 = node72.isScript();
        com.google.javascript.rhino.Node node78 = node61.useSourceInfoFromForTree(node72);
        java.lang.String str79 = node61.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "NUMBER 0.0" + "'", str79, "NUMBER 0.0");
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) 'a');
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = node6.copyInformationFrom(node10);
        boolean boolean12 = node10.isStringKey();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        com.google.javascript.rhino.Node node22 = node10.srcrefTree(node21);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node10.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) ' ', node10);
        boolean boolean25 = node10.isOnlyModifiesThisCall();
        node10.setDouble((double) 100);
        boolean boolean28 = node1.isEquivalentToTyped(node10);
        int int29 = node1.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isTrue();
        com.google.javascript.rhino.Node node22 = node19.cloneNode();
        java.lang.String str23 = node19.getSourceFileName();
        boolean boolean24 = node19.isFor();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        boolean boolean34 = node33.isAssignAdd();
        boolean boolean35 = node33.isGetProp();
        boolean boolean36 = node33.isArrayLit();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        node49.addSuppression("hi!");
        boolean boolean52 = node40.isEquivalentTo(node49);
        boolean boolean53 = node49.isGetterDef();
        node49.setType((int) '#');
        node33.addChildToFront(node49);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        int int66 = node65.getChangeTime();
        node65.setVarArgs(true);
        java.lang.String str72 = node65.toString(false, true, true);
        boolean boolean73 = node65.isBreak();
        com.google.javascript.rhino.Node node74 = node33.copyInformationFrom(node65);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, node79, (int) (short) 1, 49);
        boolean boolean83 = node79.isNumber();
        com.google.javascript.rhino.Node node84 = node65.srcrefTree(node79);
        com.google.javascript.rhino.Node node85 = node19.copyInformationFromForTree(node79);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str72, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        boolean boolean19 = node3.isNot();
        node3.removeProp(4196);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = null;
        com.google.javascript.rhino.Node node23 = node3.setJSDocInfo(jSDocInfo22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        boolean boolean37 = node35.isStringKey();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        com.google.javascript.rhino.Node node47 = node35.srcrefTree(node46);
        boolean boolean48 = node47.isScript();
        boolean boolean49 = node47.isBreak();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node47.addChildToFront(node53);
        com.google.javascript.rhino.Node node55 = node27.copyInformationFrom(node53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder56 = node27.new FileLevelJsDocBuilder();
        boolean boolean57 = node27.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            node23.removeChild(node27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getSourcePosition();
        int int10 = node8.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node8.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeIterable11);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        int int18 = node3.getSideEffectFlags();
        node3.setCharno((int) (short) 0);
        node3.setCharno(31);
        boolean boolean23 = node3.isGetElem();
        boolean boolean24 = node3.isLabel();
        node3.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        node50.removeProp((int) (short) -1);
        boolean boolean53 = node8.isEquivalentToShallow(node50);
        boolean boolean54 = node8.isCast();
        node8.putBooleanProp(4095, true);
        boolean boolean58 = node8.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean4 = node3.isFor();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        com.google.javascript.rhino.Node node9 = node8.getFirstChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        com.google.javascript.rhino.Node node15 = node8.copyInformationFromForTree(node14);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node25 = node24.getLastSibling();
        java.lang.String str26 = node24.getSourceFileName();
        com.google.javascript.rhino.Node node27 = null;
        node15.addChildrenAfter(node24, node27);
        boolean boolean29 = node3.hasChild(node24);
        com.google.javascript.rhino.Node node30 = node3.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.wasEmptyNode();
        boolean boolean12 = node8.isStringKey();
        com.google.javascript.rhino.Node node13 = node8.getParent();
        boolean boolean14 = node8.isReturn();
        com.google.javascript.rhino.Node node15 = node8.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node8.getAncestors();
        boolean boolean17 = node8.isThis();
        node8.setType(54);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearAllFlags();
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 10);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node10.isAssignAdd();
        java.lang.String[] strArray15 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet16);
        boolean boolean19 = node10.isContinue();
        node1.addChildrenToBack(node10);
        boolean boolean21 = node1.isNew();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 100, 31, 4095);
        com.google.javascript.rhino.Node node26 = node1.useSourceInfoFrom(node25);
        boolean boolean27 = node25.isRegExp();
        com.google.javascript.rhino.Node node28 = node25.cloneNode();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        node28.addSuppression("hi!");
        boolean boolean31 = node19.isEquivalentTo(node28);
        boolean boolean32 = node19.isDelProp();
        boolean boolean33 = node19.isDo();
        java.lang.Object obj35 = node19.getProp(55);
        int int37 = node19.getIntProp(38);
        node3.addChildrenToBack(node19);
        boolean boolean39 = node3.isCall();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        boolean boolean49 = node47.isStringKey();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        com.google.javascript.rhino.Node node59 = node47.srcrefTree(node58);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node60.hasChild(node64);
        int int71 = node64.getSourceOffset();
        boolean boolean72 = node64.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node3.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node78 = node77.cloneTree();
        boolean boolean79 = node77.isFunction();
        boolean boolean80 = node77.isRegExp();
        boolean boolean81 = node77.isFunction();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = node85.copyInformationFrom(node89);
        boolean boolean91 = node90.isAssignAdd();
        boolean boolean92 = node90.isGetProp();
        boolean boolean93 = node90.isArrayLit();
        com.google.javascript.rhino.Node node94 = node77.useSourceInfoIfMissingFrom(node90);
        boolean boolean95 = node77.isBreak();
        com.google.javascript.rhino.Node node96 = node64.srcrefTree(node77);
        com.google.javascript.rhino.jstype.JSType jSType97 = node64.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNull(jSType97);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        boolean boolean17 = node4.isCase();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node26.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        boolean boolean48 = node46.isStringKey();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = node56.copyInformationFrom(node60);
        node61.addSuppression("hi!");
        boolean boolean64 = node52.isEquivalentTo(node61);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = node68.copyInformationFrom(node72);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] { node37, node46, node61, node72 };
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) '#', nodeArray74);
        boolean boolean76 = node75.isLocalResultCall();
        com.google.javascript.rhino.Node node77 = node4.srcref(node75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(43, node75, 56, 35);
        boolean boolean81 = node75.isSetterDef();
        java.lang.String str82 = node75.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n" + "'", str82, "GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n");
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        node14.setOptionalArg(false);
        int int18 = node14.getChildCount();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node28 = node27.getLastSibling();
        node27.setLength(43);
        com.google.javascript.rhino.Node node31 = node14.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean32 = node27.isAnd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0", 4095, 30);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        boolean boolean6 = node3.getBooleanProp(35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = node3.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSDocInfo7);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        boolean boolean19 = node12.isHook();
        boolean boolean20 = node12.isString();
        boolean boolean21 = node12.isVoid();
        node12.setLength((int) ' ');
        boolean boolean24 = node12.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        java.lang.String str11 = node8.toStringTree();
        boolean boolean12 = node8.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        boolean boolean43 = node33.hasChild(node37);
        node33.setOptionalArg(false);
        boolean boolean46 = node33.isFromExterns();
        node33.setDouble((double) 4);
        com.google.javascript.rhino.Node node49 = node8.srcref(node33);
        boolean boolean50 = node8.isVarArgs();
        boolean boolean51 = node8.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 0.0\n" + "'", str11, "NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        boolean boolean23 = node22.isAssignAdd();
        boolean boolean24 = node22.isTrue();
        boolean boolean25 = node22.wasEmptyNode();
        boolean boolean26 = node22.isStringKey();
        boolean boolean27 = node22.isTypeOf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        int int37 = node36.getChangeTime();
        boolean boolean38 = node36.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean43 = node36.hasChild(node42);
        com.google.javascript.rhino.Node node44 = node22.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node45 = node8.srcrefTree(node22);
        boolean boolean46 = node45.hasOneChild();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        boolean boolean56 = node54.isStringKey();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node66 = node54.srcrefTree(node65);
        java.lang.String str67 = node54.toStringTree();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFromForTree(node54);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER 0.0\n" + "'", str67, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        int int50 = node49.getLength();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node49.setJSDocInfo(jSDocInfo51);
        int int53 = node52.getChangeTime();
        boolean boolean54 = node52.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node79.hasOneChild();
        java.lang.Object obj85 = node79.getProp(4196);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass86 = obj85.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(409638, nodeArray4, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(15, nodeArray4, 42, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray4, 1, (int) 'a');
        boolean boolean15 = node14.isIf();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        boolean boolean55 = node7.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        boolean boolean64 = node62.isStringKey();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = node68.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node74 = node62.srcrefTree(node73);
        com.google.javascript.rhino.Node node75 = node74.cloneNode();
        int int76 = node74.getCharno();
        boolean boolean77 = node74.isStringKey();
        com.google.javascript.rhino.Node node78 = node9.useSourceInfoIfMissingFrom(node74);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node88 = node83.copyInformationFrom(node87);
        com.google.javascript.rhino.Node node89 = node88.getLastSibling();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(100, node88);
        com.google.javascript.rhino.Node node91 = node90.removeFirstChild();
        node90.removeProp(50);
        com.google.javascript.rhino.Node node94 = node74.useSourceInfoFrom(node90);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        int int31 = node30.getChangeTime();
        boolean boolean32 = node30.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean37 = node30.hasChild(node36);
        boolean boolean38 = node30.isQualifiedName();
        boolean boolean39 = node30.isFalse();
        boolean boolean40 = node30.isAnd();
        com.google.javascript.rhino.Node node41 = node20.useSourceInfoFrom(node30);
        com.google.javascript.rhino.Node node42 = node41.removeFirstChild();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) -1, node41, 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node46 = node41.getParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        node55.addSuppression("hi!");
        boolean boolean58 = node46.isEquivalentTo(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node31, node40, node55, node66 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', nodeArray68);
        java.lang.String str70 = node69.getQualifiedName();
        boolean boolean71 = node69.isHook();
        boolean boolean72 = node69.isNumber();
        com.google.javascript.rhino.Node node73 = node69.removeChildren();
        com.google.javascript.rhino.Node node74 = node8.copyInformationFromForTree(node69);
        boolean boolean75 = node74.isWhile();
        boolean boolean76 = node74.isStringKey();
        boolean boolean77 = node74.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        boolean boolean18 = node3.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node27.isAssignAdd();
        boolean boolean29 = node27.isFromExterns();
        boolean boolean30 = node27.isVarArgs();
        boolean boolean31 = node27.isDebugger();
        int int32 = node3.getIndexOfChild(node27);
        boolean boolean33 = node3.isCase();
        boolean boolean34 = node3.hasOneChild();
        double double35 = node3.getDouble();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        node12.setSourceEncodedPosition(43);
        boolean boolean35 = node12.isIf();
        boolean boolean36 = node12.isReturn();
        boolean boolean37 = node12.isObjectLit();
        java.lang.Appendable appendable38 = null;
        // The following exception was thrown during execution in test generation
        try {
            node12.appendStringTree(appendable38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        node19.detachChildren();
        double double21 = node19.getDouble();
        boolean boolean22 = node19.isWhile();
        boolean boolean23 = node19.isFunction();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) '4', "", 15, 4);
        com.google.javascript.rhino.Node node31 = node25.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        boolean boolean41 = node40.isAssignAdd();
        boolean boolean42 = node40.isFromExterns();
        boolean boolean43 = node40.isVarArgs();
        node40.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node node46 = node31.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node40.getStaticSourceFile();
        node19.setStaticSourceFile(staticSourceFile47);
        int int49 = node19.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.getJsDocBuilderForNode();
        boolean boolean6 = node3.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getSourcePosition();
        java.lang.String str10 = node8.getQualifiedName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        int int20 = node19.getChangeTime();
        node19.setVarArgs(true);
        node19.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node19.getJSDocInfo();
        boolean boolean26 = node19.isName();
        boolean boolean27 = node19.isAdd();
        node8.addChildToFront(node19);
        boolean boolean29 = node19.isFunction();
        boolean boolean30 = node19.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(10.0d);
        node1.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        boolean boolean60 = node57.isNE();
        boolean boolean61 = node57.isContinue();
        boolean boolean62 = node57.isGetProp();
        boolean boolean63 = node57.wasEmptyNode();
        boolean boolean64 = node57.isStringKey();
        com.google.javascript.rhino.Node node65 = node57.getFirstChild();
        node65.setChangeTime(23);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node51.isStringKey();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = node57.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node62);
        boolean boolean64 = node62.isCatch();
        boolean boolean65 = node43.isEquivalentToTyped(node62);
        java.lang.String str66 = node43.getQualifiedName();
        boolean boolean67 = node43.wasEmptyNode();
        com.google.javascript.rhino.Node node68 = null;
        // The following exception was thrown during execution in test generation
        try {
            node43.addChildrenToFront(node68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n");
        boolean boolean2 = node1.isNew();
        boolean boolean3 = node1.isNE();
        com.google.javascript.rhino.Node node5 = node1.getAncestor(100);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node9.getJSDocInfo();
        node9.addSuppression("NUMBER 51.0 36");
        boolean boolean58 = node9.isUnscopedQualifiedName();
        boolean boolean59 = node9.isEmpty();
        com.google.javascript.rhino.Node node60 = node9.detachFromParent();
        boolean boolean61 = node60.isContinue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        boolean boolean18 = node3.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node27.isAssignAdd();
        boolean boolean29 = node27.isFromExterns();
        boolean boolean30 = node27.isVarArgs();
        boolean boolean31 = node27.isDebugger();
        int int32 = node3.getIndexOfChild(node27);
        boolean boolean33 = node3.isCase();
        boolean boolean34 = node3.isLabelName();
        boolean boolean35 = node3.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node52.isGetterDef();
        node52.setType((int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = node66.copyInformationFrom(node70);
        node71.addSuppression("hi!");
        boolean boolean74 = node62.isEquivalentTo(node71);
        boolean boolean75 = node62.isCase();
        boolean boolean76 = node62.isCast();
        com.google.javascript.rhino.Node node77 = node52.useSourceInfoIfMissingFrom(node62);
        boolean boolean78 = node77.isString();
        com.google.javascript.rhino.Node node79 = node24.useSourceInfoIfMissingFromForTree(node77);
        node77.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        int int21 = node19.getCharno();
        boolean boolean22 = node19.isStringKey();
        node19.setDouble((double) 39);
        node19.setDouble((double) (short) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        node9.setCharno((int) 'a');
        boolean boolean56 = node9.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = null;
        com.google.javascript.rhino.Node node58 = node9.setJSDocInfo(jSDocInfo57);
        boolean boolean59 = node58.isInc();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node58.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder60);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(4095);
        com.google.javascript.rhino.Node node13 = node8.srcrefTree(node12);
        boolean boolean14 = node8.isOptionalArg();
        boolean boolean15 = node8.isNoSideEffectsCall();
        node8.setDouble((double) 31);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        int int21 = node19.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node31 = node30.getLastSibling();
        boolean boolean32 = node30.isBreak();
        com.google.javascript.rhino.Node node33 = node19.srcrefTree(node30);
        boolean boolean34 = node19.isSyntheticBlock();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable35 = node19.getAncestors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ancestorIterable35);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) ' ', 51, 51);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        int int14 = node13.getChangeTime();
        node13.setVarArgs(true);
        node13.setType(51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        node13.setChangeTime((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        com.google.javascript.rhino.Node node42 = node41.cloneNode();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = node46.copyInformationFrom(node50);
        boolean boolean52 = node42.hasChild(node46);
        java.util.Set<java.lang.String> strSet53 = node42.getDirectives();
        boolean boolean54 = node42.isFromExterns();
        boolean boolean55 = node42.isBlock();
        boolean boolean56 = node42.isTry();
        node42.setOptionalArg(true);
        boolean boolean59 = node42.isAssignAdd();
        java.lang.String[] strArray74 = new java.lang.String[] { "Node tree inequality:\nTree1:\nNUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nERROR hi!\n\n\nSubtree1: NUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: ERROR hi!\n", "GETELEM", "Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n", "GETELEM", "Node tree inequality:\nTree1:\nNUMBER 0.0\n    NUMBER 0.0\n\n\nTree2:\nBITXOR 31\n    NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]\n\n\nSubtree1: NUMBER 0.0\n    NUMBER 0.0\n\n\nSubtree2: BITXOR 31\n    NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]\n", "GETELEM [jsdoc_info: JSDocInfo]\n", "BITXOR", "NUMBER 0.0\n", "Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nERROR hi!\n\n\nSubtree1: NUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: ERROR hi!\n", "hi!", "BITXOR", "NUMBER 0.0 [direct_eval: 52]", "GETELEM [jsdoc_info: JSDocInfo]\n" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet75);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet75);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet75);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 39, 46, 52);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.hasOneChild();
        java.lang.String str9 = node3.toString(true, false, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 39.0d + "'", double4 == 39.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 39.0 46" + "'", str9, "NUMBER 39.0 46");
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        boolean boolean30 = node29.isVarArgs();
        node29.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        node8.addChildToBack(node29);
        boolean boolean35 = node8.hasChildren();
        node8.setType(4095);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        boolean boolean21 = node19.isUnscopedQualifiedName();
        int int22 = node19.getCharno();
        boolean boolean23 = node19.isBlock();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = node27.copyInformationFrom(node31);
        boolean boolean33 = node32.isAssignAdd();
        java.lang.String[] strArray37 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        boolean boolean22 = node19.isComma();
        node19.setCharno((int) (short) 0);
        boolean boolean25 = node19.isDo();
        com.google.javascript.rhino.Node node26 = node19.getNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node27 = node26.getLastChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(38, 55, (int) (short) 0);
        boolean boolean4 = node3.isNE();
        boolean boolean5 = node3.isIn();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node3.siblings();
        boolean boolean7 = node3.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        node8.addSuppression("NUMBER 0.0 [direct_eval: 52]");
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node8.getJSDocInfo();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        node26.addSuppression("hi!");
        boolean boolean29 = node26.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node26.children();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        boolean boolean40 = node38.isStringKey();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node50 = node38.srcrefTree(node49);
        com.google.javascript.rhino.Node node51 = node50.cloneNode();
        boolean boolean53 = node51.getBooleanProp(43);
        boolean boolean54 = node51.isDelProp();
        com.google.javascript.rhino.Node node55 = node26.useSourceInfoIfMissingFrom(node51);
        boolean boolean56 = node26.isLabelName();
        boolean boolean57 = node26.isThrow();
        com.google.javascript.rhino.Node node58 = node8.useSourceInfoIfMissingFrom(node26);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(jSDocInfo17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(409638, nodeArray2, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray2);
        boolean boolean7 = node6.isWith();
        node6.setChangeTime(40);
        boolean boolean10 = node6.isFalse();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.isInstanceOf();
        boolean boolean12 = node8.isStringKey();
        com.google.javascript.rhino.jstype.JSType jSType13 = node8.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSType13);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 4095, (int) (short) 0);
        boolean boolean4 = node3.isIn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "NUMBER 0.0\n", 35, 15);
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node12 = node10.getLastSibling();
        com.google.javascript.rhino.Node node13 = node3.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean14 = node13.isVoid();
        int int15 = node13.getChangeTime();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node20, node29, node44, node55 };
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) '#', nodeArray57);
        boolean boolean59 = node58.isCall();
        int int60 = node58.getSourcePosition();
        node58.putIntProp(12, 37);
        com.google.javascript.rhino.Node node64 = node58.getNext();
        java.lang.Object obj66 = node58.getProp(52);
        boolean boolean67 = node58.isIf();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = node71.copyInformationFrom(node75);
        node76.addSuppression("hi!");
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        node76.setDirectives((java.util.Set<java.lang.String>) strSet81);
        boolean boolean85 = node76.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = null;
        com.google.javascript.rhino.Node node87 = node76.setJSDocInfo(jSDocInfo86);
        boolean boolean88 = node76.isTrue();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((-9), node58, node76);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = node8.hasChildren();
        boolean boolean17 = node8.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node26.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node49 = node48.getLastSibling();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100, node48);
        int int51 = node48.getLength();
        node48.setDouble((double) 0L);
        int int54 = node37.getIndexOfChild(node48);
        node8.putProp(42, (java.lang.Object) node37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = node8.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 [jsdoc_info: JSDocInfo] [side_effect_flags: NUMBER 0.0] [directives: []] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        boolean boolean2 = node1.isNot();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable3 = node1.getAncestors();
        boolean boolean4 = node1.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(ancestorIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        boolean boolean10 = node9.isInstanceOf();
        int int11 = node9.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        com.google.javascript.rhino.Node node70 = node69.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100, node69);
        com.google.javascript.rhino.Node node72 = node71.removeFirstChild();
        com.google.javascript.rhino.Node node73 = node57.srcrefTree(node71);
        java.lang.Object obj75 = node57.getProp(53);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(39, 40, 4);
        boolean boolean4 = node3.isWhile();
        boolean boolean5 = node3.isScript();
        boolean boolean6 = node3.isWhile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        boolean boolean22 = node21.isScript();
        boolean boolean23 = node21.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = node27.copyInformationFrom(node31);
        boolean boolean33 = node31.isStringKey();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        com.google.javascript.rhino.Node node43 = node31.srcrefTree(node42);
        boolean boolean44 = node43.isScript();
        com.google.javascript.rhino.Node node45 = node21.useSourceInfoFrom(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        boolean boolean55 = node53.isStringKey();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node65 = node53.srcrefTree(node64);
        boolean boolean66 = node64.isCatch();
        boolean boolean67 = node45.isEquivalentToTyped(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        node80.addSuppression("hi!");
        boolean boolean83 = node71.isEquivalentTo(node80);
        boolean boolean84 = node80.isGetterDef();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 10, node45, node80);
        boolean boolean86 = node85.isLocalResultCall();
        boolean boolean87 = node85.isQuotedString();
        boolean boolean88 = node85.isThis();
        com.google.javascript.rhino.Node node89 = node85.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(15, node89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing sibling");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isFromExterns();
        boolean boolean33 = node20.isBlock();
        boolean boolean34 = node20.isTry();
        node20.setOptionalArg(true);
        boolean boolean37 = node20.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node44.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        com.google.javascript.rhino.Node node55 = node54.getLastSibling();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        boolean boolean65 = node64.isAssignAdd();
        java.lang.String[] strArray69 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet70);
        int int73 = node64.getLineno();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = node77.copyInformationFrom(node81);
        int int83 = node82.getChangeTime();
        node82.setVarArgs(true);
        node82.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node82.getJSDocInfo();
        boolean boolean89 = node82.isName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile90 = null;
        node82.setStaticSourceFile(staticSourceFile90);
        boolean boolean92 = node82.isWhile();
        boolean boolean93 = node82.isFalse();
        com.google.javascript.rhino.jstype.JSType jSType94 = node82.getJSType();
        boolean boolean95 = node64.isEquivalentToTyped(node82);
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(100, node44, node55, node82);
        com.google.javascript.rhino.Node node97 = node44.cloneTree();
        boolean boolean98 = node97.isParamList();
        boolean boolean99 = node97.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(jSType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n", (int) ' ', (int) (byte) 1);
        boolean boolean4 = node3.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 51.0 36", (int) (byte) 1, 42);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node19.addChildToFront(node25);
        boolean boolean27 = node19.isDec();
        com.google.javascript.rhino.Node node28 = node19.cloneNode();
        com.google.javascript.rhino.InputId inputId29 = node28.getInputId();
        node28.setSourceEncodedPosition(48);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = node46.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node52 = node40.srcrefTree(node51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node40.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) ' ', node40);
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node56 = node28.useSourceInfoIfMissingFromForTree(node54);
        // The following exception was thrown during execution in test generation
        try {
            node56.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder53);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        com.google.javascript.rhino.Node node4 = node3.getFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        com.google.javascript.rhino.Node node10 = node3.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node19.getLastSibling();
        java.lang.String str21 = node19.getSourceFileName();
        com.google.javascript.rhino.Node node22 = null;
        node10.addChildrenAfter(node19, node22);
        boolean boolean24 = node10.isIf();
        java.util.Set<java.lang.String> strSet25 = node10.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strSet25);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        node9.putIntProp(49, 52);
        java.lang.String str57 = node9.toString();
        boolean boolean58 = node9.isGetProp();
        // The following exception was thrown during execution in test generation
        try {
            node9.setString("NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 [direct_eval: 52] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 0.0 [direct_eval: 52]" + "'", str57, "NUMBER 0.0 [direct_eval: 52]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.isLocalResultCall();
        boolean boolean84 = node82.isTry();
        com.google.javascript.rhino.Node node85 = node82.removeChildren();
        boolean boolean86 = node82.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            int int88 = node82.getExistingIntProp(54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 54");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        com.google.javascript.rhino.Node node19 = node8.setJSDocInfo(jSDocInfo18);
        boolean boolean20 = node8.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        boolean boolean10 = node9.isInstanceOf();
        int int11 = node9.getType();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((-1), 10, 30);
        com.google.javascript.rhino.Node node16 = node9.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        node20.setDouble(1.0d);
        boolean boolean35 = node20.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        boolean boolean45 = node44.isAssignAdd();
        boolean boolean46 = node44.isFromExterns();
        boolean boolean47 = node44.isVarArgs();
        boolean boolean48 = node44.isDebugger();
        int int49 = node20.getIndexOfChild(node44);
        boolean boolean50 = node20.isDefaultCase();
        boolean boolean51 = node9.hasChild(node20);
        java.util.Set<java.lang.String> strSet52 = node20.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 39 + "'", int11 == 39);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet52);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 54, 50, (int) '#');
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node12.siblings();
        boolean boolean21 = node12.isObjectLit();
        boolean boolean22 = node12.isCase();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        int int43 = node42.getLineno();
        boolean boolean44 = node42.isUnscopedQualifiedName();
        int int45 = node42.getCharno();
        node12.addChildToBack(node42);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(409638, nodeArray2, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) 'a', nodeArray2);
        com.google.javascript.rhino.InputId inputId7 = node6.getInputId();
        node6.setLineno(16);
        java.lang.String str10 = node6.getQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(16);
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(56, node2);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isNot();
        boolean boolean17 = node3.isFromExterns();
        com.google.javascript.rhino.Node node18 = node3.getLastSibling();
        boolean boolean19 = node3.isFor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.isRegExp();
        boolean boolean7 = node3.isFalse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node3.getJSDocInfo();
        boolean boolean9 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node27.getJsDocBuilderForNode();
        fileLevelJsDocBuilder33.append("");
        fileLevelJsDocBuilder33.append("NUMBER 0.0 [direct_eval: 52]");
        fileLevelJsDocBuilder33.append("NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        node8.addSuppression("NUMBER 0.0 [var_args_name: 1]");
        boolean boolean18 = node8.isThis();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = node8.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        boolean boolean64 = node62.isStringKey();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = node68.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node74 = node62.srcrefTree(node73);
        com.google.javascript.rhino.Node node75 = node74.cloneNode();
        int int76 = node74.getCharno();
        boolean boolean77 = node74.isStringKey();
        com.google.javascript.rhino.Node node78 = node9.useSourceInfoIfMissingFrom(node74);
        boolean boolean79 = node74.isAnd();
        boolean boolean80 = node74.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(39, 40, 4);
        boolean boolean4 = node3.isWhile();
        boolean boolean5 = node3.isGetElem();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        node18.addSuppression("hi!");
        boolean boolean21 = node9.isEquivalentTo(node18);
        node9.setDouble(1.0d);
        int int24 = node9.getSideEffectFlags();
        node9.setCharno((int) (short) 0);
        node9.setCharno(31);
        boolean boolean29 = node9.isGetElem();
        boolean boolean30 = node9.isLabel();
        boolean boolean31 = node9.isLocalResultCall();
        boolean boolean32 = node9.isContinue();
        com.google.javascript.rhino.Node node33 = node3.srcref(node9);
        boolean boolean34 = node3.isGetterDef();
        node3.setSourceEncodedPositionForTree(0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n", (int) (byte) 10, (int) (short) 10);
        boolean boolean4 = node3.isNot();
        boolean boolean5 = node3.isContinue();
        boolean boolean6 = node3.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node15.isStringKey();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node26);
        boolean boolean28 = node27.isScript();
        boolean boolean29 = node27.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        boolean boolean39 = node37.isStringKey();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node49 = node37.srcrefTree(node48);
        boolean boolean50 = node49.isScript();
        com.google.javascript.rhino.Node node51 = node27.useSourceInfoFrom(node49);
        int int52 = node4.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isDelProp();
        boolean boolean70 = node56.isDo();
        java.lang.Object obj72 = node56.getProp(55);
        com.google.javascript.rhino.Node node73 = node27.useSourceInfoFromForTree(node56);
        boolean boolean74 = node27.isAssign();
        boolean boolean75 = node27.hasOneChild();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int80 = node79.getSourcePosition();
        boolean boolean81 = node79.isWith();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node86 = node85.cloneTree();
        boolean boolean87 = node85.isFunction();
        boolean boolean88 = node85.isRegExp();
        boolean boolean89 = node85.isFunction();
        node79.addChildToBack(node85);
        com.google.javascript.rhino.Node node91 = node27.useSourceInfoFromForTree(node79);
        boolean boolean92 = node79.isComma();
        node79.setChangeTime(1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 409638 + "'", int80 == 409638);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str10 = node8.getSourceFileName();
        boolean boolean11 = node8.isCall();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("BITXOR", 32, 0);
        com.google.javascript.rhino.Node node16 = node8.useSourceInfoIfMissingFrom(node15);
        node8.setType((-1));
        boolean boolean19 = node8.isFalse();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) ' ', "NUMBER 0.0\n", (int) 'a', 8);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        boolean boolean36 = node34.isStringKey();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        com.google.javascript.rhino.Node node46 = node34.srcrefTree(node45);
        boolean boolean47 = node46.isScript();
        boolean boolean48 = node46.isBreak();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node46.addChildToFront(node52);
        boolean boolean54 = node46.isDec();
        com.google.javascript.rhino.Node node55 = node46.cloneNode();
        boolean boolean56 = node55.isWhile();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(38, node55, 51, (int) (short) 1);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node62 = node59.clonePropsFrom(node61);
        node62.addSuppression("Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n");
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(29, node25, node62);
        com.google.javascript.rhino.Node node66 = node8.useSourceInfoIfMissingFrom(node25);
        node25.setChangeTime((int) '#');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        boolean boolean16 = node8.isQualifiedName();
        boolean boolean17 = node8.isFalse();
        boolean boolean18 = node8.isAnd();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        boolean boolean28 = node26.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node37);
        boolean boolean39 = node37.isCatch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        node52.addSuppression("hi!");
        boolean boolean55 = node43.isEquivalentTo(node52);
        boolean boolean56 = node43.isCase();
        boolean boolean57 = node43.isCast();
        com.google.javascript.rhino.Node node58 = node37.srcrefTree(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = null;
        com.google.javascript.rhino.Node node60 = node43.setJSDocInfo(jSDocInfo59);
        int int61 = node8.getIndexOfChild(node43);
        boolean boolean62 = node43.isName();
        boolean boolean63 = node43.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 53, 38, 49);
        boolean boolean5 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, node4, 42, (int) (short) -1);
        boolean boolean9 = node8.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setDouble(1.0d);
        boolean boolean18 = node3.isSwitch();
        boolean boolean19 = node3.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node8.getAncestors();
        boolean boolean13 = node8.isThrow();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node8.getJsDocBuilderForNode();
        boolean boolean15 = node8.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        int int42 = node39.getIntProp(49);
        com.google.javascript.rhino.Node node43 = node8.srcrefTree(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "NUMBER 0.0 [var_args_name: 1]");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        boolean boolean56 = node55.isAssignAdd();
        boolean boolean57 = node55.isTrue();
        double double58 = node55.getDouble();
        com.google.javascript.rhino.Node node59 = node55.removeFirstChild();
        node46.addChildToFront(node55);
        boolean boolean61 = node46.isOnlyModifiesThisCall();
        boolean boolean62 = node46.isScript();
        com.google.javascript.rhino.Node node63 = node43.useSourceInfoFrom(node46);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str13 = node9.toString(false, false, false);
        com.google.javascript.rhino.Node node14 = node9.getLastChild();
        boolean boolean15 = node9.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 0.0" + "'", str13, "NUMBER 0.0");
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = null;
        com.google.javascript.rhino.Node node52 = node35.setJSDocInfo(jSDocInfo51);
        boolean boolean53 = node52.isEmpty();
        com.google.javascript.rhino.Node node54 = node7.copyInformationFromForTree(node52);
        int int55 = node54.getChildCount();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        boolean boolean60 = node59.isTry();
        node59.setWasEmptyNode(false);
        int int63 = node59.getType();
        com.google.javascript.rhino.Node node64 = node54.srcrefTree(node59);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 39 + "'", int63 == 39);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0");
        int int4 = node1.getIndexOfChild(node3);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        boolean boolean14 = node12.isStringKey();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = node18.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node24 = node12.srcrefTree(node23);
        boolean boolean25 = node23.isCatch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        node38.addSuppression("hi!");
        boolean boolean41 = node29.isEquivalentTo(node38);
        boolean boolean42 = node29.isCase();
        boolean boolean43 = node29.isCast();
        com.google.javascript.rhino.Node node44 = node23.srcrefTree(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = null;
        com.google.javascript.rhino.Node node46 = node29.setJSDocInfo(jSDocInfo45);
        boolean boolean47 = node29.isStringKey();
        node29.setDouble((double) (short) -1);
        boolean boolean50 = node29.isContinue();
        boolean boolean51 = node29.isFunction();
        node1.addChildToFront(node29);
        java.util.Set<java.lang.String> strSet53 = node29.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strSet53);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        boolean boolean19 = node12.isHook();
        boolean boolean20 = node12.isInstanceOf();
        java.lang.String str21 = node12.getSourceFileName();
        boolean boolean22 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        com.google.javascript.rhino.Node node43 = node42.cloneNode();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node43.hasChild(node47);
        java.util.Set<java.lang.String> strSet54 = node43.getDirectives();
        boolean boolean55 = node43.isFromExterns();
        boolean boolean56 = node43.isBlock();
        boolean boolean57 = node43.isTry();
        node43.setOptionalArg(true);
        boolean boolean60 = node43.isAssignAdd();
        com.google.javascript.rhino.Node node61 = node12.srcref(node43);
        int int62 = node43.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node12.siblings();
        com.google.javascript.rhino.Node node21 = null;
        int int22 = node12.getIndexOfChild(node21);
        java.lang.Object obj24 = node12.getProp(35);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node33 = node12.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = node33.isIn();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        node28.addSuppression("hi!");
        boolean boolean31 = node19.isEquivalentTo(node28);
        boolean boolean32 = node19.isDelProp();
        boolean boolean33 = node19.isDo();
        java.lang.Object obj35 = node19.getProp(55);
        int int37 = node19.getIntProp(38);
        node3.addChildrenToBack(node19);
        boolean boolean39 = node3.isCall();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        boolean boolean49 = node47.isStringKey();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        com.google.javascript.rhino.Node node59 = node47.srcrefTree(node58);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node60.hasChild(node64);
        int int71 = node64.getSourceOffset();
        boolean boolean72 = node64.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node3.copyInformationFrom(node64);
        boolean boolean74 = node3.isParamList();
        boolean boolean75 = node3.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nGETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n", 55, (int) (byte) -1);
        node3.setCharno(0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "NUMBER 0.0 [var_args_name: 1]");
        int int3 = node2.getCharno();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        boolean boolean13 = node12.isAssignAdd();
        boolean boolean14 = node12.isTrue();
        boolean boolean15 = node12.isInstanceOf();
        boolean boolean16 = node12.isStringKey();
        com.google.javascript.rhino.Node node17 = node2.useSourceInfoIfMissingFromForTree(node12);
        boolean boolean18 = node2.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        com.google.javascript.rhino.InputId inputId25 = null;
        node19.setInputId(inputId25);
        boolean boolean27 = node19.isAnd();
        boolean boolean28 = node19.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = node32.cloneTree();
        boolean boolean34 = node32.isQuotedString();
        node32.setChangeTime((int) (short) 1);
        boolean boolean37 = node32.isHook();
        com.google.javascript.rhino.Node node38 = node19.useSourceInfoFromForTree(node32);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        com.google.javascript.rhino.Node node10 = node8.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = node10.isExprResult();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        boolean boolean40 = node38.isStringKey();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        com.google.javascript.rhino.Node node50 = node38.srcrefTree(node49);
        com.google.javascript.rhino.Node node51 = node50.cloneNode();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        boolean boolean61 = node51.hasChild(node55);
        boolean boolean62 = node55.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = null;
        com.google.javascript.rhino.Node node64 = node55.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.Node node65 = node20.useSourceInfoFrom(node55);
        boolean boolean66 = node55.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType67 = node55.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSType67);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 10);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        boolean boolean53 = node52.isAssignAdd();
        java.lang.String[] strArray57 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet58);
        boolean boolean61 = node52.isContinue();
        node43.addChildrenToBack(node52);
        boolean boolean63 = node43.isNew();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        node67.setWasEmptyNode(false);
        java.lang.String str73 = node67.toString(true, false, false);
        node43.addChildrenToFront(node67);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node83 = node78.copyInformationFrom(node82);
        node83.addSuppression("hi!");
        boolean boolean86 = node83.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable87 = node83.children();
        boolean boolean88 = node83.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            node41.replaceChild(node67, node83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NUMBER 51.0 36" + "'", str73, "NUMBER 51.0 36");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeIterable87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int12 = node9.getLength();
        boolean boolean13 = node9.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        node8.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        com.google.javascript.rhino.Node node16 = node8.getAncestor(42);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        boolean boolean26 = node24.isStringKey();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = node30.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node36 = node24.srcrefTree(node35);
        boolean boolean37 = node36.isScript();
        boolean boolean38 = node36.isBreak();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        boolean boolean48 = node46.isStringKey();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node58 = node46.srcrefTree(node57);
        boolean boolean59 = node58.isScript();
        com.google.javascript.rhino.Node node60 = node36.useSourceInfoFrom(node58);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node68.isStringKey();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        com.google.javascript.rhino.Node node80 = node68.srcrefTree(node79);
        boolean boolean81 = node79.isCatch();
        boolean boolean82 = node60.isEquivalentToTyped(node79);
        boolean boolean83 = node79.isVarArgs();
        node79.setCharno(55);
        boolean boolean86 = node79.isHook();
        com.google.javascript.rhino.Node node87 = node8.useSourceInfoIfMissingFromForTree(node79);
        int int88 = node8.getType();
        com.google.javascript.rhino.Node node89 = node8.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 51 + "'", int88 == 51);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        node14.setOptionalArg(false);
        int int18 = node14.getChildCount();
        boolean boolean19 = node14.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isVarArgs();
        node20.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        boolean boolean25 = node20.isLocalResultCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = null;
        com.google.javascript.rhino.Node node27 = node20.setJSDocInfo(jSDocInfo26);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder28 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        boolean boolean38 = node36.isStringKey();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        com.google.javascript.rhino.Node node48 = node36.srcrefTree(node47);
        boolean boolean49 = node48.isScript();
        boolean boolean50 = node48.isBreak();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node48.addChildToFront(node54);
        boolean boolean56 = node54.isLabelName();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        int int66 = node65.getChangeTime();
        node65.setVarArgs(true);
        node65.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = node65.getJSDocInfo();
        com.google.javascript.rhino.Node node72 = node65.removeChildren();
        boolean boolean73 = node65.isAnd();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int78 = node77.getSourcePosition();
        boolean boolean79 = node77.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(16, node27, node54, node65, node77, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 409638 + "'", int78 == 409638);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        node79.addSuppression("hi!");
        boolean boolean82 = node70.isEquivalentTo(node79);
        boolean boolean83 = node79.isGetterDef();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 10, node44, node79);
        node44.setDouble(100.0d);
        boolean boolean87 = node44.isReturn();
        node44.setDouble((double) 16);
        boolean boolean90 = node44.isOr();
        com.google.javascript.rhino.Node node91 = node44.cloneTree();
        boolean boolean92 = node91.isNot();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        node3.setWasEmptyNode(false);
        boolean boolean6 = node3.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        int int10 = node9.getSourcePosition();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(50, node9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        boolean boolean25 = node23.isStringKey();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        com.google.javascript.rhino.Node node35 = node23.srcrefTree(node34);
        boolean boolean36 = node35.isScript();
        boolean boolean37 = node35.isBreak();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node35.addChildToFront(node41);
        com.google.javascript.rhino.Node node43 = node15.copyInformationFrom(node41);
        boolean boolean44 = node43.isSyntheticBlock();
        int int45 = node43.getLength();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 10);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        boolean boolean57 = node56.isAssignAdd();
        java.lang.String[] strArray61 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean65 = node56.isContinue();
        node47.addChildrenToBack(node56);
        boolean boolean67 = node47.isNew();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        node71.setWasEmptyNode(false);
        java.lang.String str77 = node71.toString(true, false, false);
        node47.addChildrenToFront(node71);
        boolean boolean79 = node47.isObjectLit();
        int int80 = node47.getCharno();
        boolean boolean81 = node47.isGetProp();
        com.google.javascript.rhino.Node node82 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node83 = node9.copyInformationFrom(node43);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER 51.0 36" + "'", str77, "NUMBER 51.0 36");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.wasEmptyNode();
        boolean boolean12 = node8.isStringKey();
        com.google.javascript.rhino.Node node13 = node8.getParent();
        boolean boolean14 = node8.isReturn();
        boolean boolean15 = node8.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(409638, nodeArray6, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) 'a', nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(15, nodeArray6, 42, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((-1), nodeArray6);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(409638, nodeArray6, 35, 4095);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(52, nodeArray6);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean10 = node7.isThrow();
        boolean boolean11 = node7.hasOneChild();
        node7.setType(47);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        boolean boolean27 = node25.isStringKey();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node37 = node25.srcrefTree(node36);
        boolean boolean38 = node37.isScript();
        boolean boolean39 = node37.isBreak();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node37.addChildToFront(node43);
        com.google.javascript.rhino.Node node45 = node17.copyInformationFrom(node43);
        com.google.javascript.rhino.Node node46 = node7.useSourceInfoIfMissingFromForTree(node43);
        node7.setLineno(29);
        boolean boolean49 = node7.isSwitch();
        boolean boolean50 = node7.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isIf();
        boolean boolean16 = node9.wasEmptyNode();
        boolean boolean17 = node9.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        boolean boolean19 = node3.isWith();
        boolean boolean20 = node3.isQuotedString();
        boolean boolean21 = node3.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        node9.addSuppression("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = node9.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        com.google.javascript.rhino.Node node20 = node9.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node39.isGetterDef();
        node39.setType((int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node49.isCase();
        boolean boolean63 = node49.isCast();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFrom(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node64.children();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node24, node64);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node71 = node70.cloneTree();
        boolean boolean72 = node70.isQuotedString();
        boolean boolean73 = node70.isHook();
        com.google.javascript.rhino.Node node74 = node64.useSourceInfoFromForTree(node70);
        int int75 = node64.getCharno();
        boolean boolean76 = node64.isSwitch();
        boolean boolean77 = node64.isDebugger();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node3.setVarArgs(false);
        node3.setLength(0);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(38, 4, (int) (short) -1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = node27.copyInformationFrom(node31);
        com.google.javascript.rhino.Node node33 = node32.getLastSibling();
        java.lang.String str34 = node32.getSourceFileName();
        boolean boolean35 = node32.isAssign();
        boolean boolean36 = node32.isCase();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        boolean boolean47 = node45.isStringKey();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        com.google.javascript.rhino.Node node57 = node45.srcrefTree(node56);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder58 = node45.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) ' ', node45);
        boolean boolean60 = node45.isOnlyModifiesThisCall();
        com.google.javascript.rhino.jstype.JSType jSType61 = node45.getJSType();
        boolean boolean62 = node32.hasChild(node45);
        boolean boolean63 = node23.isEquivalentToTyped(node32);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = node67.copyInformationFrom(node71);
        boolean boolean73 = node71.isStringKey();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = node77.copyInformationFrom(node81);
        com.google.javascript.rhino.Node node83 = node71.srcrefTree(node82);
        com.google.javascript.rhino.Node node84 = node83.cloneNode();
        boolean boolean85 = node83.isLabelName();
        boolean boolean86 = node83.isName();
        boolean boolean87 = node83.isVarArgs();
        boolean boolean88 = node83.isCase();
        boolean boolean89 = node83.isVar();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenAfter(node32, node83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node27.getJsDocBuilderForNode();
        int int34 = node27.getChildCount();
        com.google.javascript.rhino.jstype.JSType jSType35 = node27.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(jSType35);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isWith();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node10 = node9.cloneTree();
        boolean boolean11 = node9.isFunction();
        boolean boolean12 = node9.isRegExp();
        boolean boolean13 = node9.isFunction();
        node3.addChildToBack(node9);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = node18.copyInformationFrom(node22);
        boolean boolean24 = node22.isStringKey();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        com.google.javascript.rhino.Node node34 = node22.srcrefTree(node33);
        boolean boolean35 = node33.isCatch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        node48.addSuppression("hi!");
        boolean boolean51 = node39.isEquivalentTo(node48);
        boolean boolean52 = node39.isCase();
        boolean boolean53 = node39.isCast();
        com.google.javascript.rhino.Node node54 = node33.srcrefTree(node39);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node39.getAncestors();
        boolean boolean56 = node39.isLabelName();
        com.google.javascript.rhino.Node node57 = node9.srcrefTree(node39);
        com.google.javascript.rhino.Node node58 = node57.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node57.getJsDocBuilderForNode();
        node57.addSuppression("Node tree inequality:\nTree1:\nERROR  0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: ERROR  0\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 409638 + "'", int4 == 409638);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        com.google.javascript.rhino.InputId inputId25 = null;
        node19.setInputId(inputId25);
        boolean boolean27 = node19.isAnd();
        boolean boolean28 = node19.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        boolean boolean11 = node7.getBooleanProp((int) (short) 0);
        int int12 = node7.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isVarArgs();
        node19.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        boolean boolean24 = node19.isLocalResultCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = null;
        com.google.javascript.rhino.Node node26 = node19.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node26.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node28 = node26.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.wasEmptyNode();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = node87.copyInformationFrom(node91);
        boolean boolean93 = node82.isEquivalentToTyped(node92);
        boolean boolean94 = node92.isArrayLit();
        node92.setSourceEncodedPositionForTree(55);
        boolean boolean97 = node92.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(409638, nodeArray4, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(409638, nodeArray4, 42, 15);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray4, (int) ' ', 42);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        boolean boolean25 = node24.isAssignAdd();
        boolean boolean26 = node24.isGetProp();
        java.lang.String str27 = node24.toStringTree();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        node40.addSuppression("hi!");
        boolean boolean43 = node31.isEquivalentTo(node40);
        node31.setDouble(1.0d);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        int int55 = node54.getChangeTime();
        boolean boolean56 = node54.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        int int66 = node65.getChangeTime();
        boolean boolean67 = node65.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(100, node24, node31, node54, node65);
        node24.setCharno((int) 'a');
        com.google.javascript.rhino.Node node71 = node14.copyInformationFromForTree(node24);
        boolean boolean72 = node14.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 0.0\n" + "'", str27, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        boolean boolean54 = node52.isStringKey();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node64 = node52.srcrefTree(node63);
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node44.isEquivalentToTyped(node63);
        java.lang.String str67 = node44.getQualifiedName();
        node44.setDouble((double) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) ' ', node44, 100, 12);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 1, 8, 16);
        boolean boolean4 = node3.isCase();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSType5);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING NUMBER 0.0 [var_args_name: 1] 56\n", (-1), 54);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isAssignAdd();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = node9.copyInformationFrom(node13);
        boolean boolean15 = node13.isStringKey();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node25 = node13.srcrefTree(node24);
        boolean boolean26 = node25.isScript();
        boolean boolean27 = node25.isBreak();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        boolean boolean37 = node35.isStringKey();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        com.google.javascript.rhino.Node node47 = node35.srcrefTree(node46);
        boolean boolean48 = node47.isScript();
        com.google.javascript.rhino.Node node49 = node25.useSourceInfoFrom(node47);
        boolean boolean50 = node49.isSetterDef();
        com.google.javascript.rhino.Node node51 = node3.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean52 = node49.isName();
        node49.setLineno(2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(409638, nodeArray8, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) 'a', nodeArray8);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(15, nodeArray8, 42, 0);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray8, 100, 37);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) '4', nodeArray8);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(8, nodeArray8);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray8);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) 100, nodeArray8);
        boolean boolean23 = node22.isAssign();
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        com.google.javascript.rhino.Node node4 = node3.getFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        com.google.javascript.rhino.Node node10 = node3.copyInformationFromForTree(node9);
        boolean boolean11 = node3.wasEmptyNode();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 30, 53);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node20 = node19.cloneTree();
        boolean boolean21 = node19.isQuotedString();
        node19.setChangeTime((int) (short) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node19.getStaticSourceFile();
        boolean boolean25 = node15.hasChild(node19);
        int int26 = node3.getIndexOfChild(node19);
        boolean boolean27 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        node8.setSourceEncodedPositionForTree(48);
        int int14 = node8.getType();
        com.google.javascript.rhino.Node node15 = node8.cloneNode();
        boolean boolean17 = node15.getBooleanProp((int) '4');
        node15.removeProp(43);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 39 + "'", int14 == 39);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = node12.copyInformationFrom(node16);
        boolean boolean18 = node17.isAssignAdd();
        boolean boolean19 = node17.isTrue();
        boolean boolean20 = node17.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = node7.srcref(node17);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node79.hasOneChild();
        double double84 = node79.getDouble();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        boolean boolean33 = node12.isFromExterns();
        node12.setSourceEncodedPositionForTree(24);
        boolean boolean36 = node12.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(35, "GETELEM 0\n    NUMBER 0.0\n    NUMBER 0.0\n    NUMBER 0.0 [jsdoc_info: JSDocInfo]\n    NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR", 32, 0);
        com.google.javascript.rhino.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        boolean boolean14 = node12.isStringKey();
        boolean boolean15 = node12.isThrow();
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoFromForTree(node12);
        java.lang.String str17 = node3.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "STRING BITXOR" + "'", str17, "STRING BITXOR");
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        node31.addSuppression("hi!");
        boolean boolean34 = node22.isEquivalentTo(node31);
        boolean boolean35 = node22.isCase();
        boolean boolean36 = node22.isCast();
        com.google.javascript.rhino.Node node37 = node12.useSourceInfoIfMissingFrom(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node37.children();
        com.google.javascript.rhino.jstype.JSType jSType39 = node37.getJSType();
        boolean boolean40 = node37.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        node14.setOptionalArg(false);
        int int18 = node14.getChildCount();
        node14.setLineno((int) (byte) 1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node24.getAncestors();
        int int41 = node24.getLength();
        boolean boolean42 = node24.isFor();
        boolean boolean43 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        com.google.javascript.rhino.Node node53 = node52.getLastSibling();
        java.lang.String str54 = node52.getSourceFileName();
        boolean boolean55 = node52.isCall();
        boolean boolean56 = node52.isContinue();
        int int57 = node52.getSourcePosition();
        int int58 = node24.getIndexOfChild(node52);
        boolean boolean59 = node52.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = node58.copyInformationFrom(node62);
        boolean boolean64 = node62.isStringKey();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node73 = node68.copyInformationFrom(node72);
        com.google.javascript.rhino.Node node74 = node62.srcrefTree(node73);
        com.google.javascript.rhino.Node node75 = node74.cloneNode();
        int int76 = node74.getCharno();
        boolean boolean77 = node74.isStringKey();
        com.google.javascript.rhino.Node node78 = node9.useSourceInfoIfMissingFrom(node74);
        boolean boolean79 = node74.isAnd();
        boolean boolean80 = node74.isLabel();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        boolean boolean35 = node33.getBooleanProp(43);
        boolean boolean36 = node33.isDelProp();
        com.google.javascript.rhino.Node node37 = node8.useSourceInfoIfMissingFrom(node33);
        boolean boolean38 = node8.isLabelName();
        boolean boolean39 = node8.isComma();
        node8.setCharno((int) '#');
        boolean boolean42 = node8.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node20.addChildToFront(node26);
        boolean boolean28 = node20.isDec();
        com.google.javascript.rhino.Node node29 = node20.cloneNode();
        boolean boolean30 = node29.isWhile();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        node39.setVarArgs(true);
        node39.setType(51);
        com.google.javascript.rhino.Node node45 = node39.cloneTree();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        int int55 = node49.getLength();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100, node29, node39, node49);
        boolean boolean57 = node49.isFalse();
        boolean boolean58 = node49.isSwitch();
        boolean boolean59 = node49.isBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node4.isParamList();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node27.setStaticSourceFile(staticSourceFile33);
        boolean boolean35 = node27.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = node27.getExistingIntProp(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 39");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        node12.putBooleanProp(4196, false);
        node12.addSuppression("");
        java.util.Set<java.lang.String> strSet38 = node12.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(strSet38);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        boolean boolean13 = node11.isStringKey();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node22);
        boolean boolean24 = node23.isScript();
        boolean boolean25 = node23.isBreak();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node23.addChildToFront(node29);
        com.google.javascript.rhino.Node node31 = node3.copyInformationFrom(node29);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node3.new FileLevelJsDocBuilder();
        boolean boolean33 = node3.isWhile();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        boolean boolean43 = node41.isStringKey();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        com.google.javascript.rhino.Node node53 = node41.srcrefTree(node52);
        com.google.javascript.rhino.Node node54 = node53.cloneNode();
        boolean boolean55 = node53.isLabelName();
        boolean boolean56 = node53.isName();
        boolean boolean57 = node53.isVarArgs();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = node61.copyInformationFrom(node65);
        int int67 = node66.getChangeTime();
        node66.setVarArgs(true);
        node53.addChildToBack(node66);
        node3.addChildrenToBack(node53);
        java.lang.Class<?> wildcardClass72 = node53.getClass();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node11 = node8.cloneTree();
        boolean boolean12 = node8.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        boolean boolean30 = node29.isVarArgs();
        node29.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        node8.addChildToBack(node29);
        boolean boolean35 = node8.isComma();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet49);
        boolean boolean52 = node44.isCase();
        node44.detachChildren();
        node8.addChildrenToBack(node44);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "NUMBER 0.0 [var_args_name: 1]");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isContinue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node21 = node20.cloneNode();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node21.hasChild(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = null;
        com.google.javascript.rhino.Node node33 = node21.setJSDocInfo(jSDocInfo32);
        boolean boolean34 = node33.isAnd();
        node33.setSourceEncodedPosition(2);
        node33.setDouble((double) 0.0f);
        java.lang.String str39 = node33.getQualifiedName();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 53, 38, 49);
        boolean boolean44 = node43.isGetElem();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 10, node33, node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node58.isGetterDef();
        int int63 = node58.getCharno();
        boolean boolean64 = node58.isThis();
        com.google.javascript.rhino.Node node65 = node45.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node66 = node58.cloneNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        node12.setSourceEncodedPosition(43);
        boolean boolean35 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node12.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile36);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        boolean boolean32 = node30.isLabelName();
        boolean boolean33 = node30.isName();
        boolean boolean34 = node30.isVarArgs();
        boolean boolean35 = node30.isCase();
        boolean boolean36 = node8.hasChild(node30);
        boolean boolean37 = node30.isWhile();
        boolean boolean38 = node30.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40, "GETELEM [jsdoc_info: JSDocInfo] [change_time: 1]\n", 29, 50);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node13.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node13.children();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        boolean boolean27 = node25.isStringKey();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        com.google.javascript.rhino.Node node37 = node25.srcrefTree(node36);
        com.google.javascript.rhino.Node node38 = node37.cloneNode();
        boolean boolean40 = node38.getBooleanProp(43);
        boolean boolean41 = node38.isDelProp();
        com.google.javascript.rhino.Node node42 = node13.useSourceInfoIfMissingFrom(node38);
        boolean boolean43 = node42.isThrow();
        boolean boolean44 = node4.isEquivalentTo(node42);
        boolean boolean45 = node4.isCall();
        boolean boolean46 = node4.isQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node39.isFunction();
        boolean boolean55 = node39.isStringKey();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((-1.0d), (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        com.google.javascript.rhino.Node node80 = node79.cloneNode();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node89 = node84.copyInformationFrom(node88);
        boolean boolean90 = node80.hasChild(node84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = null;
        com.google.javascript.rhino.Node node92 = node80.setJSDocInfo(jSDocInfo91);
        boolean boolean93 = node92.isAnd();
        boolean boolean94 = node92.isDebugger();
        boolean boolean95 = node59.isEquivalentToShallow(node92);
        node39.addChildToFront(node59);
        java.lang.Class<?> wildcardClass97 = node59.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        node28.addSuppression("hi!");
        boolean boolean31 = node19.isEquivalentTo(node28);
        boolean boolean32 = node19.isDelProp();
        boolean boolean33 = node19.isDo();
        java.lang.Object obj35 = node19.getProp(55);
        int int37 = node19.getIntProp(38);
        node3.addChildrenToBack(node19);
        boolean boolean39 = node3.isCall();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        boolean boolean49 = node47.isStringKey();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        com.google.javascript.rhino.Node node59 = node47.srcrefTree(node58);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node60.hasChild(node64);
        int int71 = node64.getSourceOffset();
        boolean boolean72 = node64.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node3.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node78 = node77.cloneTree();
        boolean boolean79 = node77.isFunction();
        boolean boolean80 = node77.isRegExp();
        boolean boolean81 = node77.isFunction();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = node85.copyInformationFrom(node89);
        boolean boolean91 = node90.isAssignAdd();
        boolean boolean92 = node90.isGetProp();
        boolean boolean93 = node90.isArrayLit();
        com.google.javascript.rhino.Node node94 = node77.useSourceInfoIfMissingFrom(node90);
        boolean boolean95 = node77.isBreak();
        com.google.javascript.rhino.Node node96 = node64.srcrefTree(node77);
        int int97 = node64.getType();
        boolean boolean98 = node64.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 39 + "'", int97 == 39);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isFor();
        node8.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags15.setMutatesArguments();
        int int17 = sideEffectFlags15.valueOf();
        sideEffectFlags15.setThrows();
        sideEffectFlags15.setAllFlags();
        boolean boolean20 = sideEffectFlags15.areAllFlagsSet();
        // The following exception was thrown during execution in test generation
        try {
            node8.setSideEffectFlags(sideEffectFlags15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        com.google.javascript.rhino.Node node70 = node69.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100, node69);
        com.google.javascript.rhino.Node node72 = node71.removeFirstChild();
        com.google.javascript.rhino.Node node73 = node57.srcrefTree(node71);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node86 = node81.copyInformationFrom(node85);
        node86.addSuppression("hi!");
        boolean boolean89 = node77.isEquivalentTo(node86);
        boolean boolean90 = node77.isCase();
        java.lang.String str91 = node77.toString();
        node73.addChildrenToFront(node77);
        com.google.javascript.rhino.Node node93 = node73.cloneNode();
        node93.detachChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "NUMBER 0.0" + "'", str91, "NUMBER 0.0");
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        int int4 = node3.getChildCount();
        boolean boolean5 = node3.isIn();
        boolean boolean6 = node3.isDelProp();
        node3.removeProp(29);
        com.google.javascript.rhino.Node node10 = node3.getAncestor((int) (byte) 100);
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        java.lang.Object obj5 = node3.getProp((int) (byte) 100);
        boolean boolean6 = node3.isOnlyModifiesThisCall();
        boolean boolean7 = node3.isComma();
        boolean boolean8 = node3.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node79.hasOneChild();
        boolean boolean84 = node79.isGetProp();
        boolean boolean85 = node79.isScript();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(409638, 0, 50);
        boolean boolean4 = node3.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        node9.addSuppression("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = node9.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = null;
        com.google.javascript.rhino.Node node20 = node9.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        boolean boolean25 = node24.isNull();
        boolean boolean26 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node39.isGetterDef();
        node39.setType((int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node49.isCase();
        boolean boolean63 = node49.isCast();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFrom(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node64.children();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node24, node64);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node71 = node70.cloneTree();
        boolean boolean72 = node70.isQuotedString();
        boolean boolean73 = node70.isHook();
        com.google.javascript.rhino.Node node74 = node64.useSourceInfoFromForTree(node70);
        com.google.javascript.rhino.Node node75 = node70.cloneNode();
        boolean boolean76 = node75.isThrow();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        boolean boolean10 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean15 = node8.hasChild(node14);
        java.lang.String str16 = node14.getQualifiedName();
        int int17 = node14.getType();
        boolean boolean18 = node14.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(38, 4, (int) (short) -1);
        boolean boolean4 = node3.isCatch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getSourceOffset();
        boolean boolean11 = node8.isVarArgs();
        node8.setLineno(4);
        boolean boolean14 = node8.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 24, 35, (int) (short) 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0", 4095, 30);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        boolean boolean6 = node3.getBooleanProp(35);
        int int7 = node3.getLength();
        boolean boolean8 = node3.isCall();
        boolean boolean9 = node3.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        boolean boolean44 = node41.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node41.removeChildren();
        boolean boolean46 = node41.isStringKey();
        boolean boolean47 = node41.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        boolean boolean33 = node20.isDelProp();
        boolean boolean34 = node20.isDo();
        java.lang.Object obj36 = node20.getProp(55);
        int int38 = node20.getIntProp(38);
        node4.addChildrenToBack(node20);
        int int40 = node4.getChangeTime();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node48.isStringKey();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node60 = node48.srcrefTree(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node48.getJsDocBuilderForNode();
        boolean boolean62 = node48.isThrow();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node48, 43, 46);
        java.lang.String str66 = node4.toStringTree();
        boolean boolean67 = node4.isStringKey();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = node71.copyInformationFrom(node75);
        com.google.javascript.rhino.Node node77 = node76.getLastSibling();
        node76.setLength(43);
        java.lang.String str80 = node76.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            node4.removeChild(node76);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER 0.0\n    NUMBER 0.0\n" + "'", str66, "NUMBER 0.0\n    NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "NUMBER 0.0 [length: 43]\n" + "'", str80, "NUMBER 0.0 [length: 43]\n");
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        com.google.javascript.rhino.Node node19 = node8.setJSDocInfo(jSDocInfo18);
        int int20 = node19.getChangeTime();
        double double21 = node19.getDouble();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = node29.copyInformationFrom(node33);
        node34.addSuppression("hi!");
        boolean boolean37 = node25.isEquivalentTo(node34);
        node25.setDouble(1.0d);
        boolean boolean40 = node25.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        boolean boolean50 = node49.isAssignAdd();
        boolean boolean51 = node49.isFromExterns();
        boolean boolean52 = node49.isVarArgs();
        boolean boolean53 = node49.isDebugger();
        int int54 = node25.getIndexOfChild(node49);
        java.util.Set<java.lang.String> strSet55 = node25.getDirectives();
        boolean boolean56 = node25.isFor();
        int int57 = node25.getChangeTime();
        node25.setOptionalArg(false);
        boolean boolean60 = node25.hasOneChild();
        node19.addChildToFront(node25);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        boolean boolean17 = node13.isGetterDef();
        node13.setType((int) '#');
        boolean boolean20 = node13.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node29.isAssignAdd();
        boolean boolean31 = node29.isTrue();
        boolean boolean32 = node29.wasEmptyNode();
        int int33 = node13.getIndexOfChild(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node29.getJSDocInfo();
        boolean boolean35 = node29.isString();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(1, node29);
        int int37 = node29.getChangeTime();
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(409638, nodeArray41, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) 'a', nodeArray41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(38, nodeArray41);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node47 = node29.removeChildAfter(node46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(nodeArray41);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(39, 40, 4);
        boolean boolean4 = node3.isWhile();
        boolean boolean5 = node3.isGetElem();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        node18.addSuppression("hi!");
        boolean boolean21 = node9.isEquivalentTo(node18);
        node9.setDouble(1.0d);
        int int24 = node9.getSideEffectFlags();
        node9.setCharno((int) (short) 0);
        node9.setCharno(31);
        boolean boolean29 = node9.isGetElem();
        boolean boolean30 = node9.isLabel();
        boolean boolean31 = node9.isLocalResultCall();
        boolean boolean32 = node9.isContinue();
        com.google.javascript.rhino.Node node33 = node3.srcref(node9);
        int int34 = node3.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isTrue();
        double double11 = node8.getDouble();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        node55.addSuppression("hi!");
        boolean boolean58 = node46.isEquivalentTo(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node31, node40, node55, node66 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', nodeArray68);
        java.lang.String str70 = node69.getQualifiedName();
        boolean boolean71 = node69.isHook();
        boolean boolean72 = node69.isNumber();
        com.google.javascript.rhino.Node node73 = node69.removeChildren();
        com.google.javascript.rhino.Node node74 = node8.copyInformationFromForTree(node69);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node83 = node78.copyInformationFrom(node82);
        boolean boolean84 = node83.isAssignAdd();
        java.lang.String[] strArray88 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        node83.setDirectives((java.util.Set<java.lang.String>) strSet89);
        node69.addChildrenToBack(node83);
        boolean boolean93 = node69.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        com.google.javascript.rhino.Node node12 = node11.removeFirstChild();
        boolean boolean13 = node12.hasMoreThanOneChild();
        boolean boolean14 = node12.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        boolean boolean11 = node8.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.children();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node33 = node32.cloneNode();
        boolean boolean35 = node33.getBooleanProp(43);
        boolean boolean36 = node33.isDelProp();
        com.google.javascript.rhino.Node node37 = node8.useSourceInfoIfMissingFrom(node33);
        boolean boolean38 = node8.isLabelName();
        boolean boolean39 = node8.isComma();
        int int41 = node8.getIntProp(1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        boolean boolean11 = node8.isThrow();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        node55.addSuppression("hi!");
        boolean boolean58 = node46.isEquivalentTo(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node31, node40, node55, node66 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', nodeArray68);
        boolean boolean70 = node69.isCall();
        int int71 = node69.getSourcePosition();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        boolean boolean81 = node79.isStringKey();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node90 = node85.copyInformationFrom(node89);
        com.google.javascript.rhino.Node node91 = node79.srcrefTree(node90);
        node91.detachChildren();
        double double93 = node91.getDouble();
        com.google.javascript.rhino.Node node94 = node69.srcref(node91);
        node69.removeProp((int) (short) -1);
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) (short) 10, node8, node69);
        boolean boolean98 = node69.isSyntheticBlock();
        boolean boolean99 = node69.isAssignAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        node8.addSuppression("hi!");
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node8.getBooleanProp((int) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = null;
        com.google.javascript.rhino.Node node19 = node8.setJSDocInfo(jSDocInfo18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isGetProp();
        boolean boolean31 = node28.isNot();
        com.google.javascript.rhino.Node node32 = node28.getParent();
        com.google.javascript.rhino.Node node33 = node19.copyInformationFromForTree(node28);
        int int35 = node33.getIntProp(37);
        boolean boolean36 = node33.isAnd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        int int46 = node45.getChangeTime();
        boolean boolean47 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        boolean boolean52 = node45.hasChild(node51);
        java.lang.String str53 = node51.getQualifiedName();
        boolean boolean54 = node51.isNumber();
        boolean boolean55 = node51.isIn();
        com.google.javascript.rhino.Node node56 = node33.useSourceInfoFromForTree(node51);
        node33.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(409638, nodeArray3, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) 'a', nodeArray3);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) ' ', nodeArray3);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        node21.addSuppression("hi!");
        boolean boolean24 = node12.isEquivalentTo(node21);
        node21.putBooleanProp(31, true);
        boolean boolean28 = node21.isHook();
        node21.setOptionalArg(false);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, node35, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        boolean boolean48 = node46.isStringKey();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node58 = node46.srcrefTree(node57);
        boolean boolean59 = node58.isScript();
        boolean boolean60 = node58.isBreak();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node68.isStringKey();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        com.google.javascript.rhino.Node node80 = node68.srcrefTree(node79);
        boolean boolean81 = node80.isScript();
        com.google.javascript.rhino.Node node82 = node58.useSourceInfoFrom(node80);
        int int83 = node35.getIndexOfChild(node58);
        boolean boolean84 = node35.isReturn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node90 = node89.cloneTree();
        boolean boolean91 = node89.isQuotedString();
        node35.putProp(1, (java.lang.Object) boolean91);
        boolean boolean93 = node35.isReturn();
        int int94 = node21.getIndexOfChild(node35);
        boolean boolean95 = node8.isEquivalentToTyped(node35);
        com.google.javascript.rhino.Node node96 = node8.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = node96.isSyntheticBlock();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(node96);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40960, 100, 39);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getNext();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        boolean boolean30 = node29.isScript();
        boolean boolean31 = node29.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        boolean boolean41 = node39.isStringKey();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        com.google.javascript.rhino.Node node51 = node39.srcrefTree(node50);
        boolean boolean52 = node51.isScript();
        com.google.javascript.rhino.Node node53 = node29.useSourceInfoFrom(node51);
        boolean boolean54 = node51.isLocalResultCall();
        boolean boolean55 = node8.isEquivalentTo(node51);
        com.google.javascript.rhino.InputId inputId56 = node51.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(inputId56);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isGetterDef();
        boolean boolean22 = node19.isSyntheticBlock();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isDebugger();
        int int25 = node19.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        node4.putBooleanProp(31, true);
        node4.setLength(4196);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node4.setJSType(jSType10);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(38, 55, (int) (short) 0);
        boolean boolean4 = node3.isNE();
        boolean boolean5 = node3.isIn();
        boolean boolean6 = node3.isVar();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 53, 38, 37);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        com.google.javascript.rhino.Node node22 = node19.getAncestor(43);
        boolean boolean23 = node19.isExprResult();
        boolean boolean24 = node19.isOptionalArg();
        boolean boolean25 = node19.isInc();
        int int26 = node19.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        node3.setWasEmptyNode(false);
        node3.setCharno(43);
        int int8 = node3.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36 + "'", int8 == 36);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node9.setJSType(jSType14);
        boolean boolean16 = node9.isVarArgs();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        com.google.javascript.rhino.Node node0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to com.google.javascript.rhino.Node$FileLevelJsDocBuilder with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node8.siblings();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node8.siblings();
        int int34 = node8.getSourcePosition();
        boolean boolean35 = node8.isRegExp();
        boolean boolean36 = node8.hasChildren();
        boolean boolean37 = node8.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("BITXOR");
        com.google.javascript.rhino.InputId inputId2 = node1.getInputId();
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(inputId2);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        boolean boolean25 = node19.isVar();
        boolean boolean26 = node19.isDo();
        node19.setDouble(0.0d);
        boolean boolean30 = node19.getBooleanProp((int) (short) 0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        boolean boolean10 = node8.isBreak();
        boolean boolean11 = node8.isDelProp();
        boolean boolean12 = node8.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        node3.setWasEmptyNode(false);
        boolean boolean6 = node3.isTry();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = node10.copyInformationFrom(node14);
        boolean boolean16 = node14.isStringKey();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node26 = node14.srcrefTree(node25);
        boolean boolean27 = node26.isScript();
        boolean boolean28 = node26.isBreak();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        boolean boolean38 = node36.isStringKey();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        com.google.javascript.rhino.Node node48 = node36.srcrefTree(node47);
        boolean boolean49 = node48.isScript();
        com.google.javascript.rhino.Node node50 = node26.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node51 = node3.srcref(node50);
        node3.setOptionalArg(false);
        boolean boolean54 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getCharno();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node14.cloneTree();
        boolean boolean16 = node14.isFunction();
        boolean boolean17 = node14.isRegExp();
        node8.addChildToBack(node14);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = node22.copyInformationFrom(node26);
        int int28 = node27.getChangeTime();
        node27.setVarArgs(true);
        node27.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node27.getJSDocInfo();
        boolean boolean34 = node27.isName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node27.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node27.isWhile();
        com.google.javascript.rhino.Node node38 = node27.getNext();
        com.google.javascript.rhino.Node node39 = node14.srcref(node27);
        boolean boolean40 = node14.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        node12.putBooleanProp(31, true);
        boolean boolean19 = node12.isHook();
        boolean boolean20 = node12.isString();
        boolean boolean21 = node12.isVoid();
        node12.setIsSyntheticBlock(false);
        int int24 = node12.getChangeTime();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node10 = node5.copyInformationFrom(node9);
        boolean boolean11 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node20);
        boolean boolean22 = node21.isScript();
        boolean boolean23 = node21.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = node27.copyInformationFrom(node31);
        boolean boolean33 = node31.isStringKey();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = node37.copyInformationFrom(node41);
        com.google.javascript.rhino.Node node43 = node31.srcrefTree(node42);
        boolean boolean44 = node43.isScript();
        com.google.javascript.rhino.Node node45 = node21.useSourceInfoFrom(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        boolean boolean55 = node53.isStringKey();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node65 = node53.srcrefTree(node64);
        boolean boolean66 = node64.isCatch();
        boolean boolean67 = node45.isEquivalentToTyped(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node80 = node75.copyInformationFrom(node79);
        node80.addSuppression("hi!");
        boolean boolean83 = node71.isEquivalentTo(node80);
        boolean boolean84 = node80.isGetterDef();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 10, node45, node80);
        node45.setDouble(100.0d);
        boolean boolean88 = node45.isReturn();
        node45.setDouble((double) 16);
        com.google.javascript.rhino.Node node92 = node45.getAncestor((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(24, node45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        node9.putIntProp(49, 52);
        java.lang.String str57 = node9.toString();
        boolean boolean58 = node9.isUnscopedQualifiedName();
        boolean boolean59 = node9.isGetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 0.0 [direct_eval: 52]" + "'", str57, "NUMBER 0.0 [direct_eval: 52]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(409638, nodeArray2, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(1, nodeArray2);
        org.junit.Assert.assertNotNull(nodeArray2);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "NUMBER 0.0\n", 35, 15);
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node12 = node10.getLastSibling();
        com.google.javascript.rhino.Node node13 = node3.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean14 = node13.hasChildren();
        boolean boolean15 = node13.isObjectLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        int int40 = node24.getChildCount();
        boolean boolean41 = node24.isSetterDef();
        int int42 = node24.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node6 = node3.removeChildren();
        node3.removeProp(40);
        // The following exception was thrown during execution in test generation
        try {
            node3.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 409638 + "'", int4 == 409638);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node27.isStringKey();
        boolean boolean30 = node27.isThrow();
        com.google.javascript.rhino.Node node31 = node27.getParent();
        node12.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node27.getJsDocBuilderForNode();
        int int34 = node27.getChildCount();
        java.lang.String str35 = node27.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 0.0\n" + "'", str35, "NUMBER 0.0\n");
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        boolean boolean42 = node24.hasChildren();
        java.lang.String str43 = node24.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER 0.0" + "'", str43, "NUMBER 0.0");
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isLabelName();
        node3.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 409638 + "'", int4 == 409638);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator19 = nodeIterable18.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator20 = nodeIterable18.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator21 = nodeIterable18.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(nodeSpliterator19);
        org.junit.Assert.assertNotNull(nodeSpliterator20);
        org.junit.Assert.assertNotNull(nodeSpliterator21);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getChangeTime();
        node8.setVarArgs(true);
        java.lang.String str15 = node8.toString(false, true, true);
        int int16 = node8.getChildCount();
        boolean boolean17 = node8.isVarArgs();
        com.google.javascript.rhino.InputId inputId18 = node8.getInputId();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str15, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(inputId18);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "", 0, (int) (short) 0);
        boolean boolean5 = node4.isQuotedString();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = node9.copyInformationFrom(node13);
        boolean boolean15 = node14.isAssignAdd();
        boolean boolean16 = node14.isTrue();
        boolean boolean17 = node14.wasEmptyNode();
        boolean boolean18 = node14.isStringKey();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(46, "NUMBER 51.0 36");
        // The following exception was thrown during execution in test generation
        try {
            node4.replaceChildAfter(node14, node21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        java.util.Set<java.lang.String> strSet31 = node20.getDirectives();
        boolean boolean32 = node20.isFromExterns();
        boolean boolean33 = node20.isBlock();
        boolean boolean34 = node20.isTry();
        node20.setOptionalArg(true);
        boolean boolean37 = node20.isAssignAdd();
        boolean boolean38 = node20.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        java.lang.String str10 = node8.getSourceFileName();
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isGetElem();
        boolean boolean13 = node8.isOnlyModifiesThisCall();
        boolean boolean14 = node8.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean6 = node5.isReturn();
        boolean boolean7 = node5.isHook();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node5.getJSDocInfo();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(35, node5, 8, 2);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node20.isStringKey();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        com.google.javascript.rhino.Node node32 = node20.srcrefTree(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        boolean boolean42 = node40.isStringKey();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        node55.addSuppression("hi!");
        boolean boolean58 = node46.isEquivalentTo(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = node62.copyInformationFrom(node66);
        com.google.javascript.rhino.Node[] nodeArray68 = new com.google.javascript.rhino.Node[] { node31, node40, node55, node66 };
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', nodeArray68);
        java.lang.String str70 = node69.getQualifiedName();
        boolean boolean71 = node69.isHook();
        int int72 = node69.getLength();
        com.google.javascript.rhino.Node node73 = node69.removeChildren();
        com.google.javascript.rhino.Node node74 = node5.useSourceInfoIfMissingFrom(node73);
        com.google.javascript.rhino.Node node75 = node74.removeFirstChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(nodeArray68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node3.isCase();
        boolean boolean17 = node3.isCast();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node3.siblings();
        boolean boolean19 = node3.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node29.isAssignAdd();
        boolean boolean31 = node29.isGetProp();
        java.lang.String str32 = node29.toStringTree();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        node45.addSuppression("hi!");
        boolean boolean48 = node36.isEquivalentTo(node45);
        node36.setDouble(1.0d);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = node54.copyInformationFrom(node58);
        int int60 = node59.getChangeTime();
        boolean boolean61 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        int int71 = node70.getChangeTime();
        boolean boolean72 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(100, node29, node36, node59, node70);
        com.google.javascript.rhino.Node node74 = node3.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node75 = node3.getFirstChild();
        int int76 = node3.getSourcePosition();
        boolean boolean77 = node3.isDec();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 0.0\n" + "'", str32, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        java.lang.String[] strArray13 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n", (int) ' ', (int) (byte) 1);
        boolean boolean21 = node8.isEquivalentToTyped(node20);
        int int22 = node20.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node82.isLocalResultCall();
        boolean boolean84 = node82.isTry();
        com.google.javascript.rhino.Node node85 = node82.removeChildren();
        boolean boolean86 = node82.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            node82.setString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: GETELEM is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node7.getJsDocBuilderForNode();
        boolean boolean21 = node7.isIf();
        boolean boolean22 = node7.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 47, 46);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        int int50 = node49.getLength();
        boolean boolean51 = node49.isCase();
        boolean boolean52 = node49.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        int int10 = node8.getCharno();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node14.cloneTree();
        boolean boolean16 = node14.isFunction();
        boolean boolean17 = node14.isRegExp();
        node8.addChildToBack(node14);
        boolean boolean19 = node8.isCase();
        node8.setOptionalArg(false);
        double double22 = node8.getDouble();
        double double23 = node8.getDouble();
        com.google.javascript.rhino.jstype.JSType jSType24 = node8.getJSType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "", 0, (int) (short) 0);
        boolean boolean30 = node29.isExprResult();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 [var_args_name: 1]", (int) (short) 1, 43);
        boolean boolean36 = node35.isReturn();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = node40.copyInformationFrom(node44);
        boolean boolean46 = node45.isAssignAdd();
        java.lang.String[] strArray50 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet51);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet51);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet51);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet51);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node61 = node60.cloneTree();
        boolean boolean62 = node60.isFunction();
        boolean boolean63 = node60.isRegExp();
        boolean boolean64 = node60.isFalse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node60.getJSDocInfo();
        int int66 = node60.getType();
        boolean boolean67 = node8.isEquivalentToTyped(node60);
        boolean boolean68 = node8.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '4', "NUMBER 100.0 [source_file: NUMBER 0.0]\n", (int) (short) 100, 16);
        boolean boolean5 = node4.isName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        boolean boolean40 = node39.isDelProp();
        com.google.javascript.rhino.Node node41 = node39.cloneNode();
        com.google.javascript.rhino.Node node42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = node41.srcrefTree(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(31, "GETELEM [jsdoc_info: JSDocInfo] [change_time: 1]\n", 36, 47);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        boolean boolean10 = node9.isInstanceOf();
        int int11 = node9.getType();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((-1), 10, 30);
        com.google.javascript.rhino.Node node16 = node9.useSourceInfoFrom(node15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        node29.addSuppression("hi!");
        boolean boolean32 = node20.isEquivalentTo(node29);
        node20.setDouble(1.0d);
        boolean boolean35 = node20.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        boolean boolean45 = node44.isAssignAdd();
        boolean boolean46 = node44.isFromExterns();
        boolean boolean47 = node44.isVarArgs();
        boolean boolean48 = node44.isDebugger();
        int int49 = node20.getIndexOfChild(node44);
        boolean boolean50 = node20.isDefaultCase();
        boolean boolean51 = node9.hasChild(node20);
        boolean boolean52 = node9.isDebugger();
        boolean boolean53 = node9.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 39 + "'", int11 == 39);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(52);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node24.getAncestors();
        int int41 = node24.getLength();
        boolean boolean42 = node24.isFor();
        boolean boolean43 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = node47.copyInformationFrom(node51);
        com.google.javascript.rhino.Node node53 = node52.getLastSibling();
        java.lang.String str54 = node52.getSourceFileName();
        boolean boolean55 = node52.isCall();
        boolean boolean56 = node52.isContinue();
        int int57 = node52.getSourcePosition();
        int int58 = node24.getIndexOfChild(node52);
        node52.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER 0.0\n\n\nTree2:\nNUMBER 0.0\n    NUMBER 0.0\n\n\nSubtree1: NUMBER 0.0\n\n\nSubtree2: NUMBER 0.0\n    NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(409638, nodeArray2, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) 'a', nodeArray2);
        boolean boolean7 = node6.isAdd();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = node15.copyInformationFrom(node19);
        node20.addSuppression("hi!");
        boolean boolean23 = node11.isEquivalentTo(node20);
        boolean boolean24 = node11.isCase();
        boolean boolean25 = node11.isCast();
        int int26 = node11.getSideEffectFlags();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        node39.addSuppression("hi!");
        boolean boolean42 = node30.isEquivalentTo(node39);
        boolean boolean43 = node39.isGetterDef();
        node39.setType((int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node58 = node53.copyInformationFrom(node57);
        node58.addSuppression("hi!");
        boolean boolean61 = node49.isEquivalentTo(node58);
        boolean boolean62 = node49.isCase();
        boolean boolean63 = node49.isCast();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFrom(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node64.children();
        boolean boolean66 = node64.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = node64.getJSDocInfo();
        com.google.javascript.rhino.Node node68 = node11.setJSDocInfo(jSDocInfo67);
        com.google.javascript.rhino.Node node69 = node6.setJSDocInfo(jSDocInfo67);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int12 = node9.getLength();
        boolean boolean13 = node9.isIn();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node9.setJSType(jSType14);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        boolean boolean20 = node18.isStringKey();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node30 = node18.srcrefTree(node29);
        boolean boolean31 = node29.isCatch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node44 = node39.copyInformationFrom(node43);
        node44.addSuppression("hi!");
        boolean boolean47 = node35.isEquivalentTo(node44);
        boolean boolean48 = node35.isCase();
        boolean boolean49 = node35.isCast();
        com.google.javascript.rhino.Node node50 = node29.srcrefTree(node35);
        node50.removeProp((int) (short) -1);
        boolean boolean53 = node8.isEquivalentToShallow(node50);
        boolean boolean54 = node8.isCast();
        boolean boolean55 = node8.isNot();
        com.google.javascript.rhino.Node node56 = node8.getParent();
        boolean boolean57 = node8.isExprResult();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node66 = node61.copyInformationFrom(node65);
        boolean boolean67 = node65.isStringKey();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node76 = node71.copyInformationFrom(node75);
        com.google.javascript.rhino.Node node77 = node65.srcrefTree(node76);
        com.google.javascript.rhino.Node node78 = node77.cloneNode();
        com.google.javascript.rhino.Node node79 = node8.clonePropsFrom(node77);
        node8.setLineno(29);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 10);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        boolean boolean33 = node29.isContinue();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = node29.getExistingIntProp(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 36");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isIf();
        boolean boolean16 = node9.wasEmptyNode();
        boolean boolean17 = node9.isIf();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = node9.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isFor();
        boolean boolean61 = node57.isBreak();
        node57.putBooleanProp(0, false);
        boolean boolean66 = node57.getBooleanProp(0);
        java.lang.String str70 = node57.toString(true, false, true);
        boolean boolean71 = node57.isIn();
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(409638, nodeArray76, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) 'a', nodeArray76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(0, nodeArray76);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(0, nodeArray76, 12, 36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = node84.getJSDocInfo();
        com.google.javascript.rhino.Node node86 = node57.useSourceInfoFromForTree(node84);
        node57.setCharno((int) (byte) 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GETELEM 0" + "'", str70, "GETELEM 0");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertNull(jSDocInfo85);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "BITXOR", 409638, 39);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node50.isExprResult();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, (int) (byte) 0, (-9));
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node8.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', node8);
        com.google.javascript.rhino.Node node24 = node8.getAncestor((int) '#');
        node8.setChangeTime((int) (byte) -1);
        boolean boolean27 = node8.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(38, "GETELEM [jsdoc_info: JSDocInfo] [change_time: 1]\n", (int) (byte) 1, 0);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "", 0, (int) (short) 0);
        node4.putIntProp(38, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node15.isStringKey();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node26);
        boolean boolean28 = node26.isCatch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = node32.copyInformationFrom(node36);
        int int38 = node37.getChangeTime();
        boolean boolean39 = node37.hasMoreThanOneChild();
        java.lang.String str40 = node26.checkTreeEquals(node37);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = node44.copyInformationFrom(node48);
        int int50 = node49.getChangeTime();
        node49.setVarArgs(true);
        java.lang.String str56 = node49.toString(false, true, true);
        com.google.javascript.rhino.Node node57 = node26.copyInformationFromForTree(node49);
        java.lang.String str58 = node4.checkTreeEquals(node26);
        boolean boolean59 = node26.isAssignAdd();
        int int61 = node26.getIntProp(0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str56, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Node tree inequality:\nTree1:\nERROR  0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: ERROR  0\n\n\nSubtree2: NUMBER 0.0\n" + "'", str58, "Node tree inequality:\nTree1:\nERROR  0\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: ERROR  0\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        boolean boolean30 = node29.isVarArgs();
        node29.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        node8.addChildToBack(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node44 = node43.getLastSibling();
        boolean boolean45 = node43.isBreak();
        boolean boolean46 = node29.isEquivalentToTyped(node43);
        int int47 = node43.getCharno();
        boolean boolean48 = node43.isSetterDef();
        boolean boolean49 = node43.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        java.lang.Object obj5 = node3.getProp((int) (byte) 100);
        boolean boolean6 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node7 = node3.getLastSibling();
        node7.setVarArgs(true);
        boolean boolean10 = node7.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(409638, nodeArray4, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(15, nodeArray4, 42, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(4, node11, (int) (byte) 100, 39);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node19.isScript();
        boolean boolean21 = node19.isBreak();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        boolean boolean31 = node29.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node40);
        boolean boolean42 = node41.isScript();
        com.google.javascript.rhino.Node node43 = node19.useSourceInfoFrom(node41);
        boolean boolean44 = node19.isAdd();
        node19.removeProp(30);
        boolean boolean47 = node19.isReturn();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = node51.copyInformationFrom(node55);
        boolean boolean57 = node56.isAssignAdd();
        boolean boolean58 = node56.isGetProp();
        java.lang.String str59 = node56.toStringTree();
        java.lang.String str60 = node56.toStringTree();
        node56.setIsSyntheticBlock(true);
        node19.addChildToBack(node56);
        boolean boolean64 = node56.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER 0.0\n" + "'", str59, "NUMBER 0.0\n");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 0.0\n" + "'", str60, "NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(409638, nodeArray4, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(15, nodeArray4, 42, 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray4, 1, (int) 'a');
        boolean boolean15 = node14.isCatch();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isGetProp();
        boolean boolean11 = node8.isArrayLit();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = node19.copyInformationFrom(node23);
        node24.addSuppression("hi!");
        boolean boolean27 = node15.isEquivalentTo(node24);
        boolean boolean28 = node24.isGetterDef();
        node24.setType((int) '#');
        node8.addChildToFront(node24);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = node35.copyInformationFrom(node39);
        int int42 = node39.getIntProp(49);
        com.google.javascript.rhino.Node node43 = node8.srcrefTree(node39);
        boolean boolean44 = node39.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        int int20 = node19.getLineno();
        com.google.javascript.rhino.Node node22 = node19.getAncestor(43);
        boolean boolean23 = node19.isExprResult();
        boolean boolean24 = node19.isOptionalArg();
        node19.setType(32);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        boolean boolean59 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        com.google.javascript.rhino.Node node70 = node69.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(100, node69);
        com.google.javascript.rhino.Node node72 = node71.removeFirstChild();
        com.google.javascript.rhino.Node node73 = node57.srcrefTree(node71);
        com.google.javascript.rhino.Node node74 = node57.getParent();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = node74.getSourceFileName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isIn();
        boolean boolean20 = node12.isInstanceOf();
        boolean boolean21 = node12.isTypeOf();
        boolean boolean22 = node12.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        boolean boolean58 = node57.isCall();
        int int59 = node57.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = node63.copyInformationFrom(node67);
        boolean boolean69 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = node73.copyInformationFrom(node77);
        com.google.javascript.rhino.Node node79 = node67.srcrefTree(node78);
        node79.detachChildren();
        double double81 = node79.getDouble();
        com.google.javascript.rhino.Node node82 = node57.srcref(node79);
        boolean boolean83 = node57.isScript();
        boolean boolean84 = node57.isBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node20.hasChild(node24);
        int int31 = node24.getSourceOffset();
        boolean boolean32 = node24.isNoSideEffectsCall();
        boolean boolean33 = node24.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = node41.copyInformationFrom(node45);
        node46.addSuppression("hi!");
        boolean boolean49 = node37.isEquivalentTo(node46);
        boolean boolean50 = node46.isGetterDef();
        node46.setType((int) '#');
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isCase();
        boolean boolean70 = node56.isCast();
        com.google.javascript.rhino.Node node71 = node46.useSourceInfoIfMissingFrom(node56);
        com.google.javascript.rhino.Node node72 = node24.useSourceInfoFrom(node46);
        boolean boolean73 = node24.isCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        int int9 = node8.getSourcePosition();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = null;
        com.google.javascript.rhino.Node node11 = node8.setJSDocInfo(jSDocInfo10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node15.isStringKey();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node26);
        boolean boolean28 = node27.isScript();
        boolean boolean29 = node27.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        boolean boolean39 = node37.isStringKey();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node49 = node37.srcrefTree(node48);
        boolean boolean50 = node49.isScript();
        com.google.javascript.rhino.Node node51 = node27.useSourceInfoFrom(node49);
        int int52 = node4.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isDelProp();
        boolean boolean70 = node56.isDo();
        java.lang.Object obj72 = node56.getProp(55);
        com.google.javascript.rhino.Node node73 = node27.useSourceInfoFromForTree(node56);
        boolean boolean74 = node27.isHook();
        boolean boolean75 = node27.isVoid();
        boolean boolean76 = node27.isThrow();
        com.google.javascript.rhino.Node node77 = node27.getLastChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0");
        int int4 = node1.getIndexOfChild(node3);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        boolean boolean14 = node12.isStringKey();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = node18.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node24 = node12.srcrefTree(node23);
        boolean boolean25 = node23.isCatch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        node38.addSuppression("hi!");
        boolean boolean41 = node29.isEquivalentTo(node38);
        boolean boolean42 = node29.isCase();
        boolean boolean43 = node29.isCast();
        com.google.javascript.rhino.Node node44 = node23.srcrefTree(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = null;
        com.google.javascript.rhino.Node node46 = node29.setJSDocInfo(jSDocInfo45);
        boolean boolean47 = node29.isStringKey();
        node29.setDouble((double) (short) -1);
        boolean boolean50 = node29.isContinue();
        boolean boolean51 = node29.isFunction();
        node1.addChildToFront(node29);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node65.isGetterDef();
        node65.setType((int) '#');
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node84 = node79.copyInformationFrom(node83);
        node84.addSuppression("hi!");
        boolean boolean87 = node75.isEquivalentTo(node84);
        boolean boolean88 = node75.isCase();
        boolean boolean89 = node75.isCast();
        com.google.javascript.rhino.Node node90 = node65.useSourceInfoIfMissingFrom(node75);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable91 = node90.children();
        boolean boolean92 = node90.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = node90.getJSDocInfo();
        node1.addChildToFront(node90);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(nodeIterable91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(jSDocInfo93);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 0);
        node1.setType(43);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        int int10 = node9.getSourcePosition();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(50, node9);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node9.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator13 = ancestorIterable12.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertNotNull(nodeSpliterator13);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, 36, (int) (short) 10);
        node3.setWasEmptyNode(false);
        node3.setCharno(43);
        node3.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node4 = node3.cloneTree();
        boolean boolean5 = node3.isFunction();
        boolean boolean6 = node3.isRegExp();
        boolean boolean7 = node3.isFalse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node3.getJSDocInfo();
        int int9 = node3.getType();
        boolean boolean10 = node3.isLabelName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isWith();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node10 = node9.cloneTree();
        boolean boolean11 = node9.isFunction();
        boolean boolean12 = node9.isRegExp();
        boolean boolean13 = node9.isFunction();
        node3.addChildToBack(node9);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node23 = node18.copyInformationFrom(node22);
        boolean boolean24 = node22.isStringKey();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        com.google.javascript.rhino.Node node34 = node22.srcrefTree(node33);
        boolean boolean35 = node33.isCatch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        node48.addSuppression("hi!");
        boolean boolean51 = node39.isEquivalentTo(node48);
        boolean boolean52 = node39.isCase();
        boolean boolean53 = node39.isCast();
        com.google.javascript.rhino.Node node54 = node33.srcrefTree(node39);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node39.getAncestors();
        boolean boolean56 = node39.isLabelName();
        com.google.javascript.rhino.Node node57 = node9.srcrefTree(node39);
        boolean boolean58 = node9.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 409638 + "'", int4 == 409638);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [var_args_name: 1]", 56, 0);
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.getJsDocBuilderForNode();
        fileLevelJsDocBuilder5.append("GETELEM [jsdoc_info: JSDocInfo] [change_time: 1]\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isWith();
        boolean boolean6 = node3.isAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = node10.copyInformationFrom(node14);
        boolean boolean16 = node14.isStringKey();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        com.google.javascript.rhino.Node node26 = node14.srcrefTree(node25);
        com.google.javascript.rhino.Node node27 = node26.cloneNode();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node36 = node31.copyInformationFrom(node35);
        boolean boolean37 = node27.hasChild(node31);
        java.util.Set<java.lang.String> strSet38 = node27.getDirectives();
        boolean boolean39 = node27.isFromExterns();
        boolean boolean40 = node27.isBlock();
        boolean boolean41 = node27.isTry();
        node27.setOptionalArg(true);
        boolean boolean44 = node27.isAssignAdd();
        java.lang.String[] strArray59 = new java.lang.String[] { "Node tree inequality:\nTree1:\nNUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nERROR hi!\n\n\nSubtree1: NUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: ERROR hi!\n", "GETELEM", "Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n", "GETELEM", "Node tree inequality:\nTree1:\nNUMBER 0.0\n    NUMBER 0.0\n\n\nTree2:\nBITXOR 31\n    NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]\n\n\nSubtree1: NUMBER 0.0\n    NUMBER 0.0\n\n\nSubtree2: BITXOR 31\n    NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]\n", "GETELEM [jsdoc_info: JSDocInfo]\n", "BITXOR", "NUMBER 0.0\n", "Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nERROR hi!\n\n\nSubtree1: NUMBER 0.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: ERROR hi!\n", "hi!", "BITXOR", "NUMBER 0.0 [direct_eval: 52]", "GETELEM [jsdoc_info: JSDocInfo]\n" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet60);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet60);
        node3.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 409638 + "'", int4 == 409638);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(409638, nodeArray3, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) ' ', nodeArray3, 55, 48);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(0, nodeArray3, 100, 0);
        boolean boolean13 = node12.isGetterDef();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        node12.addSuppression("hi!");
        boolean boolean15 = node3.isEquivalentTo(node12);
        boolean boolean16 = node12.isGetterDef();
        node12.setType((int) '#');
        boolean boolean19 = node12.isVar();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        boolean boolean29 = node28.isAssignAdd();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.wasEmptyNode();
        int int32 = node12.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node33 = node12.getFirstChild();
        java.lang.String str37 = node12.toString(true, false, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = node12.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GETELEM" + "'", str37, "GETELEM");
        org.junit.Assert.assertNotNull(jSDocInfo38);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        com.google.javascript.rhino.Node node9 = node8.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        boolean boolean19 = node17.isStringKey();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = node23.copyInformationFrom(node27);
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node28);
        boolean boolean30 = node29.isVarArgs();
        node29.putProp((int) (byte) 1, (java.lang.Object) "NUMBER 0.0\n");
        node8.addChildToBack(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node44 = node43.getLastSibling();
        boolean boolean45 = node43.isBreak();
        boolean boolean46 = node29.isEquivalentToTyped(node43);
        boolean boolean47 = node43.isDo();
        com.google.javascript.rhino.Node node48 = node43.removeChildren();
        com.google.javascript.rhino.Node node49 = node43.getLastChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder50 = node43.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        int int30 = node29.getChangeTime();
        boolean boolean31 = node29.hasMoreThanOneChild();
        java.lang.String str32 = node18.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        int int42 = node41.getChangeTime();
        node41.setVarArgs(true);
        java.lang.String str48 = node41.toString(false, true, true);
        com.google.javascript.rhino.Node node49 = node18.copyInformationFromForTree(node41);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        node49.setStaticSourceFile(staticSourceFile50);
        com.google.javascript.rhino.Node node52 = node49.getLastSibling();
        boolean boolean53 = node49.isLocalResultCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str48, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node13 = node8.copyInformationFrom(node12);
        node13.addSuppression("hi!");
        boolean boolean16 = node4.isEquivalentTo(node13);
        node13.setLineno((int) (byte) -1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node13.setStaticSourceFile(staticSourceFile19);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(39, node13);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = node25.copyInformationFrom(node29);
        node30.addSuppression("hi!");
        boolean boolean33 = node30.isThrow();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node30.children();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        boolean boolean44 = node42.isStringKey();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = node48.copyInformationFrom(node52);
        com.google.javascript.rhino.Node node54 = node42.srcrefTree(node53);
        com.google.javascript.rhino.Node node55 = node54.cloneNode();
        boolean boolean57 = node55.getBooleanProp(43);
        boolean boolean58 = node55.isDelProp();
        com.google.javascript.rhino.Node node59 = node30.useSourceInfoIfMissingFrom(node55);
        boolean boolean60 = node59.isThrow();
        com.google.javascript.rhino.Node node61 = node13.srcrefTree(node59);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node66 = node65.cloneTree();
        boolean boolean67 = node65.isQuotedString();
        boolean boolean68 = node65.isHook();
        boolean boolean69 = node61.isEquivalentToTyped(node65);
        boolean boolean70 = node65.isNot();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node29 = node24.copyInformationFrom(node28);
        boolean boolean30 = node28.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        node43.addSuppression("hi!");
        boolean boolean46 = node34.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node19, node28, node43, node54 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', nodeArray56);
        java.lang.String str58 = node57.getQualifiedName();
        boolean boolean59 = node57.isHook();
        boolean boolean60 = node57.isFor();
        boolean boolean61 = node57.isBreak();
        com.google.javascript.rhino.Node node62 = node57.getLastChild();
        com.google.javascript.rhino.Node node63 = node62.getParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        boolean boolean20 = node18.isCatch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        node33.addSuppression("hi!");
        boolean boolean36 = node24.isEquivalentTo(node33);
        boolean boolean37 = node24.isCase();
        boolean boolean38 = node24.isCast();
        com.google.javascript.rhino.Node node39 = node18.srcrefTree(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = null;
        com.google.javascript.rhino.Node node41 = node24.setJSDocInfo(jSDocInfo40);
        boolean boolean42 = node41.isEmpty();
        node41.setSourceEncodedPositionForTree(42);
        boolean boolean45 = node41.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node12 = node7.copyInformationFrom(node11);
        boolean boolean13 = node11.isStringKey();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node22);
        boolean boolean24 = node23.isScript();
        boolean boolean25 = node23.isBreak();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        node23.addChildToFront(node29);
        com.google.javascript.rhino.Node node31 = node3.copyInformationFrom(node29);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder32.append("Node tree inequality:\nTree1:\nNUMBER 0.0\n    NUMBER 0.0\n\n\nTree2:\nBITXOR 31\n    NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]\n\n\nSubtree1: NUMBER 0.0\n    NUMBER 0.0\n\n\nSubtree2: BITXOR 31\n    NUMBER 0.0 [directives: [NUMBER 0.0 [var_args_name: 1], hi!, ]]\n");
        fileLevelJsDocBuilder32.append("Node tree inequality:\nTree1:\nGETELEM [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: GETELEM [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(409638, nodeArray3, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) 'a', nodeArray3);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) ' ', nodeArray3);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        node21.addSuppression("hi!");
        boolean boolean24 = node12.isEquivalentTo(node21);
        node21.putBooleanProp(31, true);
        boolean boolean28 = node21.isHook();
        node21.setOptionalArg(false);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, node35, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = node42.copyInformationFrom(node46);
        boolean boolean48 = node46.isStringKey();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node57 = node52.copyInformationFrom(node56);
        com.google.javascript.rhino.Node node58 = node46.srcrefTree(node57);
        boolean boolean59 = node58.isScript();
        boolean boolean60 = node58.isBreak();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = node64.copyInformationFrom(node68);
        boolean boolean70 = node68.isStringKey();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node79 = node74.copyInformationFrom(node78);
        com.google.javascript.rhino.Node node80 = node68.srcrefTree(node79);
        boolean boolean81 = node80.isScript();
        com.google.javascript.rhino.Node node82 = node58.useSourceInfoFrom(node80);
        int int83 = node35.getIndexOfChild(node58);
        boolean boolean84 = node35.isReturn();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node90 = node89.cloneTree();
        boolean boolean91 = node89.isQuotedString();
        node35.putProp(1, (java.lang.Object) boolean91);
        boolean boolean93 = node35.isReturn();
        int int94 = node21.getIndexOfChild(node35);
        boolean boolean95 = node8.isEquivalentToTyped(node35);
        boolean boolean96 = node8.isAdd();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node10 = node9.getLastSibling();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node9);
        int int13 = node9.getIntProp(31);
        boolean boolean14 = node9.isRegExp();
        boolean boolean15 = node9.isIf();
        boolean boolean16 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, node21, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        boolean boolean34 = node32.isStringKey();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node43);
        boolean boolean45 = node44.isScript();
        boolean boolean46 = node44.isBreak();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node55 = node50.copyInformationFrom(node54);
        boolean boolean56 = node54.isStringKey();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node66 = node54.srcrefTree(node65);
        boolean boolean67 = node66.isScript();
        com.google.javascript.rhino.Node node68 = node44.useSourceInfoFrom(node66);
        int int69 = node21.getIndexOfChild(node44);
        com.google.javascript.rhino.Node node70 = node9.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean71 = node70.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(409638, nodeArray5, (int) (byte) 0, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) 'a', nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(0, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray5, 30, 49);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray5);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        com.google.javascript.rhino.InputId inputId21 = null;
        node19.setInputId(inputId21);
        node19.detachChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = node27.copyInformationFrom(node31);
        node32.addSuppression("hi!");
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet37);
        node32.setLineno(0);
        com.google.javascript.rhino.Node node42 = node19.srcrefTree(node32);
        com.google.javascript.rhino.Node node43 = node42.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isGetProp();
        java.lang.String str12 = node9.toStringTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = node20.copyInformationFrom(node24);
        node25.addSuppression("hi!");
        boolean boolean28 = node16.isEquivalentTo(node25);
        node16.setDouble(1.0d);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node39 = node34.copyInformationFrom(node38);
        int int40 = node39.getChangeTime();
        boolean boolean41 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node50 = node45.copyInformationFrom(node49);
        int int51 = node50.getChangeTime();
        boolean boolean52 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, node9, node16, node39, node50);
        boolean boolean54 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node9.getJSDocInfo();
        com.google.javascript.rhino.Node node56 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node57 = node9.useSourceInfoFrom(node56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 0.0\n" + "'", str12, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node8.isStringKey();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node19 = node14.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node20 = node8.srcrefTree(node19);
        boolean boolean21 = node20.isScript();
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node31 = node26.copyInformationFrom(node30);
        boolean boolean32 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node41 = node36.copyInformationFrom(node40);
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node41);
        boolean boolean43 = node42.isScript();
        com.google.javascript.rhino.Node node44 = node20.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node44.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        com.google.javascript.rhino.Node node55 = node54.getLastSibling();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = node59.copyInformationFrom(node63);
        boolean boolean65 = node64.isAssignAdd();
        java.lang.String[] strArray69 = new java.lang.String[] { "NUMBER 0.0 [var_args_name: 1]", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet70);
        int int73 = node64.getLineno();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = node77.copyInformationFrom(node81);
        int int83 = node82.getChangeTime();
        node82.setVarArgs(true);
        node82.setType(51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node82.getJSDocInfo();
        boolean boolean89 = node82.isName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile90 = null;
        node82.setStaticSourceFile(staticSourceFile90);
        boolean boolean92 = node82.isWhile();
        boolean boolean93 = node82.isFalse();
        com.google.javascript.rhino.jstype.JSType jSType94 = node82.getJSType();
        boolean boolean95 = node64.isEquivalentToTyped(node82);
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(100, node44, node55, node82);
        boolean boolean97 = node44.isBreak();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(jSType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isFromExterns();
        boolean boolean11 = node8.isVarArgs();
        node8.setSourceEncodedPositionForTree(48);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node22 = node17.copyInformationFrom(node21);
        boolean boolean23 = node22.isAssignAdd();
        boolean boolean24 = node22.isGetProp();
        boolean boolean25 = node22.isArrayLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        node38.addSuppression("hi!");
        boolean boolean41 = node29.isEquivalentTo(node38);
        boolean boolean42 = node38.isGetterDef();
        node38.setType((int) '#');
        node22.addChildToFront(node38);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node54 = node49.copyInformationFrom(node53);
        int int55 = node54.getChangeTime();
        node54.setVarArgs(true);
        java.lang.String str61 = node54.toString(false, true, true);
        boolean boolean62 = node54.isBreak();
        com.google.javascript.rhino.Node node63 = node22.copyInformationFrom(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = null;
        com.google.javascript.rhino.Node node65 = node63.setJSDocInfo(jSDocInfo64);
        node8.addChildToFront(node65);
        boolean boolean67 = node8.wasEmptyNode();
        com.google.javascript.rhino.jstype.JSType jSType68 = node8.getJSType();
        node8.setIsSyntheticBlock(false);
        boolean boolean71 = node8.isTry();
        com.google.javascript.rhino.Node node73 = node8.getAncestor(40960);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "NUMBER 0.0 [var_args_name: 1]" + "'", str61, "NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node73);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, node4, (int) (short) 1, 49);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node16 = node11.copyInformationFrom(node15);
        boolean boolean17 = node15.isStringKey();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node26 = node21.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node26);
        boolean boolean28 = node27.isScript();
        boolean boolean29 = node27.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node38 = node33.copyInformationFrom(node37);
        boolean boolean39 = node37.isStringKey();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node48 = node43.copyInformationFrom(node47);
        com.google.javascript.rhino.Node node49 = node37.srcrefTree(node48);
        boolean boolean50 = node49.isScript();
        com.google.javascript.rhino.Node node51 = node27.useSourceInfoFrom(node49);
        int int52 = node4.getIndexOfChild(node27);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node65 = node60.copyInformationFrom(node64);
        node65.addSuppression("hi!");
        boolean boolean68 = node56.isEquivalentTo(node65);
        boolean boolean69 = node56.isDelProp();
        boolean boolean70 = node56.isDo();
        java.lang.Object obj72 = node56.getProp(55);
        com.google.javascript.rhino.Node node73 = node27.useSourceInfoFromForTree(node56);
        boolean boolean74 = node27.isAssign();
        boolean boolean75 = node27.hasOneChild();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, 38);
        int int80 = node79.getSourcePosition();
        boolean boolean81 = node79.isWith();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(8, (int) (short) 1, (int) (short) 0);
        com.google.javascript.rhino.Node node86 = node85.cloneTree();
        boolean boolean87 = node85.isFunction();
        boolean boolean88 = node85.isRegExp();
        boolean boolean89 = node85.isFunction();
        node79.addChildToBack(node85);
        com.google.javascript.rhino.Node node91 = node27.useSourceInfoFromForTree(node79);
        node91.putIntProp(40, 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder95 = node91.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 409638 + "'", int80 == 409638);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0", 4095, 30);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        java.lang.String str5 = node3.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "STRING NUMBER 0.0 4095\n" + "'", str5, "STRING NUMBER 0.0 4095\n");
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = node3.copyInformationFrom(node7);
        boolean boolean9 = node7.isStringKey();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node18 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node18);
        com.google.javascript.rhino.Node node20 = node19.cloneNode();
        boolean boolean21 = node19.isLabelName();
        boolean boolean22 = node19.isName();
        boolean boolean23 = node19.isVarArgs();
        boolean boolean24 = node19.isCase();
        boolean boolean25 = node19.isVar();
        int int26 = node19.getType();
        boolean boolean27 = node19.isCast();
        boolean boolean28 = node19.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 39 + "'", int26 == 39);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node9 = node4.copyInformationFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isFromExterns();
        boolean boolean12 = node9.isVarArgs();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node21 = node16.copyInformationFrom(node20);
        boolean boolean22 = node21.isAssignAdd();
        boolean boolean23 = node21.isTrue();
        boolean boolean24 = node21.wasEmptyNode();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node33 = node28.copyInformationFrom(node32);
        boolean boolean34 = node32.isStringKey();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node43 = node38.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node43);
        com.google.javascript.rhino.Node node45 = node44.cloneNode();
        boolean boolean46 = node44.isLabelName();
        boolean boolean47 = node44.isName();
        boolean boolean48 = node44.isVarArgs();
        boolean boolean49 = node44.isCase();
        boolean boolean50 = node44.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(54, node9, node21, node44);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node60 = node55.copyInformationFrom(node59);
        boolean boolean61 = node59.isStringKey();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node70 = node65.copyInformationFrom(node69);
        com.google.javascript.rhino.Node node71 = node59.srcrefTree(node70);
        boolean boolean72 = node71.isScript();
        boolean boolean73 = node71.isBreak();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node82 = node77.copyInformationFrom(node81);
        boolean boolean83 = node81.isStringKey();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) ' ', (-1));
        com.google.javascript.rhino.Node node92 = node87.copyInformationFrom(node91);
        com.google.javascript.rhino.Node node93 = node81.srcrefTree(node92);
        boolean boolean94 = node93.isScript();
        com.google.javascript.rhino.Node node95 = node71.useSourceInfoFrom(node93);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder96 = node95.getJsDocBuilderForNode();
        boolean boolean97 = node95.isDo();
        com.google.javascript.rhino.Node node98 = node44.useSourceInfoFrom(node95);
        boolean boolean99 = node44.isTypeOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }
}

